<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="91987"><g><title>`0x7FF813BA2690 (16 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0174%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="16"/><text x="0.2500%" y="815.50"></text></g><g><title>`0x7FF813BAEC38 (11 samples, 0.01%)</title><rect x="0.0185%" y="725" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="11"/><text x="0.2685%" y="735.50"></text></g><g><title>`0x7FF813BA31BA (20 samples, 0.02%)</title><rect x="0.0185%" y="773" width="0.0217%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="20"/><text x="0.2685%" y="783.50"></text></g><g><title>`0x7FF813BB2230 (20 samples, 0.02%)</title><rect x="0.0185%" y="757" width="0.0217%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="20"/><text x="0.2685%" y="767.50"></text></g><g><title>`0x7FF813BAEBE3 (20 samples, 0.02%)</title><rect x="0.0185%" y="741" width="0.0217%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="20"/><text x="0.2685%" y="751.50"></text></g><g><title>hello.exe`core::iter::traits::iterator::Iterator::sum(core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="581" width="0.0283%" height="15" fill="rgb(232,128,0)" fg:x="48" fg:w="26"/><text x="0.3022%" y="591.50"></text></g><g><title>hello.exe`core::iter::traits::accum::impl$48::sum(core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="565" width="0.0283%" height="15" fill="rgb(207,160,47)" fg:x="48" fg:w="26"/><text x="0.3022%" y="575.50"></text></g><g><title>hello.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,hello::main::closure_env$1&gt;, unsigned long long, core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="549" width="0.0283%" height="15" fill="rgb(228,23,34)" fg:x="48" fg:w="26"/><text x="0.3022%" y="559.50"></text></g><g><title>hello.exe`std::collections::hash::map::impl$39::fold(std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;, unsigned long long, core::iter::adapters::map::map_fold::closure_env$0&lt;tuple$&lt;ref$&lt;alloc::string::String&gt;,ref$&lt;std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;,usize,usize,hello::main::closure_env$1,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="533" width="0.0283%" height="15" fill="rgb(218,30,26)" fg:x="48" fg:w="26"/><text x="0.3022%" y="543.50"></text></g><g><title>hello.exe`hashbrown::map::impl$60::fold&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,usize,core::iter::adapters::map::map_fold::closure_env$0&lt;tuple$&lt;ref$&lt;alloc::string::String&gt;,ref$&lt;std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;,usize,usize,hello::main::closure_env$1,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,hello::main::closure_env$1&gt; &gt; &gt; &gt;(hashbrown::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;, unsigned long long, core::iter::adapters::map::map_fold::closure_env$0&lt;tuple$&lt;ref$&lt;alloc::string::String&gt;,ref$&lt;std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;,usize,usize,hello::main::closure_env$1,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="517" width="0.0283%" height="15" fill="rgb(220,122,19)" fg:x="48" fg:w="26"/><text x="0.3022%" y="527.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$28::fold(hashbrown::raw::RawIter&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;, unsigned long long, hashbrown::map::impl$60::fold::closure_env$0&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,usize,core::iter::adapters::map::map_fold::closure_env$0&lt;tuple$&lt;ref$&lt;alloc::string::String&gt;,ref$&lt;std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;,usize,usize,hello::main::closure_env$1,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="501" width="0.0283%" height="15" fill="rgb(250,228,42)" fg:x="48" fg:w="26"/><text x="0.3022%" y="511.50"></text></g><g><title>hello.exe`hashbrown::raw::RawIterRange&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;::fold_impl(hashbrown::raw::RawIterRange&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;, unsigned long long, unsigned long long, hashbrown::map::impl$60::fold::closure_env$0&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,usize,core::iter::adapters::map::map_fold::closure_env$0&lt;tuple$&lt;ref$&lt;alloc::string::String&gt;,ref$&lt;std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;,usize,usize,hello::main::closure_env$1,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (26 samples, 0.03%)</title><rect x="0.0522%" y="485" width="0.0283%" height="15" fill="rgb(240,193,28)" fg:x="48" fg:w="26"/><text x="0.3022%" y="495.50"></text></g><g><title>`0x7FF813B75BB6 (13 samples, 0.01%)</title><rect x="0.1109%" y="357" width="0.0141%" height="15" fill="rgb(216,20,37)" fg:x="102" fg:w="13"/><text x="0.3609%" y="367.50"></text></g><g><title>`0x7FF813B75BBB (129 samples, 0.14%)</title><rect x="0.1250%" y="357" width="0.1402%" height="15" fill="rgb(206,188,39)" fg:x="115" fg:w="129"/><text x="0.3750%" y="367.50"></text></g><g><title>`0x7FF813BF6F2A (26 samples, 0.03%)</title><rect x="0.2663%" y="357" width="0.0283%" height="15" fill="rgb(217,207,13)" fg:x="245" fg:w="26"/><text x="0.5163%" y="367.50"></text></g><g><title>`0x7FF813BF6F58 (12 samples, 0.01%)</title><rect x="0.3098%" y="357" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="285" fg:w="12"/><text x="0.5598%" y="367.50"></text></g><g><title>`0x7FF813BF702A (13 samples, 0.01%)</title><rect x="0.3468%" y="357" width="0.0141%" height="15" fill="rgb(225,20,46)" fg:x="319" fg:w="13"/><text x="0.5968%" y="367.50"></text></g><g><title>`0x7FF813BF706A (24 samples, 0.03%)</title><rect x="0.3620%" y="357" width="0.0261%" height="15" fill="rgb(210,31,41)" fg:x="333" fg:w="24"/><text x="0.6120%" y="367.50"></text></g><g><title>`0x7FF813B70F01 (10 samples, 0.01%)</title><rect x="0.3903%" y="341" width="0.0109%" height="15" fill="rgb(221,200,47)" fg:x="359" fg:w="10"/><text x="0.6403%" y="351.50"></text></g><g><title>`0x7FF813B544AF (10 samples, 0.01%)</title><rect x="0.3903%" y="325" width="0.0109%" height="15" fill="rgb(226,26,5)" fg:x="359" fg:w="10"/><text x="0.6403%" y="335.50"></text></g><g><title>`0x7FF813B747B1 (10 samples, 0.01%)</title><rect x="0.3903%" y="309" width="0.0109%" height="15" fill="rgb(249,33,26)" fg:x="359" fg:w="10"/><text x="0.6403%" y="319.50"></text></g><g><title>`0x7FF813B75B74 (10 samples, 0.01%)</title><rect x="0.3903%" y="293" width="0.0109%" height="15" fill="rgb(235,183,28)" fg:x="359" fg:w="10"/><text x="0.6403%" y="303.50"></text></g><g><title>`0x7FF813B6E412 (19 samples, 0.02%)</title><rect x="0.4055%" y="261" width="0.0207%" height="15" fill="rgb(221,5,38)" fg:x="373" fg:w="19"/><text x="0.6555%" y="271.50"></text></g><g><title>`0x7FF813B6F35E (14 samples, 0.02%)</title><rect x="0.4109%" y="245" width="0.0152%" height="15" fill="rgb(247,18,42)" fg:x="378" fg:w="14"/><text x="0.6609%" y="255.50"></text></g><g><title>`0x7FF813B7095C (14 samples, 0.02%)</title><rect x="0.4109%" y="229" width="0.0152%" height="15" fill="rgb(241,131,45)" fg:x="378" fg:w="14"/><text x="0.6609%" y="239.50"></text></g><g><title>`0x7FF813B59B1A (14 samples, 0.02%)</title><rect x="0.4109%" y="213" width="0.0152%" height="15" fill="rgb(249,31,29)" fg:x="378" fg:w="14"/><text x="0.6609%" y="223.50"></text></g><g><title>`0x7FF813BED3A4 (14 samples, 0.02%)</title><rect x="0.4109%" y="197" width="0.0152%" height="15" fill="rgb(225,111,53)" fg:x="378" fg:w="14"/><text x="0.6609%" y="207.50"></text></g><g><title>`0x7FF813B544AF (27 samples, 0.03%)</title><rect x="0.4011%" y="325" width="0.0294%" height="15" fill="rgb(238,160,17)" fg:x="369" fg:w="27"/><text x="0.6511%" y="335.50"></text></g><g><title>`0x7FF813B747B1 (27 samples, 0.03%)</title><rect x="0.4011%" y="309" width="0.0294%" height="15" fill="rgb(214,148,48)" fg:x="369" fg:w="27"/><text x="0.6511%" y="319.50"></text></g><g><title>`0x7FF813B75B74 (27 samples, 0.03%)</title><rect x="0.4011%" y="293" width="0.0294%" height="15" fill="rgb(232,36,49)" fg:x="369" fg:w="27"/><text x="0.6511%" y="303.50"></text></g><g><title>`0x7FF813B765F6 (24 samples, 0.03%)</title><rect x="0.4044%" y="277" width="0.0261%" height="15" fill="rgb(209,103,24)" fg:x="372" fg:w="24"/><text x="0.6544%" y="287.50"></text></g><g><title>`0x7FF813BF71DF (38 samples, 0.04%)</title><rect x="0.3903%" y="357" width="0.0413%" height="15" fill="rgb(229,88,8)" fg:x="359" fg:w="38"/><text x="0.6403%" y="367.50"></text></g><g><title>`0x7FF813B70F76 (28 samples, 0.03%)</title><rect x="0.4011%" y="341" width="0.0304%" height="15" fill="rgb(213,181,19)" fg:x="369" fg:w="28"/><text x="0.6511%" y="351.50"></text></g><g><title>`0x7FF813B747B1 (316 samples, 0.34%)</title><rect x="0.0924%" y="373" width="0.3435%" height="15" fill="rgb(254,191,54)" fg:x="85" fg:w="316"/><text x="0.3424%" y="383.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (328 samples, 0.36%)</title><rect x="0.0815%" y="405" width="0.3566%" height="15" fill="rgb(241,83,37)" fg:x="75" fg:w="328"/><text x="0.3315%" y="415.50"></text></g><g><title>hello.exe`alloc::alloc::dealloc (328 samples, 0.36%)</title><rect x="0.0815%" y="389" width="0.3566%" height="15" fill="rgb(233,36,39)" fg:x="75" fg:w="328"/><text x="0.3315%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,f64&gt; &gt;::drop (330 samples, 0.36%)</title><rect x="0.0815%" y="517" width="0.3587%" height="15" fill="rgb(226,3,54)" fg:x="75" fg:w="330"/><text x="0.3315%" y="527.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$ (330 samples, 0.36%)</title><rect x="0.0815%" y="501" width="0.3587%" height="15" fill="rgb(245,192,40)" fg:x="75" fg:w="330"/><text x="0.3315%" y="511.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(tuple$ (330 samples, 0.36%)</title><rect x="0.0815%" y="485" width="0.3587%" height="15" fill="rgb(238,167,29)" fg:x="75" fg:w="330"/><text x="0.3315%" y="495.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place (330 samples, 0.36%)</title><rect x="0.0815%" y="469" width="0.3587%" height="15" fill="rgb(232,182,51)" fg:x="75" fg:w="330"/><text x="0.3315%" y="479.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::vec::Vec (330 samples, 0.36%)</title><rect x="0.0815%" y="453" width="0.3587%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="330"/><text x="0.3315%" y="463.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (330 samples, 0.36%)</title><rect x="0.0815%" y="437" width="0.3587%" height="15" fill="rgb(208,69,12)" fg:x="75" fg:w="330"/><text x="0.3315%" y="447.50"></text></g><g><title>hello.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (330 samples, 0.36%)</title><rect x="0.0815%" y="421" width="0.3587%" height="15" fill="rgb(235,93,37)" fg:x="75" fg:w="330"/><text x="0.3315%" y="431.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::vec::Vec (333 samples, 0.36%)</title><rect x="0.0804%" y="581" width="0.3620%" height="15" fill="rgb(213,116,39)" fg:x="74" fg:w="333"/><text x="0.3304%" y="591.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::string::String,f64&gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$ (332 samples, 0.36%)</title><rect x="0.0815%" y="565" width="0.3609%" height="15" fill="rgb(222,207,29)" fg:x="75" fg:w="332"/><text x="0.3315%" y="575.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::drop_inner_table (332 samples, 0.36%)</title><rect x="0.0815%" y="549" width="0.3609%" height="15" fill="rgb(206,96,30)" fg:x="75" fg:w="332"/><text x="0.3315%" y="559.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::drop_elements (332 samples, 0.36%)</title><rect x="0.0815%" y="533" width="0.3609%" height="15" fill="rgb(218,138,4)" fg:x="75" fg:w="332"/><text x="0.3315%" y="543.50"></text></g><g><title>`0x7FF813B6ED55 (62 samples, 0.07%)</title><rect x="0.4707%" y="309" width="0.0674%" height="15" fill="rgb(250,191,14)" fg:x="433" fg:w="62"/><text x="0.7207%" y="319.50"></text></g><g><title>`0x7FF813B6EA31 (69 samples, 0.08%)</title><rect x="0.4685%" y="341" width="0.0750%" height="15" fill="rgb(239,60,40)" fg:x="431" fg:w="69"/><text x="0.7185%" y="351.50"></text></g><g><title>`0x7FF813B6E2A9 (68 samples, 0.07%)</title><rect x="0.4696%" y="325" width="0.0739%" height="15" fill="rgb(206,27,48)" fg:x="432" fg:w="68"/><text x="0.7196%" y="335.50"></text></g><g><title>`0x7FF813B765F6 (72 samples, 0.08%)</title><rect x="0.4664%" y="373" width="0.0783%" height="15" fill="rgb(225,35,8)" fg:x="429" fg:w="72"/><text x="0.7164%" y="383.50"></text></g><g><title>`0x7FF813B6E430 (70 samples, 0.08%)</title><rect x="0.4685%" y="357" width="0.0761%" height="15" fill="rgb(250,213,24)" fg:x="431" fg:w="70"/><text x="0.7185%" y="367.50"></text></g><g><title>`0x7FF813B75B74 (73 samples, 0.08%)</title><rect x="0.4664%" y="389" width="0.0794%" height="15" fill="rgb(247,123,22)" fg:x="429" fg:w="73"/><text x="0.7164%" y="399.50"></text></g><g><title>`0x7FF813BF6F2A (156 samples, 0.17%)</title><rect x="0.5642%" y="389" width="0.1696%" height="15" fill="rgb(231,138,38)" fg:x="519" fg:w="156"/><text x="0.8142%" y="399.50"></text></g><g><title>`0x7FF813BF6F3B (26 samples, 0.03%)</title><rect x="0.7360%" y="389" width="0.0283%" height="15" fill="rgb(231,145,46)" fg:x="677" fg:w="26"/><text x="0.9860%" y="399.50"></text></g><g><title>`0x7FF813BF6F3F (49 samples, 0.05%)</title><rect x="0.7642%" y="389" width="0.0533%" height="15" fill="rgb(251,118,11)" fg:x="703" fg:w="49"/><text x="1.0142%" y="399.50"></text></g><g><title>`0x7FF813BF6F58 (10 samples, 0.01%)</title><rect x="0.8219%" y="389" width="0.0109%" height="15" fill="rgb(217,147,25)" fg:x="756" fg:w="10"/><text x="1.0719%" y="399.50"></text></g><g><title>`0x7FF813BF6F63 (12 samples, 0.01%)</title><rect x="0.8349%" y="389" width="0.0130%" height="15" fill="rgb(247,81,37)" fg:x="768" fg:w="12"/><text x="1.0849%" y="399.50"></text></g><g><title>`0x7FF813BF702A (12 samples, 0.01%)</title><rect x="0.8610%" y="389" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="792" fg:w="12"/><text x="1.1110%" y="399.50"></text></g><g><title>`0x7FF813BF706A (37 samples, 0.04%)</title><rect x="0.8784%" y="389" width="0.0402%" height="15" fill="rgb(227,1,9)" fg:x="808" fg:w="37"/><text x="1.1284%" y="399.50"></text></g><g><title>`0x7FF813B6ED55 (93 samples, 0.10%)</title><rect x="0.9262%" y="245" width="0.1011%" height="15" fill="rgb(248,47,43)" fg:x="852" fg:w="93"/><text x="1.1762%" y="255.50"></text></g><g><title>`0x7FF813B6E3AD (116 samples, 0.13%)</title><rect x="0.9262%" y="293" width="0.1261%" height="15" fill="rgb(221,10,30)" fg:x="852" fg:w="116"/><text x="1.1762%" y="303.50"></text></g><g><title>`0x7FF813B6EA31 (116 samples, 0.13%)</title><rect x="0.9262%" y="277" width="0.1261%" height="15" fill="rgb(210,229,1)" fg:x="852" fg:w="116"/><text x="1.1762%" y="287.50"></text></g><g><title>`0x7FF813B6E2A9 (116 samples, 0.13%)</title><rect x="0.9262%" y="261" width="0.1261%" height="15" fill="rgb(222,148,37)" fg:x="852" fg:w="116"/><text x="1.1762%" y="271.50"></text></g><g><title>`0x7FF813B6E412 (128 samples, 0.14%)</title><rect x="1.0523%" y="293" width="0.1392%" height="15" fill="rgb(234,67,33)" fg:x="968" fg:w="128"/><text x="1.3023%" y="303.50"></text></g><g><title>`0x7FF813B6F35E (121 samples, 0.13%)</title><rect x="1.0599%" y="277" width="0.1315%" height="15" fill="rgb(247,98,35)" fg:x="975" fg:w="121"/><text x="1.3099%" y="287.50"></text></g><g><title>`0x7FF813B7095C (121 samples, 0.13%)</title><rect x="1.0599%" y="261" width="0.1315%" height="15" fill="rgb(247,138,52)" fg:x="975" fg:w="121"/><text x="1.3099%" y="271.50"></text></g><g><title>`0x7FF813B59B1A (121 samples, 0.13%)</title><rect x="1.0599%" y="245" width="0.1315%" height="15" fill="rgb(213,79,30)" fg:x="975" fg:w="121"/><text x="1.3099%" y="255.50"></text></g><g><title>`0x7FF813BED3A4 (121 samples, 0.13%)</title><rect x="1.0599%" y="229" width="0.1315%" height="15" fill="rgb(246,177,23)" fg:x="975" fg:w="121"/><text x="1.3099%" y="239.50"></text></g><g><title>`0x7FF813B6E430 (10 samples, 0.01%)</title><rect x="1.1915%" y="293" width="0.0109%" height="15" fill="rgb(230,62,27)" fg:x="1096" fg:w="10"/><text x="1.4415%" y="303.50"></text></g><g><title>`0x7FF813B6EA31 (10 samples, 0.01%)</title><rect x="1.1915%" y="277" width="0.0109%" height="15" fill="rgb(216,154,8)" fg:x="1096" fg:w="10"/><text x="1.4415%" y="287.50"></text></g><g><title>`0x7FF813B6E2A9 (10 samples, 0.01%)</title><rect x="1.1915%" y="261" width="0.0109%" height="15" fill="rgb(244,35,45)" fg:x="1096" fg:w="10"/><text x="1.4415%" y="271.50"></text></g><g><title>`0x7FF813B6E574 (19 samples, 0.02%)</title><rect x="1.2023%" y="293" width="0.0207%" height="15" fill="rgb(251,115,12)" fg:x="1106" fg:w="19"/><text x="1.4523%" y="303.50"></text></g><g><title>`0x7FF813B59B1A (19 samples, 0.02%)</title><rect x="1.2023%" y="277" width="0.0207%" height="15" fill="rgb(240,54,50)" fg:x="1106" fg:w="19"/><text x="1.4523%" y="287.50"></text></g><g><title>`0x7FF813BED3A4 (19 samples, 0.02%)</title><rect x="1.2023%" y="261" width="0.0207%" height="15" fill="rgb(233,84,52)" fg:x="1106" fg:w="19"/><text x="1.4523%" y="271.50"></text></g><g><title>`0x7FF813B544AF (285 samples, 0.31%)</title><rect x="0.9197%" y="357" width="0.3098%" height="15" fill="rgb(207,117,47)" fg:x="846" fg:w="285"/><text x="1.1697%" y="367.50"></text></g><g><title>`0x7FF813B747B1 (285 samples, 0.31%)</title><rect x="0.9197%" y="341" width="0.3098%" height="15" fill="rgb(249,43,39)" fg:x="846" fg:w="285"/><text x="1.1697%" y="351.50"></text></g><g><title>`0x7FF813B75B74 (285 samples, 0.31%)</title><rect x="0.9197%" y="325" width="0.3098%" height="15" fill="rgb(209,38,44)" fg:x="846" fg:w="285"/><text x="1.1697%" y="335.50"></text></g><g><title>`0x7FF813B765F6 (280 samples, 0.30%)</title><rect x="0.9251%" y="309" width="0.3044%" height="15" fill="rgb(236,212,23)" fg:x="851" fg:w="280"/><text x="1.1751%" y="319.50"></text></g><g><title>`0x7FF813B70F01 (292 samples, 0.32%)</title><rect x="0.9197%" y="373" width="0.3174%" height="15" fill="rgb(242,79,21)" fg:x="846" fg:w="292"/><text x="1.1697%" y="383.50"></text></g><g><title>`0x7FF813B6ED55 (52 samples, 0.06%)</title><rect x="1.2480%" y="245" width="0.0565%" height="15" fill="rgb(211,96,35)" fg:x="1148" fg:w="52"/><text x="1.4980%" y="255.50"></text></g><g><title>`0x7FF813B6E3AD (71 samples, 0.08%)</title><rect x="1.2480%" y="293" width="0.0772%" height="15" fill="rgb(253,215,40)" fg:x="1148" fg:w="71"/><text x="1.4980%" y="303.50"></text></g><g><title>`0x7FF813B6EA31 (71 samples, 0.08%)</title><rect x="1.2480%" y="277" width="0.0772%" height="15" fill="rgb(211,81,21)" fg:x="1148" fg:w="71"/><text x="1.4980%" y="287.50"></text></g><g><title>`0x7FF813B6E2A9 (71 samples, 0.08%)</title><rect x="1.2480%" y="261" width="0.0772%" height="15" fill="rgb(208,190,38)" fg:x="1148" fg:w="71"/><text x="1.4980%" y="271.50"></text></g><g><title>`0x7FF813B7095C (93 samples, 0.10%)</title><rect x="1.3350%" y="261" width="0.1011%" height="15" fill="rgb(235,213,38)" fg:x="1228" fg:w="93"/><text x="1.5850%" y="271.50"></text></g><g><title>`0x7FF813B59B1A (93 samples, 0.10%)</title><rect x="1.3350%" y="245" width="0.1011%" height="15" fill="rgb(237,122,38)" fg:x="1228" fg:w="93"/><text x="1.5850%" y="255.50"></text></g><g><title>`0x7FF813BED3A4 (93 samples, 0.10%)</title><rect x="1.3350%" y="229" width="0.1011%" height="15" fill="rgb(244,218,35)" fg:x="1228" fg:w="93"/><text x="1.5850%" y="239.50"></text></g><g><title>`0x7FF813B6E412 (103 samples, 0.11%)</title><rect x="1.3252%" y="293" width="0.1120%" height="15" fill="rgb(240,68,47)" fg:x="1219" fg:w="103"/><text x="1.5752%" y="303.50"></text></g><g><title>`0x7FF813B6F35E (94 samples, 0.10%)</title><rect x="1.3350%" y="277" width="0.1022%" height="15" fill="rgb(210,16,53)" fg:x="1228" fg:w="94"/><text x="1.5850%" y="287.50"></text></g><g><title>`0x7FF813B6E574 (10 samples, 0.01%)</title><rect x="1.4426%" y="293" width="0.0109%" height="15" fill="rgb(235,124,12)" fg:x="1327" fg:w="10"/><text x="1.6926%" y="303.50"></text></g><g><title>`0x7FF813B59B1A (10 samples, 0.01%)</title><rect x="1.4426%" y="277" width="0.0109%" height="15" fill="rgb(224,169,11)" fg:x="1327" fg:w="10"/><text x="1.6926%" y="287.50"></text></g><g><title>`0x7FF813BED3A4 (10 samples, 0.01%)</title><rect x="1.4426%" y="261" width="0.0109%" height="15" fill="rgb(250,166,2)" fg:x="1327" fg:w="10"/><text x="1.6926%" y="271.50"></text></g><g><title>`0x7FF813B544AF (204 samples, 0.22%)</title><rect x="1.2371%" y="357" width="0.2218%" height="15" fill="rgb(242,216,29)" fg:x="1138" fg:w="204"/><text x="1.4871%" y="367.50"></text></g><g><title>`0x7FF813B747B1 (203 samples, 0.22%)</title><rect x="1.2382%" y="341" width="0.2207%" height="15" fill="rgb(230,116,27)" fg:x="1139" fg:w="203"/><text x="1.4882%" y="351.50"></text></g><g><title>`0x7FF813B75B74 (203 samples, 0.22%)</title><rect x="1.2382%" y="325" width="0.2207%" height="15" fill="rgb(228,99,48)" fg:x="1139" fg:w="203"/><text x="1.4882%" y="335.50"></text></g><g><title>`0x7FF813B765F6 (195 samples, 0.21%)</title><rect x="1.2469%" y="309" width="0.2120%" height="15" fill="rgb(253,11,6)" fg:x="1147" fg:w="195"/><text x="1.4969%" y="319.50"></text></g><g><title>`0x7FF813B70F76 (208 samples, 0.23%)</title><rect x="1.2371%" y="373" width="0.2261%" height="15" fill="rgb(247,143,39)" fg:x="1138" fg:w="208"/><text x="1.4871%" y="383.50"></text></g><g><title>`0x7FF813BF71DF (501 samples, 0.54%)</title><rect x="0.9197%" y="389" width="0.5446%" height="15" fill="rgb(236,97,10)" fg:x="846" fg:w="501"/><text x="1.1697%" y="399.50"></text></g><g><title>`0x7FF813B747B1 (937 samples, 1.02%)</title><rect x="0.4544%" y="405" width="1.0186%" height="15" fill="rgb(233,208,19)" fg:x="418" fg:w="937"/><text x="0.7044%" y="415.50"></text></g><g><title>`0x7FF813B74760 (25 samples, 0.03%)</title><rect x="1.5285%" y="213" width="0.0272%" height="15" fill="rgb(216,164,2)" fg:x="1406" fg:w="25"/><text x="1.7785%" y="223.50"></text></g><g><title>`0x7FF813B74777 (23 samples, 0.03%)</title><rect x="1.5567%" y="213" width="0.0250%" height="15" fill="rgb(220,129,5)" fg:x="1432" fg:w="23"/><text x="1.8067%" y="223.50"></text></g><g><title>`0x7FF813B7479E (18 samples, 0.02%)</title><rect x="1.5904%" y="213" width="0.0196%" height="15" fill="rgb(242,17,10)" fg:x="1463" fg:w="18"/><text x="1.8404%" y="223.50"></text></g><g><title>`0x7FF813B7571F (18 samples, 0.02%)</title><rect x="1.6535%" y="197" width="0.0196%" height="15" fill="rgb(242,107,0)" fg:x="1521" fg:w="18"/><text x="1.9035%" y="207.50"></text></g><g><title>`0x7FF813B75731 (22 samples, 0.02%)</title><rect x="1.6763%" y="197" width="0.0239%" height="15" fill="rgb(251,28,31)" fg:x="1542" fg:w="22"/><text x="1.9263%" y="207.50"></text></g><g><title>`0x7FF813B7592E (24 samples, 0.03%)</title><rect x="1.7002%" y="197" width="0.0261%" height="15" fill="rgb(233,223,10)" fg:x="1564" fg:w="24"/><text x="1.9502%" y="207.50"></text></g><g><title>`0x7FF813B75B11 (22 samples, 0.02%)</title><rect x="1.7339%" y="197" width="0.0239%" height="15" fill="rgb(215,21,27)" fg:x="1595" fg:w="22"/><text x="1.9839%" y="207.50"></text></g><g><title>`0x7FF813B75B57 (14 samples, 0.02%)</title><rect x="1.7666%" y="197" width="0.0152%" height="15" fill="rgb(232,23,21)" fg:x="1625" fg:w="14"/><text x="2.0166%" y="207.50"></text></g><g><title>`0x7FF813B75B9C (27 samples, 0.03%)</title><rect x="1.7872%" y="197" width="0.0294%" height="15" fill="rgb(244,5,23)" fg:x="1644" fg:w="27"/><text x="2.0372%" y="207.50"></text></g><g><title>`0x7FF813B75BA1 (23 samples, 0.03%)</title><rect x="1.8166%" y="197" width="0.0250%" height="15" fill="rgb(226,81,46)" fg:x="1671" fg:w="23"/><text x="2.0666%" y="207.50"></text></g><g><title>`0x7FF813B74837 (18 samples, 0.02%)</title><rect x="1.8220%" y="181" width="0.0196%" height="15" fill="rgb(247,70,30)" fg:x="1676" fg:w="18"/><text x="2.0720%" y="191.50"></text></g><g><title>`0x7FF813B75BB6 (375 samples, 0.41%)</title><rect x="1.8416%" y="197" width="0.4077%" height="15" fill="rgb(212,68,19)" fg:x="1694" fg:w="375"/><text x="2.0916%" y="207.50"></text></g><g><title>`0x7FF813B75BBB (2,904 samples, 3.16%)</title><rect x="2.2492%" y="197" width="3.1570%" height="15" fill="rgb(240,187,13)" fg:x="2069" fg:w="2904"/><text x="2.4992%" y="207.50">`0x..</text></g><g><title>`0x7FF813B75BC9 (26 samples, 0.03%)</title><rect x="5.4062%" y="197" width="0.0283%" height="15" fill="rgb(223,113,26)" fg:x="4973" fg:w="26"/><text x="5.6562%" y="207.50"></text></g><g><title>`0x7FF813BF6F11 (23 samples, 0.03%)</title><rect x="5.4475%" y="197" width="0.0250%" height="15" fill="rgb(206,192,2)" fg:x="5011" fg:w="23"/><text x="5.6975%" y="207.50"></text></g><g><title>`0x7FF813BF6F17 (17 samples, 0.02%)</title><rect x="5.4801%" y="197" width="0.0185%" height="15" fill="rgb(241,108,4)" fg:x="5041" fg:w="17"/><text x="5.7301%" y="207.50"></text></g><g><title>`0x7FF813BF6F27 (18 samples, 0.02%)</title><rect x="5.5051%" y="197" width="0.0196%" height="15" fill="rgb(247,173,49)" fg:x="5064" fg:w="18"/><text x="5.7551%" y="207.50"></text></g><g><title>`0x7FF813BF6F2A (2,175 samples, 2.36%)</title><rect x="5.5247%" y="197" width="2.3645%" height="15" fill="rgb(224,114,35)" fg:x="5082" fg:w="2175"/><text x="5.7747%" y="207.50">`0..</text></g><g><title>`0x7FF813BF6F2F (11 samples, 0.01%)</title><rect x="7.8892%" y="197" width="0.0120%" height="15" fill="rgb(245,159,27)" fg:x="7257" fg:w="11"/><text x="8.1392%" y="207.50"></text></g><g><title>`0x7FF813BF6F32 (30 samples, 0.03%)</title><rect x="7.9011%" y="197" width="0.0326%" height="15" fill="rgb(245,172,44)" fg:x="7268" fg:w="30"/><text x="8.1511%" y="207.50"></text></g><g><title>`0x7FF813BF6F3B (366 samples, 0.40%)</title><rect x="7.9337%" y="197" width="0.3979%" height="15" fill="rgb(236,23,11)" fg:x="7298" fg:w="366"/><text x="8.1837%" y="207.50"></text></g><g><title>`0x7FF813BF6F3F (839 samples, 0.91%)</title><rect x="8.3316%" y="197" width="0.9121%" height="15" fill="rgb(205,117,38)" fg:x="7664" fg:w="839"/><text x="8.5816%" y="207.50"></text></g><g><title>`0x7FF813BF6F58 (123 samples, 0.13%)</title><rect x="9.2524%" y="197" width="0.1337%" height="15" fill="rgb(237,72,25)" fg:x="8511" fg:w="123"/><text x="9.5024%" y="207.50"></text></g><g><title>`0x7FF813BF6F63 (122 samples, 0.13%)</title><rect x="9.4024%" y="197" width="0.1326%" height="15" fill="rgb(244,70,9)" fg:x="8649" fg:w="122"/><text x="9.6524%" y="207.50"></text></g><g><title>`0x7FF813BF6F66 (20 samples, 0.02%)</title><rect x="9.5350%" y="197" width="0.0217%" height="15" fill="rgb(217,125,39)" fg:x="8771" fg:w="20"/><text x="9.7850%" y="207.50"></text></g><g><title>`0x7FF813BF6F6E (27 samples, 0.03%)</title><rect x="9.5568%" y="197" width="0.0294%" height="15" fill="rgb(235,36,10)" fg:x="8791" fg:w="27"/><text x="9.8068%" y="207.50"></text></g><g><title>`0x7FF813BF6F73 (23 samples, 0.03%)</title><rect x="9.5861%" y="197" width="0.0250%" height="15" fill="rgb(251,123,47)" fg:x="8818" fg:w="23"/><text x="9.8361%" y="207.50"></text></g><g><title>`0x7FF813BF6F76 (18 samples, 0.02%)</title><rect x="9.6111%" y="197" width="0.0196%" height="15" fill="rgb(221,13,13)" fg:x="8841" fg:w="18"/><text x="9.8611%" y="207.50"></text></g><g><title>`0x7FF813BF6F7C (87 samples, 0.09%)</title><rect x="9.6318%" y="197" width="0.0946%" height="15" fill="rgb(238,131,9)" fg:x="8860" fg:w="87"/><text x="9.8818%" y="207.50"></text></g><g><title>`0x7FF813BF6F7F (21 samples, 0.02%)</title><rect x="9.7264%" y="197" width="0.0228%" height="15" fill="rgb(211,50,8)" fg:x="8947" fg:w="21"/><text x="9.9764%" y="207.50"></text></g><g><title>`0x7FF813BF6F82 (20 samples, 0.02%)</title><rect x="9.7492%" y="197" width="0.0217%" height="15" fill="rgb(245,182,24)" fg:x="8968" fg:w="20"/><text x="9.9992%" y="207.50"></text></g><g><title>`0x7FF813BF6F94 (34 samples, 0.04%)</title><rect x="9.7709%" y="197" width="0.0370%" height="15" fill="rgb(242,14,37)" fg:x="8988" fg:w="34"/><text x="10.0209%" y="207.50"></text></g><g><title>`0x7FF813BF6FFB (28 samples, 0.03%)</title><rect x="9.8101%" y="197" width="0.0304%" height="15" fill="rgb(246,228,12)" fg:x="9024" fg:w="28"/><text x="10.0601%" y="207.50"></text></g><g><title>`0x7FF813BF700B (18 samples, 0.02%)</title><rect x="9.8405%" y="197" width="0.0196%" height="15" fill="rgb(213,55,15)" fg:x="9052" fg:w="18"/><text x="10.0905%" y="207.50"></text></g><g><title>`0x7FF813BF701D (27 samples, 0.03%)</title><rect x="9.8601%" y="197" width="0.0294%" height="15" fill="rgb(209,9,3)" fg:x="9070" fg:w="27"/><text x="10.1101%" y="207.50"></text></g><g><title>`0x7FF813BF702A (114 samples, 0.12%)</title><rect x="9.8894%" y="197" width="0.1239%" height="15" fill="rgb(230,59,30)" fg:x="9097" fg:w="114"/><text x="10.1394%" y="207.50"></text></g><g><title>`0x7FF813BF7045 (20 samples, 0.02%)</title><rect x="10.0188%" y="197" width="0.0217%" height="15" fill="rgb(209,121,21)" fg:x="9216" fg:w="20"/><text x="10.2688%" y="207.50"></text></g><g><title>`0x7FF813BF706A (564 samples, 0.61%)</title><rect x="10.0460%" y="197" width="0.6131%" height="15" fill="rgb(220,109,13)" fg:x="9241" fg:w="564"/><text x="10.2960%" y="207.50"></text></g><g><title>`0x7FF813BF70AB (11 samples, 0.01%)</title><rect x="10.6656%" y="197" width="0.0120%" height="15" fill="rgb(232,18,1)" fg:x="9811" fg:w="11"/><text x="10.9156%" y="207.50"></text></g><g><title>`0x7FF813BF70BA (19 samples, 0.02%)</title><rect x="10.6787%" y="197" width="0.0207%" height="15" fill="rgb(215,41,42)" fg:x="9823" fg:w="19"/><text x="10.9287%" y="207.50"></text></g><g><title>`0x7FF813B76068 (16 samples, 0.02%)</title><rect x="10.7200%" y="117" width="0.0174%" height="15" fill="rgb(224,123,36)" fg:x="9861" fg:w="16"/><text x="10.9700%" y="127.50"></text></g><g><title>`0x7FF813B5ED8A (16 samples, 0.02%)</title><rect x="10.7200%" y="101" width="0.0174%" height="15" fill="rgb(240,125,3)" fg:x="9861" fg:w="16"/><text x="10.9700%" y="111.50"></text></g><g><title>`0x7FF813BED2E4 (16 samples, 0.02%)</title><rect x="10.7200%" y="85" width="0.0174%" height="15" fill="rgb(205,98,50)" fg:x="9861" fg:w="16"/><text x="10.9700%" y="95.50"></text></g><g><title>`0x7FF813B764AB (14 samples, 0.02%)</title><rect x="10.7385%" y="117" width="0.0152%" height="15" fill="rgb(205,185,37)" fg:x="9878" fg:w="14"/><text x="10.9885%" y="127.50"></text></g><g><title>`0x7FF813B5ED8A (14 samples, 0.02%)</title><rect x="10.7385%" y="101" width="0.0152%" height="15" fill="rgb(238,207,15)" fg:x="9878" fg:w="14"/><text x="10.9885%" y="111.50"></text></g><g><title>`0x7FF813BED2E4 (14 samples, 0.02%)</title><rect x="10.7385%" y="85" width="0.0152%" height="15" fill="rgb(213,199,42)" fg:x="9878" fg:w="14"/><text x="10.9885%" y="95.50"></text></g><g><title>`0x7FF813B6ED55 (203 samples, 0.22%)</title><rect x="10.7548%" y="53" width="0.2207%" height="15" fill="rgb(235,201,11)" fg:x="9893" fg:w="203"/><text x="11.0048%" y="63.50"></text></g><g><title>`0x7FF813B6ED7D (10 samples, 0.01%)</title><rect x="11.0016%" y="53" width="0.0109%" height="15" fill="rgb(207,46,11)" fg:x="10120" fg:w="10"/><text x="11.2516%" y="63.50"></text></g><g><title>`0x7FF813B6ED87 (10 samples, 0.01%)</title><rect x="11.0124%" y="53" width="0.0109%" height="15" fill="rgb(241,35,35)" fg:x="10130" fg:w="10"/><text x="11.2624%" y="63.50"></text></g><g><title>`0x7FF813B6EA31 (253 samples, 0.28%)</title><rect x="10.7548%" y="85" width="0.2750%" height="15" fill="rgb(243,32,47)" fg:x="9893" fg:w="253"/><text x="11.0048%" y="95.50"></text></g><g><title>`0x7FF813B6E2A9 (253 samples, 0.28%)</title><rect x="10.7548%" y="69" width="0.2750%" height="15" fill="rgb(247,202,23)" fg:x="9893" fg:w="253"/><text x="11.0048%" y="79.50"></text></g><g><title>`0x7FF813B6E3AD (254 samples, 0.28%)</title><rect x="10.7548%" y="101" width="0.2761%" height="15" fill="rgb(219,102,11)" fg:x="9893" fg:w="254"/><text x="11.0048%" y="111.50"></text></g><g><title>`0x7FF813B7095C (203 samples, 0.22%)</title><rect x="11.0396%" y="69" width="0.2207%" height="15" fill="rgb(243,110,44)" fg:x="10155" fg:w="203"/><text x="11.2896%" y="79.50"></text></g><g><title>`0x7FF813B59B1A (203 samples, 0.22%)</title><rect x="11.0396%" y="53" width="0.2207%" height="15" fill="rgb(222,74,54)" fg:x="10155" fg:w="203"/><text x="11.2896%" y="63.50"></text></g><g><title>`0x7FF813BED3A4 (203 samples, 0.22%)</title><rect x="11.0396%" y="37" width="0.2207%" height="15" fill="rgb(216,99,12)" fg:x="10155" fg:w="203"/><text x="11.2896%" y="47.50"></text></g><g><title>`0x7FF813B6E412 (212 samples, 0.23%)</title><rect x="11.0309%" y="101" width="0.2305%" height="15" fill="rgb(226,22,26)" fg:x="10147" fg:w="212"/><text x="11.2809%" y="111.50"></text></g><g><title>`0x7FF813B6F35E (204 samples, 0.22%)</title><rect x="11.0396%" y="85" width="0.2218%" height="15" fill="rgb(217,163,10)" fg:x="10155" fg:w="204"/><text x="11.2896%" y="95.50"></text></g><g><title>`0x7FF813B6E574 (18 samples, 0.02%)</title><rect x="11.2614%" y="101" width="0.0196%" height="15" fill="rgb(213,25,53)" fg:x="10359" fg:w="18"/><text x="11.5114%" y="111.50"></text></g><g><title>`0x7FF813B59B1A (18 samples, 0.02%)</title><rect x="11.2614%" y="85" width="0.0196%" height="15" fill="rgb(252,105,26)" fg:x="10359" fg:w="18"/><text x="11.5114%" y="95.50"></text></g><g><title>`0x7FF813BED3A4 (18 samples, 0.02%)</title><rect x="11.2614%" y="69" width="0.0196%" height="15" fill="rgb(220,39,43)" fg:x="10359" fg:w="18"/><text x="11.5114%" y="79.50"></text></g><g><title>`0x7FF813B765F6 (493 samples, 0.54%)</title><rect x="10.7548%" y="117" width="0.5359%" height="15" fill="rgb(229,68,48)" fg:x="9893" fg:w="493"/><text x="11.0048%" y="127.50"></text></g><g><title>`0x7FF813B544AF (530 samples, 0.58%)</title><rect x="10.7156%" y="165" width="0.5762%" height="15" fill="rgb(252,8,32)" fg:x="9857" fg:w="530"/><text x="10.9656%" y="175.50"></text></g><g><title>`0x7FF813B747B1 (530 samples, 0.58%)</title><rect x="10.7156%" y="149" width="0.5762%" height="15" fill="rgb(223,20,43)" fg:x="9857" fg:w="530"/><text x="10.9656%" y="159.50"></text></g><g><title>`0x7FF813B75B74 (528 samples, 0.57%)</title><rect x="10.7178%" y="133" width="0.5740%" height="15" fill="rgb(229,81,49)" fg:x="9859" fg:w="528"/><text x="10.9678%" y="143.50"></text></g><g><title>`0x7FF813B70F01 (547 samples, 0.59%)</title><rect x="10.7156%" y="181" width="0.5946%" height="15" fill="rgb(236,28,36)" fg:x="9857" fg:w="547"/><text x="10.9656%" y="191.50"></text></g><g><title>`0x7FF813B54515 (17 samples, 0.02%)</title><rect x="11.2918%" y="165" width="0.0185%" height="15" fill="rgb(249,185,26)" fg:x="10387" fg:w="17"/><text x="11.5418%" y="175.50"></text></g><g><title>`0x7FF813BED9E4 (17 samples, 0.02%)</title><rect x="11.2918%" y="149" width="0.0185%" height="15" fill="rgb(249,174,33)" fg:x="10387" fg:w="17"/><text x="11.5418%" y="159.50"></text></g><g><title>`0x7FF813B76068 (14 samples, 0.02%)</title><rect x="11.3136%" y="117" width="0.0152%" height="15" fill="rgb(233,201,37)" fg:x="10407" fg:w="14"/><text x="11.5636%" y="127.50"></text></g><g><title>`0x7FF813B5ED8A (14 samples, 0.02%)</title><rect x="11.3136%" y="101" width="0.0152%" height="15" fill="rgb(221,78,26)" fg:x="10407" fg:w="14"/><text x="11.5636%" y="111.50"></text></g><g><title>`0x7FF813BED2E4 (14 samples, 0.02%)</title><rect x="11.3136%" y="85" width="0.0152%" height="15" fill="rgb(250,127,30)" fg:x="10407" fg:w="14"/><text x="11.5636%" y="95.50"></text></g><g><title>`0x7FF813B764AB (13 samples, 0.01%)</title><rect x="11.3309%" y="117" width="0.0141%" height="15" fill="rgb(230,49,44)" fg:x="10423" fg:w="13"/><text x="11.5809%" y="127.50"></text></g><g><title>`0x7FF813B5ED8A (13 samples, 0.01%)</title><rect x="11.3309%" y="101" width="0.0141%" height="15" fill="rgb(229,67,23)" fg:x="10423" fg:w="13"/><text x="11.5809%" y="111.50"></text></g><g><title>`0x7FF813BED2E4 (13 samples, 0.01%)</title><rect x="11.3309%" y="85" width="0.0141%" height="15" fill="rgb(249,83,47)" fg:x="10423" fg:w="13"/><text x="11.5809%" y="95.50"></text></g><g><title>`0x7FF813B6ED55 (199 samples, 0.22%)</title><rect x="11.3483%" y="53" width="0.2163%" height="15" fill="rgb(215,43,3)" fg:x="10439" fg:w="199"/><text x="11.5983%" y="63.50"></text></g><g><title>`0x7FF813B6EA31 (246 samples, 0.27%)</title><rect x="11.3483%" y="85" width="0.2674%" height="15" fill="rgb(238,154,13)" fg:x="10439" fg:w="246"/><text x="11.5983%" y="95.50"></text></g><g><title>`0x7FF813B6E2A9 (246 samples, 0.27%)</title><rect x="11.3483%" y="69" width="0.2674%" height="15" fill="rgb(219,56,2)" fg:x="10439" fg:w="246"/><text x="11.5983%" y="79.50"></text></g><g><title>`0x7FF813B6E3AD (248 samples, 0.27%)</title><rect x="11.3483%" y="101" width="0.2696%" height="15" fill="rgb(233,0,4)" fg:x="10439" fg:w="248"/><text x="11.5983%" y="111.50"></text></g><g><title>`0x7FF813B6E412 (102 samples, 0.11%)</title><rect x="11.6179%" y="101" width="0.1109%" height="15" fill="rgb(235,30,7)" fg:x="10687" fg:w="102"/><text x="11.8679%" y="111.50"></text></g><g><title>`0x7FF813B6F35E (100 samples, 0.11%)</title><rect x="11.6201%" y="85" width="0.1087%" height="15" fill="rgb(250,79,13)" fg:x="10689" fg:w="100"/><text x="11.8701%" y="95.50"></text></g><g><title>`0x7FF813B7095C (100 samples, 0.11%)</title><rect x="11.6201%" y="69" width="0.1087%" height="15" fill="rgb(211,146,34)" fg:x="10689" fg:w="100"/><text x="11.8701%" y="79.50"></text></g><g><title>`0x7FF813B59B1A (100 samples, 0.11%)</title><rect x="11.6201%" y="53" width="0.1087%" height="15" fill="rgb(228,22,38)" fg:x="10689" fg:w="100"/><text x="11.8701%" y="63.50"></text></g><g><title>`0x7FF813BED3A4 (100 samples, 0.11%)</title><rect x="11.6201%" y="37" width="0.1087%" height="15" fill="rgb(235,168,5)" fg:x="10689" fg:w="100"/><text x="11.8701%" y="47.50"></text></g><g><title>`0x7FF813B6E574 (25 samples, 0.03%)</title><rect x="11.7288%" y="101" width="0.0272%" height="15" fill="rgb(221,155,16)" fg:x="10789" fg:w="25"/><text x="11.9788%" y="111.50"></text></g><g><title>`0x7FF813B59B1A (25 samples, 0.03%)</title><rect x="11.7288%" y="85" width="0.0272%" height="15" fill="rgb(215,215,53)" fg:x="10789" fg:w="25"/><text x="11.9788%" y="95.50"></text></g><g><title>`0x7FF813BED3A4 (25 samples, 0.03%)</title><rect x="11.7288%" y="69" width="0.0272%" height="15" fill="rgb(223,4,10)" fg:x="10789" fg:w="25"/><text x="11.9788%" y="79.50"></text></g><g><title>`0x7FF813B765F6 (383 samples, 0.42%)</title><rect x="11.3462%" y="117" width="0.4164%" height="15" fill="rgb(234,103,6)" fg:x="10437" fg:w="383"/><text x="11.5962%" y="127.50"></text></g><g><title>`0x7FF813B75B74 (415 samples, 0.45%)</title><rect x="11.3125%" y="133" width="0.4512%" height="15" fill="rgb(227,97,0)" fg:x="10406" fg:w="415"/><text x="11.5625%" y="143.50"></text></g><g><title>`0x7FF813B544AF (417 samples, 0.45%)</title><rect x="11.3114%" y="165" width="0.4533%" height="15" fill="rgb(234,150,53)" fg:x="10405" fg:w="417"/><text x="11.5614%" y="175.50"></text></g><g><title>`0x7FF813B747B1 (417 samples, 0.45%)</title><rect x="11.3114%" y="149" width="0.4533%" height="15" fill="rgb(228,201,54)" fg:x="10405" fg:w="417"/><text x="11.5614%" y="159.50"></text></g><g><title>`0x7FF813B70F76 (440 samples, 0.48%)</title><rect x="11.3114%" y="181" width="0.4783%" height="15" fill="rgb(222,22,37)" fg:x="10405" fg:w="440"/><text x="11.5614%" y="191.50"></text></g><g><title>`0x7FF813B54515 (23 samples, 0.03%)</title><rect x="11.7647%" y="165" width="0.0250%" height="15" fill="rgb(237,53,32)" fg:x="10822" fg:w="23"/><text x="12.0147%" y="175.50"></text></g><g><title>`0x7FF813BED9E4 (23 samples, 0.03%)</title><rect x="11.7647%" y="149" width="0.0250%" height="15" fill="rgb(233,25,53)" fg:x="10822" fg:w="23"/><text x="12.0147%" y="159.50"></text></g><g><title>`0x7FF813BF71DF (991 samples, 1.08%)</title><rect x="10.7135%" y="197" width="1.0773%" height="15" fill="rgb(210,40,34)" fg:x="9855" fg:w="991"/><text x="10.9635%" y="207.50"></text></g><g><title>`0x7FF813BF7340 (29 samples, 0.03%)</title><rect x="11.7984%" y="197" width="0.0315%" height="15" fill="rgb(241,220,44)" fg:x="10853" fg:w="29"/><text x="12.0484%" y="207.50"></text></g><g><title>`0x7FF813B735A9 (10 samples, 0.01%)</title><rect x="11.8506%" y="165" width="0.0109%" height="15" fill="rgb(235,28,35)" fg:x="10901" fg:w="10"/><text x="12.1006%" y="175.50"></text></g><g><title>`0x7FF813B7358A (56 samples, 0.06%)</title><rect x="11.8397%" y="181" width="0.0609%" height="15" fill="rgb(210,56,17)" fg:x="10891" fg:w="56"/><text x="12.0897%" y="191.50"></text></g><g><title>`0x7FF813BF7351 (72 samples, 0.08%)</title><rect x="11.8321%" y="197" width="0.0783%" height="15" fill="rgb(224,130,29)" fg:x="10884" fg:w="72"/><text x="12.0821%" y="207.50"></text></g><g><title>`0x7FF813B747B1 (9,477 samples, 10.30%)</title><rect x="1.6111%" y="213" width="10.3025%" height="15" fill="rgb(235,212,8)" fg:x="1482" fg:w="9477"/><text x="1.8611%" y="223.50">`0x7FF813B747B1</text></g><g><title>`0x7FF813B747C6 (30 samples, 0.03%)</title><rect x="11.9147%" y="213" width="0.0326%" height="15" fill="rgb(223,33,50)" fg:x="10960" fg:w="30"/><text x="12.1647%" y="223.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (9,627 samples, 10.47%)</title><rect x="1.5230%" y="245" width="10.4656%" height="15" fill="rgb(219,149,13)" fg:x="1401" fg:w="9627"/><text x="1.7730%" y="255.50">hello.exe`alloc..</text></g><g><title>hello.exe`alloc::alloc::dealloc (9,627 samples, 10.47%)</title><rect x="1.5230%" y="229" width="10.4656%" height="15" fill="rgb(250,156,29)" fg:x="1401" fg:w="9627"/><text x="1.7730%" y="239.50">hello.exe`alloc..</text></g><g><title>hello.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (37 samples, 0.04%)</title><rect x="11.9484%" y="213" width="0.0402%" height="15" fill="rgb(216,193,19)" fg:x="10991" fg:w="37"/><text x="12.1984%" y="223.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::impl$0::dealloc (37 samples, 0.04%)</title><rect x="11.9484%" y="197" width="0.0402%" height="15" fill="rgb(216,135,14)" fg:x="10991" fg:w="37"/><text x="12.1984%" y="207.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::drop (9,736 samples, 10.58%)</title><rect x="1.4785%" y="357" width="10.5841%" height="15" fill="rgb(241,47,5)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="367.50">hello.exe`hashb..</text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;alloc::string::String,tuple$ (9,736 samples, 10.58%)</title><rect x="1.4785%" y="341" width="10.5841%" height="15" fill="rgb(233,42,35)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="351.50">hello.exe`core:..</text></g><g><title>hello.exe`core::ptr::drop_in_place(tuple$&lt;alloc::string::String,tuple$ (9,736 samples, 10.58%)</title><rect x="1.4785%" y="325" width="10.5841%" height="15" fill="rgb(231,13,6)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="335.50">hello.exe`core:..</text></g><g><title>hello.exe`core::ptr::drop_in_place (9,736 samples, 10.58%)</title><rect x="1.4785%" y="309" width="10.5841%" height="15" fill="rgb(207,181,40)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="319.50">hello.exe`core:..</text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::vec::Vec (9,736 samples, 10.58%)</title><rect x="1.4785%" y="293" width="10.5841%" height="15" fill="rgb(254,173,49)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="303.50">hello.exe`core:..</text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (9,736 samples, 10.58%)</title><rect x="1.4785%" y="277" width="10.5841%" height="15" fill="rgb(221,1,38)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="287.50">hello.exe`core:..</text></g><g><title>hello.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (9,736 samples, 10.58%)</title><rect x="1.4785%" y="261" width="10.5841%" height="15" fill="rgb(206,124,46)" fg:x="1360" fg:w="9736"/><text x="1.7285%" y="271.50">hello.exe`alloc..</text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (68 samples, 0.07%)</title><rect x="11.9887%" y="245" width="0.0739%" height="15" fill="rgb(249,21,11)" fg:x="11028" fg:w="68"/><text x="12.2387%" y="255.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::iter (160 samples, 0.17%)</title><rect x="12.0626%" y="357" width="0.1739%" height="15" fill="rgb(222,201,40)" fg:x="11096" fg:w="160"/><text x="12.3126%" y="367.50"></text></g><g><title>hello.exe`hashbrown::raw::RawIterRange&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::new(unsigned char*, hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$ (160 samples, 0.17%)</title><rect x="12.0626%" y="341" width="0.1739%" height="15" fill="rgb(235,61,29)" fg:x="11096" fg:w="160"/><text x="12.3126%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::load_aligned (158 samples, 0.17%)</title><rect x="12.0647%" y="325" width="0.1718%" height="15" fill="rgb(219,207,3)" fg:x="11098" fg:w="158"/><text x="12.3147%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (158 samples, 0.17%)</title><rect x="12.0647%" y="309" width="0.1718%" height="15" fill="rgb(222,56,46)" fg:x="11098" fg:w="158"/><text x="12.3147%" y="319.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (156 samples, 0.17%)</title><rect x="12.0669%" y="293" width="0.1696%" height="15" fill="rgb(239,76,54)" fg:x="11100" fg:w="156"/><text x="12.3169%" y="303.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::drop_elements (9,952 samples, 10.82%)</title><rect x="1.4785%" y="373" width="10.8189%" height="15" fill="rgb(231,124,27)" fg:x="1360" fg:w="9952"/><text x="1.7285%" y="383.50">hello.exe`hashbr..</text></g><g><title>hello.exe`hashbrown::raw::impl$28::next(hashbrown::raw::RawIter&lt;tuple$&lt;alloc::string::String,tuple$ (56 samples, 0.06%)</title><rect x="12.2365%" y="357" width="0.0609%" height="15" fill="rgb(249,195,6)" fg:x="11256" fg:w="56"/><text x="12.4865%" y="367.50"></text></g><g><title>hello.exe`hashbrown::raw::RawIterRange&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::next_impl (27 samples, 0.03%)</title><rect x="12.2680%" y="341" width="0.0294%" height="15" fill="rgb(237,174,47)" fg:x="11285" fg:w="27"/><text x="12.5180%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::load_aligned (17 samples, 0.02%)</title><rect x="12.2789%" y="325" width="0.0185%" height="15" fill="rgb(206,201,31)" fg:x="11295" fg:w="17"/><text x="12.5289%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (13 samples, 0.01%)</title><rect x="12.2833%" y="309" width="0.0141%" height="15" fill="rgb(231,57,52)" fg:x="11299" fg:w="13"/><text x="12.5333%" y="319.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="12.2833%" y="293" width="0.0141%" height="15" fill="rgb(248,177,22)" fg:x="11299" fg:w="13"/><text x="12.5333%" y="303.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$ (9,961 samples, 10.83%)</title><rect x="1.4763%" y="405" width="10.8287%" height="15" fill="rgb(215,211,37)" fg:x="1358" fg:w="9961"/><text x="1.7263%" y="415.50">hello.exe`hashbr..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::drop_inner_table (9,959 samples, 10.83%)</title><rect x="1.4785%" y="389" width="10.8265%" height="15" fill="rgb(241,128,51)" fg:x="1360" fg:w="9959"/><text x="1.7285%" y="399.50">hello.exe`hashbr..</text></g><g><title>hello.exe`core::ptr::drop_in_place(std::collections::hash::set::HashSet (10,914 samples, 11.86%)</title><rect x="0.4435%" y="469" width="11.8647%" height="15" fill="rgb(227,165,31)" fg:x="408" fg:w="10914"/><text x="0.6935%" y="479.50">hello.exe`core::pt..</text></g><g><title>hello.exe`core::ptr::drop_in_place(hashbrown::set::HashSet (10,914 samples, 11.86%)</title><rect x="0.4435%" y="453" width="11.8647%" height="15" fill="rgb(228,167,24)" fg:x="408" fg:w="10914"/><text x="0.6935%" y="463.50">hello.exe`core::pt..</text></g><g><title>hello.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;alloc::string::String,tuple$ (10,914 samples, 11.86%)</title><rect x="0.4435%" y="437" width="11.8647%" height="15" fill="rgb(228,143,12)" fg:x="408" fg:w="10914"/><text x="0.6935%" y="447.50">hello.exe`core::pt..</text></g><g><title>hello.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$ (10,914 samples, 11.86%)</title><rect x="0.4435%" y="421" width="11.8647%" height="15" fill="rgb(249,149,8)" fg:x="408" fg:w="10914"/><text x="0.6935%" y="431.50">hello.exe`core::pt..</text></g><g><title>`0x7FF813B75BB6 (23 samples, 0.03%)</title><rect x="12.3278%" y="357" width="0.0250%" height="15" fill="rgb(243,35,44)" fg:x="11340" fg:w="23"/><text x="12.5778%" y="367.50"></text></g><g><title>`0x7FF813B75BBB (220 samples, 0.24%)</title><rect x="12.3528%" y="357" width="0.2392%" height="15" fill="rgb(246,89,9)" fg:x="11363" fg:w="220"/><text x="12.6028%" y="367.50"></text></g><g><title>`0x7FF813BF6F2A (131 samples, 0.14%)</title><rect x="12.5974%" y="357" width="0.1424%" height="15" fill="rgb(233,213,13)" fg:x="11588" fg:w="131"/><text x="12.8474%" y="367.50"></text></g><g><title>`0x7FF813BF6F3B (19 samples, 0.02%)</title><rect x="12.7409%" y="357" width="0.0207%" height="15" fill="rgb(233,141,41)" fg:x="11720" fg:w="19"/><text x="12.9909%" y="367.50"></text></g><g><title>`0x7FF813BF6F3F (57 samples, 0.06%)</title><rect x="12.7616%" y="357" width="0.0620%" height="15" fill="rgb(239,167,4)" fg:x="11739" fg:w="57"/><text x="13.0116%" y="367.50"></text></g><g><title>`0x7FF813BF6F58 (17 samples, 0.02%)</title><rect x="12.8246%" y="357" width="0.0185%" height="15" fill="rgb(209,217,16)" fg:x="11797" fg:w="17"/><text x="13.0746%" y="367.50"></text></g><g><title>`0x7FF813BF6F63 (10 samples, 0.01%)</title><rect x="12.8431%" y="357" width="0.0109%" height="15" fill="rgb(219,88,35)" fg:x="11814" fg:w="10"/><text x="13.0931%" y="367.50"></text></g><g><title>`0x7FF813BF706A (33 samples, 0.04%)</title><rect x="12.8899%" y="357" width="0.0359%" height="15" fill="rgb(220,193,23)" fg:x="11857" fg:w="33"/><text x="13.1399%" y="367.50"></text></g><g><title>`0x7FF813BF71DF (15 samples, 0.02%)</title><rect x="12.9301%" y="357" width="0.0163%" height="15" fill="rgb(230,90,52)" fg:x="11894" fg:w="15"/><text x="13.1801%" y="367.50"></text></g><g><title>`0x7FF813B747B1 (581 samples, 0.63%)</title><rect x="12.3191%" y="373" width="0.6316%" height="15" fill="rgb(252,106,19)" fg:x="11332" fg:w="581"/><text x="12.5691%" y="383.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (601 samples, 0.65%)</title><rect x="12.3083%" y="405" width="0.6534%" height="15" fill="rgb(206,74,20)" fg:x="11322" fg:w="601"/><text x="12.5583%" y="415.50"></text></g><g><title>hello.exe`alloc::alloc::dealloc (601 samples, 0.65%)</title><rect x="12.3083%" y="389" width="0.6534%" height="15" fill="rgb(230,138,44)" fg:x="11322" fg:w="601"/><text x="12.5583%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;::drop (11,530 samples, 12.53%)</title><rect x="0.4435%" y="517" width="12.5344%" height="15" fill="rgb(235,182,43)" fg:x="408" fg:w="11530"/><text x="0.6935%" y="527.50">hello.exe`hashbrown..</text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (11,530 samples, 12.53%)</title><rect x="0.4435%" y="501" width="12.5344%" height="15" fill="rgb(242,16,51)" fg:x="408" fg:w="11530"/><text x="0.6935%" y="511.50">hello.exe`core::ptr..</text></g><g><title>hello.exe`core::ptr::drop_in_place(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (11,530 samples, 12.53%)</title><rect x="0.4435%" y="485" width="12.5344%" height="15" fill="rgb(248,9,4)" fg:x="408" fg:w="11530"/><text x="0.6935%" y="495.50">hello.exe`core::ptr..</text></g><g><title>hello.exe`core::ptr::drop_in_place (616 samples, 0.67%)</title><rect x="12.3083%" y="469" width="0.6697%" height="15" fill="rgb(210,31,22)" fg:x="11322" fg:w="616"/><text x="12.5583%" y="479.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::vec::Vec (616 samples, 0.67%)</title><rect x="12.3083%" y="453" width="0.6697%" height="15" fill="rgb(239,54,39)" fg:x="11322" fg:w="616"/><text x="12.5583%" y="463.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (616 samples, 0.67%)</title><rect x="12.3083%" y="437" width="0.6697%" height="15" fill="rgb(230,99,41)" fg:x="11322" fg:w="616"/><text x="12.5583%" y="447.50"></text></g><g><title>hello.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (616 samples, 0.67%)</title><rect x="12.3083%" y="421" width="0.6697%" height="15" fill="rgb(253,106,12)" fg:x="11322" fg:w="616"/><text x="12.5583%" y="431.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (15 samples, 0.02%)</title><rect x="12.9616%" y="405" width="0.0163%" height="15" fill="rgb(213,46,41)" fg:x="11923" fg:w="15"/><text x="13.2116%" y="415.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place (11,533 samples, 12.54%)</title><rect x="0.4425%" y="581" width="12.5376%" height="15" fill="rgb(215,133,35)" fg:x="407" fg:w="11533"/><text x="0.6925%" y="591.50">hello.exe`core::ptr..</text></g><g><title>hello.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (11,532 samples, 12.54%)</title><rect x="0.4435%" y="565" width="12.5366%" height="15" fill="rgb(213,28,5)" fg:x="408" fg:w="11532"/><text x="0.6935%" y="575.50">hello.exe`hashbrown..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::drop_inner_table (11,532 samples, 12.54%)</title><rect x="0.4435%" y="549" width="12.5366%" height="15" fill="rgb(215,77,49)" fg:x="408" fg:w="11532"/><text x="0.6935%" y="559.50">hello.exe`hashbrown..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::drop_elements (11,532 samples, 12.54%)</title><rect x="0.4435%" y="533" width="12.5366%" height="15" fill="rgb(248,100,22)" fg:x="408" fg:w="11532"/><text x="0.6935%" y="543.50">hello.exe`hashbrown..</text></g><g><title>hello.exe`std::sys::pal::windows::stdio::is_console (19 samples, 0.02%)</title><rect x="12.9866%" y="309" width="0.0207%" height="15" fill="rgb(208,67,9)" fg:x="11946" fg:w="19"/><text x="13.2366%" y="319.50"></text></g><g><title>`0x7FF8115516B0 (19 samples, 0.02%)</title><rect x="12.9866%" y="293" width="0.0207%" height="15" fill="rgb(219,133,21)" fg:x="11946" fg:w="19"/><text x="13.2366%" y="303.50"></text></g><g><title>`0x7FF813BED0C4 (19 samples, 0.02%)</title><rect x="12.9866%" y="277" width="0.0207%" height="15" fill="rgb(246,46,29)" fg:x="11946" fg:w="19"/><text x="13.2366%" y="287.50"></text></g><g><title>hello.exe`core::slice::iter::impl$181::next(core::slice::iter::Iter&lt;tuple$ (37 samples, 0.04%)</title><rect x="12.9801%" y="581" width="0.0402%" height="15" fill="rgb(246,185,52)" fg:x="11940" fg:w="37"/><text x="13.2301%" y="591.50"></text></g><g><title>hello.exe`core::slice::iter::Iter&lt;tuple$&lt;alloc::string::String,f64&gt; &gt;::post_inc_start (37 samples, 0.04%)</title><rect x="12.9801%" y="565" width="0.0402%" height="15" fill="rgb(252,136,11)" fg:x="11940" fg:w="37"/><text x="13.2301%" y="575.50"></text></g><g><title>hello.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;alloc::string::String,f64&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (37 samples, 0.04%)</title><rect x="12.9801%" y="549" width="0.0402%" height="15" fill="rgb(219,138,53)" fg:x="11940" fg:w="37"/><text x="13.2301%" y="559.50"></text></g><g><title>hello.exe`std::io::stdio::_print (37 samples, 0.04%)</title><rect x="12.9801%" y="533" width="0.0402%" height="15" fill="rgb(211,51,23)" fg:x="11940" fg:w="37"/><text x="13.2301%" y="543.50"></text></g><g><title>hello.exe`std::io::stdio::print_to (37 samples, 0.04%)</title><rect x="12.9801%" y="517" width="0.0402%" height="15" fill="rgb(247,221,28)" fg:x="11940" fg:w="37"/><text x="13.2301%" y="527.50"></text></g><g><title>hello.exe`std::io::stdio::impl$13::write_fmt (37 samples, 0.04%)</title><rect x="12.9801%" y="501" width="0.0402%" height="15" fill="rgb(251,222,45)" fg:x="11940" fg:w="37"/><text x="13.2301%" y="511.50"></text></g><g><title>hello.exe`std::io::Write::write_fmt (36 samples, 0.04%)</title><rect x="12.9812%" y="485" width="0.0391%" height="15" fill="rgb(217,162,53)" fg:x="11941" fg:w="36"/><text x="13.2312%" y="495.50"></text></g><g><title>hello.exe`core::fmt::write (36 samples, 0.04%)</title><rect x="12.9812%" y="469" width="0.0391%" height="15" fill="rgb(229,93,14)" fg:x="11941" fg:w="36"/><text x="13.2312%" y="479.50"></text></g><g><title>hello.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (33 samples, 0.04%)</title><rect x="12.9844%" y="453" width="0.0359%" height="15" fill="rgb(209,67,49)" fg:x="11944" fg:w="33"/><text x="13.2344%" y="463.50"></text></g><g><title>hello.exe`std::io::stdio::impl$14::write_all (33 samples, 0.04%)</title><rect x="12.9844%" y="437" width="0.0359%" height="15" fill="rgb(213,87,29)" fg:x="11944" fg:w="33"/><text x="13.2344%" y="447.50"></text></g><g><title>hello.exe`std::sync::remutex::impl$6::deref (32 samples, 0.03%)</title><rect x="12.9855%" y="421" width="0.0348%" height="15" fill="rgb(205,151,52)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="431.50"></text></g><g><title>hello.exe`std::io::buffered::linewritershim::impl$1::write_all (32 samples, 0.03%)</title><rect x="12.9855%" y="405" width="0.0348%" height="15" fill="rgb(253,215,39)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="415.50"></text></g><g><title>hello.exe`core::result::impl$26::branch (32 samples, 0.03%)</title><rect x="12.9855%" y="389" width="0.0348%" height="15" fill="rgb(221,220,41)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="399.50"></text></g><g><title>hello.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (32 samples, 0.03%)</title><rect x="12.9855%" y="373" width="0.0348%" height="15" fill="rgb(218,133,21)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="383.50"></text></g><g><title>hello.exe`std::io::stdio::impl$1::write (32 samples, 0.03%)</title><rect x="12.9855%" y="357" width="0.0348%" height="15" fill="rgb(221,193,43)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="367.50"></text></g><g><title>hello.exe`std::io::stdio::handle_ebadf (32 samples, 0.03%)</title><rect x="12.9855%" y="341" width="0.0348%" height="15" fill="rgb(240,128,52)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="351.50"></text></g><g><title>hello.exe`std::sys::pal::windows::stdio::write (32 samples, 0.03%)</title><rect x="12.9855%" y="325" width="0.0348%" height="15" fill="rgb(253,114,12)" fg:x="11945" fg:w="32"/><text x="13.2355%" y="335.50"></text></g><g><title>hello.exe`std::sys::pal::windows::stdio::write_valid_utf8_to_console (12 samples, 0.01%)</title><rect x="13.0073%" y="309" width="0.0130%" height="15" fill="rgb(215,223,47)" fg:x="11965" fg:w="12"/><text x="13.2573%" y="319.50"></text></g><g><title>hello.exe`std::sys::pal::windows::stdio::write_u16s (12 samples, 0.01%)</title><rect x="13.0073%" y="293" width="0.0130%" height="15" fill="rgb(248,225,23)" fg:x="11965" fg:w="12"/><text x="13.2573%" y="303.50"></text></g><g><title>hello.exe`std::sys::pal::windows::cvt (12 samples, 0.01%)</title><rect x="13.0073%" y="277" width="0.0130%" height="15" fill="rgb(250,108,0)" fg:x="11965" fg:w="12"/><text x="13.2573%" y="287.50"></text></g><g><title>hello.exe`std::sys::pal::windows::impl$3::is_zero (12 samples, 0.01%)</title><rect x="13.0073%" y="261" width="0.0130%" height="15" fill="rgb(228,208,7)" fg:x="11965" fg:w="12"/><text x="13.2573%" y="271.50"></text></g><g><title>`0x7FF81154281A (12 samples, 0.01%)</title><rect x="13.0073%" y="245" width="0.0130%" height="15" fill="rgb(244,45,10)" fg:x="11965" fg:w="12"/><text x="13.2573%" y="255.50"></text></g><g><title>`0x7FF811542941 (11 samples, 0.01%)</title><rect x="13.0084%" y="229" width="0.0120%" height="15" fill="rgb(207,125,25)" fg:x="11966" fg:w="11"/><text x="13.2584%" y="239.50"></text></g><g><title>`0x7FF813BED0C4 (11 samples, 0.01%)</title><rect x="13.0084%" y="213" width="0.0120%" height="15" fill="rgb(210,195,18)" fg:x="11966" fg:w="11"/><text x="13.2584%" y="223.50"></text></g><g><title>`0x7FF813B7B7A2 (20 samples, 0.02%)</title><rect x="13.5247%" y="325" width="0.0217%" height="15" fill="rgb(249,80,12)" fg:x="12441" fg:w="20"/><text x="13.7747%" y="335.50"></text></g><g><title>`0x7FF813B7B86B (24 samples, 0.03%)</title><rect x="13.5530%" y="325" width="0.0261%" height="15" fill="rgb(221,65,9)" fg:x="12467" fg:w="24"/><text x="13.8030%" y="335.50"></text></g><g><title>`0x7FF813B7B8A4 (35 samples, 0.04%)</title><rect x="13.5921%" y="325" width="0.0380%" height="15" fill="rgb(235,49,36)" fg:x="12503" fg:w="35"/><text x="13.8421%" y="335.50"></text></g><g><title>`0x7FF813B6F44F (17 samples, 0.02%)</title><rect x="13.6389%" y="293" width="0.0185%" height="15" fill="rgb(225,32,20)" fg:x="12546" fg:w="17"/><text x="13.8889%" y="303.50"></text></g><g><title>`0x7FF813B7B44D (17 samples, 0.02%)</title><rect x="13.6389%" y="277" width="0.0185%" height="15" fill="rgb(215,141,46)" fg:x="12546" fg:w="17"/><text x="13.8889%" y="287.50"></text></g><g><title>`0x7FF813B7BEDA (20 samples, 0.02%)</title><rect x="13.6389%" y="325" width="0.0217%" height="15" fill="rgb(250,160,47)" fg:x="12546" fg:w="20"/><text x="13.8889%" y="335.50"></text></g><g><title>`0x7FF813B70B31 (20 samples, 0.02%)</title><rect x="13.6389%" y="309" width="0.0217%" height="15" fill="rgb(216,222,40)" fg:x="12546" fg:w="20"/><text x="13.8889%" y="319.50"></text></g><g><title>`0x7FF813B5A16F (18 samples, 0.02%)</title><rect x="13.6628%" y="309" width="0.0196%" height="15" fill="rgb(234,217,39)" fg:x="12568" fg:w="18"/><text x="13.9128%" y="319.50"></text></g><g><title>`0x7FF813B7B3C7 (179 samples, 0.19%)</title><rect x="13.4965%" y="341" width="0.1946%" height="15" fill="rgb(207,178,40)" fg:x="12415" fg:w="179"/><text x="13.7465%" y="351.50"></text></g><g><title>`0x7FF813B7BF5E (28 samples, 0.03%)</title><rect x="13.6606%" y="325" width="0.0304%" height="15" fill="rgb(221,136,13)" fg:x="12566" fg:w="28"/><text x="13.9106%" y="335.50"></text></g><g><title>`0x7FF813B7B458 (13 samples, 0.01%)</title><rect x="13.6911%" y="341" width="0.0141%" height="15" fill="rgb(249,199,10)" fg:x="12594" fg:w="13"/><text x="13.9411%" y="351.50"></text></g><g><title>`0x7FF813B7B629 (12 samples, 0.01%)</title><rect x="13.7085%" y="341" width="0.0130%" height="15" fill="rgb(249,222,13)" fg:x="12610" fg:w="12"/><text x="13.9585%" y="351.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::allocate (238 samples, 0.26%)</title><rect x="13.4693%" y="389" width="0.2587%" height="15" fill="rgb(244,185,38)" fg:x="12390" fg:w="238"/><text x="13.7193%" y="399.50"></text></g><g><title>hello.exe`alloc::alloc::Global::alloc_impl (238 samples, 0.26%)</title><rect x="13.4693%" y="373" width="0.2587%" height="15" fill="rgb(236,202,9)" fg:x="12390" fg:w="238"/><text x="13.7193%" y="383.50"></text></g><g><title>hello.exe`alloc::alloc::alloc (238 samples, 0.26%)</title><rect x="13.4693%" y="357" width="0.2587%" height="15" fill="rgb(250,229,37)" fg:x="12390" fg:w="238"/><text x="13.7193%" y="367.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (23 samples, 0.03%)</title><rect x="13.7748%" y="181" width="0.0250%" height="15" fill="rgb(206,174,23)" fg:x="12671" fg:w="23"/><text x="14.0248%" y="191.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (37 samples, 0.04%)</title><rect x="13.7672%" y="197" width="0.0402%" height="15" fill="rgb(211,33,43)" fg:x="12664" fg:w="37"/><text x="14.0172%" y="207.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (58 samples, 0.06%)</title><rect x="13.7476%" y="325" width="0.0631%" height="15" fill="rgb(245,58,50)" fg:x="12646" fg:w="58"/><text x="13.9976%" y="335.50"></text></g><g><title>hello.exe`alloc::string::impl$23::hash (56 samples, 0.06%)</title><rect x="13.7498%" y="309" width="0.0609%" height="15" fill="rgb(244,68,36)" fg:x="12648" fg:w="56"/><text x="13.9998%" y="319.50"></text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (56 samples, 0.06%)</title><rect x="13.7498%" y="293" width="0.0609%" height="15" fill="rgb(232,229,15)" fg:x="12648" fg:w="56"/><text x="13.9998%" y="303.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (56 samples, 0.06%)</title><rect x="13.7498%" y="277" width="0.0609%" height="15" fill="rgb(254,30,23)" fg:x="12648" fg:w="56"/><text x="13.9998%" y="287.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (56 samples, 0.06%)</title><rect x="13.7498%" y="261" width="0.0609%" height="15" fill="rgb(235,160,14)" fg:x="12648" fg:w="56"/><text x="13.9998%" y="271.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (56 samples, 0.06%)</title><rect x="13.7498%" y="245" width="0.0609%" height="15" fill="rgb(212,155,44)" fg:x="12648" fg:w="56"/><text x="13.9998%" y="255.50"></text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (56 samples, 0.06%)</title><rect x="13.7498%" y="229" width="0.0609%" height="15" fill="rgb(226,2,50)" fg:x="12648" fg:w="56"/><text x="13.9998%" y="239.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (52 samples, 0.06%)</title><rect x="13.7541%" y="213" width="0.0565%" height="15" fill="rgb(234,177,6)" fg:x="12652" fg:w="52"/><text x="14.0041%" y="223.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (11 samples, 0.01%)</title><rect x="13.8422%" y="277" width="0.0120%" height="15" fill="rgb(217,24,9)" fg:x="12733" fg:w="11"/><text x="14.0922%" y="287.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (129 samples, 0.14%)</title><rect x="13.7400%" y="357" width="0.1402%" height="15" fill="rgb(220,13,46)" fg:x="12639" fg:w="129"/><text x="13.9900%" y="367.50"></text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (125 samples, 0.14%)</title><rect x="13.7443%" y="341" width="0.1359%" height="15" fill="rgb(239,221,27)" fg:x="12643" fg:w="125"/><text x="13.9943%" y="351.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::finish (56 samples, 0.06%)</title><rect x="13.8193%" y="325" width="0.0609%" height="15" fill="rgb(222,198,25)" fg:x="12712" fg:w="56"/><text x="14.0693%" y="335.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (56 samples, 0.06%)</title><rect x="13.8193%" y="309" width="0.0609%" height="15" fill="rgb(211,99,13)" fg:x="12712" fg:w="56"/><text x="14.0693%" y="319.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (56 samples, 0.06%)</title><rect x="13.8193%" y="293" width="0.0609%" height="15" fill="rgb(232,111,31)" fg:x="12712" fg:w="56"/><text x="14.0693%" y="303.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (24 samples, 0.03%)</title><rect x="13.8541%" y="277" width="0.0261%" height="15" fill="rgb(245,82,37)" fg:x="12744" fg:w="24"/><text x="14.1041%" y="287.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (20 samples, 0.02%)</title><rect x="13.8585%" y="261" width="0.0217%" height="15" fill="rgb(227,149,46)" fg:x="12748" fg:w="20"/><text x="14.1085%" y="271.50"></text></g><g><title>`0x7FF813B7B721 (12 samples, 0.01%)</title><rect x="13.9607%" y="181" width="0.0130%" height="15" fill="rgb(218,36,50)" fg:x="12842" fg:w="12"/><text x="14.2107%" y="191.50"></text></g><g><title>`0x7FF813B7B86B (26 samples, 0.03%)</title><rect x="14.0128%" y="181" width="0.0283%" height="15" fill="rgb(226,80,48)" fg:x="12890" fg:w="26"/><text x="14.2628%" y="191.50"></text></g><g><title>`0x7FF813B7B8A4 (114 samples, 0.12%)</title><rect x="14.0487%" y="181" width="0.1239%" height="15" fill="rgb(238,224,15)" fg:x="12923" fg:w="114"/><text x="14.2987%" y="191.50"></text></g><g><title>`0x7FF813B5A16F (41 samples, 0.04%)</title><rect x="14.1966%" y="165" width="0.0446%" height="15" fill="rgb(241,136,10)" fg:x="13059" fg:w="41"/><text x="14.4466%" y="175.50"></text></g><g><title>`0x7FF813B7B3C7 (292 samples, 0.32%)</title><rect x="13.9422%" y="197" width="0.3174%" height="15" fill="rgb(208,32,45)" fg:x="12825" fg:w="292"/><text x="14.1922%" y="207.50"></text></g><g><title>`0x7FF813B7BF5E (61 samples, 0.07%)</title><rect x="14.1933%" y="181" width="0.0663%" height="15" fill="rgb(207,135,9)" fg:x="13056" fg:w="61"/><text x="14.4433%" y="191.50"></text></g><g><title>`0x7FF813B5A176 (17 samples, 0.02%)</title><rect x="14.2411%" y="165" width="0.0185%" height="15" fill="rgb(206,86,44)" fg:x="13100" fg:w="17"/><text x="14.4911%" y="175.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::prepare_resize (350 samples, 0.38%)</title><rect x="13.8933%" y="309" width="0.3805%" height="15" fill="rgb(245,177,15)" fg:x="12780" fg:w="350"/><text x="14.1433%" y="319.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (350 samples, 0.38%)</title><rect x="13.8933%" y="293" width="0.3805%" height="15" fill="rgb(206,64,50)" fg:x="12780" fg:w="350"/><text x="14.1433%" y="303.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::new_uninitialized (343 samples, 0.37%)</title><rect x="13.9009%" y="277" width="0.3729%" height="15" fill="rgb(234,36,40)" fg:x="12787" fg:w="343"/><text x="14.1509%" y="287.50"></text></g><g><title>hello.exe`hashbrown::raw::alloc::inner::do_alloc (334 samples, 0.36%)</title><rect x="13.9107%" y="261" width="0.3631%" height="15" fill="rgb(213,64,8)" fg:x="12796" fg:w="334"/><text x="14.1607%" y="271.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::allocate (334 samples, 0.36%)</title><rect x="13.9107%" y="245" width="0.3631%" height="15" fill="rgb(210,75,36)" fg:x="12796" fg:w="334"/><text x="14.1607%" y="255.50"></text></g><g><title>hello.exe`alloc::alloc::Global::alloc_impl (334 samples, 0.36%)</title><rect x="13.9107%" y="229" width="0.3631%" height="15" fill="rgb(229,88,21)" fg:x="12796" fg:w="334"/><text x="14.1607%" y="239.50"></text></g><g><title>hello.exe`alloc::alloc::alloc (331 samples, 0.36%)</title><rect x="13.9139%" y="213" width="0.3598%" height="15" fill="rgb(252,204,47)" fg:x="12799" fg:w="331"/><text x="14.1639%" y="223.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (356 samples, 0.39%)</title><rect x="13.8878%" y="325" width="0.3870%" height="15" fill="rgb(208,77,27)" fg:x="12775" fg:w="356"/><text x="14.1378%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (365 samples, 0.40%)</title><rect x="13.8802%" y="357" width="0.3968%" height="15" fill="rgb(221,76,26)" fg:x="12768" fg:w="365"/><text x="14.1302%" y="367.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (361 samples, 0.39%)</title><rect x="13.8846%" y="341" width="0.3924%" height="15" fill="rgb(225,139,18)" fg:x="12772" fg:w="361"/><text x="14.1346%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (17 samples, 0.02%)</title><rect x="14.2890%" y="341" width="0.0185%" height="15" fill="rgb(230,137,11)" fg:x="13144" fg:w="17"/><text x="14.5390%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::is_bucket_full (16 samples, 0.02%)</title><rect x="14.2901%" y="325" width="0.0174%" height="15" fill="rgb(212,28,1)" fg:x="13145" fg:w="16"/><text x="14.5401%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,tuple$&lt;&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (609 samples, 0.66%)</title><rect x="13.7378%" y="373" width="0.6621%" height="15" fill="rgb(248,164,17)" fg:x="12637" fg:w="609"/><text x="13.9878%" y="383.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (113 samples, 0.12%)</title><rect x="14.2770%" y="357" width="0.1228%" height="15" fill="rgb(222,171,42)" fg:x="13133" fg:w="113"/><text x="14.5270%" y="367.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_byte (80 samples, 0.09%)</title><rect x="14.3129%" y="341" width="0.0870%" height="15" fill="rgb(243,84,45)" fg:x="13166" fg:w="80"/><text x="14.5629%" y="351.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (80 samples, 0.09%)</title><rect x="14.3129%" y="325" width="0.0870%" height="15" fill="rgb(252,49,23)" fg:x="13166" fg:w="80"/><text x="14.5629%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::write(tuple$&lt;alloc::string::String,tuple$ (12 samples, 0.01%)</title><rect x="14.3999%" y="357" width="0.0130%" height="15" fill="rgb(215,19,7)" fg:x="13246" fg:w="12"/><text x="14.6499%" y="367.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::write(tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;*, tuple$&lt;alloc::string::String,tuple$ (12 samples, 0.01%)</title><rect x="14.3999%" y="341" width="0.0130%" height="15" fill="rgb(238,81,41)" fg:x="13246" fg:w="12"/><text x="14.6499%" y="351.50"></text></g><g><title>hello.exe`core::ptr::write(tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;*, tuple$&lt;alloc::string::String,tuple$ (12 samples, 0.01%)</title><rect x="14.3999%" y="325" width="0.0130%" height="15" fill="rgb(210,199,37)" fg:x="13246" fg:w="12"/><text x="14.6499%" y="335.50"></text></g><g><title>hello.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (877 samples, 0.95%)</title><rect x="13.4682%" y="501" width="0.9534%" height="15" fill="rgb(244,192,49)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="511.50"></text></g><g><title>hello.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (877 samples, 0.95%)</title><rect x="13.4682%" y="485" width="0.9534%" height="15" fill="rgb(226,211,11)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="495.50"></text></g><g><title>hello.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (877 samples, 0.95%)</title><rect x="13.4682%" y="469" width="0.9534%" height="15" fill="rgb(236,162,54)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="479.50"></text></g><g><title>hello.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (877 samples, 0.95%)</title><rect x="13.4682%" y="453" width="0.9534%" height="15" fill="rgb(220,229,9)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="463.50"></text></g><g><title>hello.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (877 samples, 0.95%)</title><rect x="13.4682%" y="437" width="0.9534%" height="15" fill="rgb(250,87,22)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="447.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (877 samples, 0.95%)</title><rect x="13.4682%" y="421" width="0.9534%" height="15" fill="rgb(239,43,17)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="431.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::allocate_in (877 samples, 0.95%)</title><rect x="13.4682%" y="405" width="0.9534%" height="15" fill="rgb(231,177,25)" fg:x="12389" fg:w="877"/><text x="13.7182%" y="415.50"></text></g><g><title>hello.exe`hashbrown::map::HashMap&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(alloc::string::String, tuple$ (638 samples, 0.69%)</title><rect x="13.7280%" y="389" width="0.6936%" height="15" fill="rgb(219,179,1)" fg:x="12628" fg:w="638"/><text x="13.9780%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$&lt;alloc::string::String,tuple$ (20 samples, 0.02%)</title><rect x="14.3999%" y="373" width="0.0217%" height="15" fill="rgb(238,219,53)" fg:x="13246" fg:w="20"/><text x="14.6499%" y="383.50"></text></g><g><title>hello.exe`alloc::string::impl$47::to_string(ref$ (898 samples, 0.98%)</title><rect x="13.4476%" y="565" width="0.9762%" height="15" fill="rgb(232,167,36)" fg:x="12370" fg:w="898"/><text x="13.6976%" y="575.50"></text></g><g><title>hello.exe`alloc::string::impl$54::from(ref$ (898 samples, 0.98%)</title><rect x="13.4476%" y="549" width="0.9762%" height="15" fill="rgb(244,19,51)" fg:x="12370" fg:w="898"/><text x="13.6976%" y="559.50"></text></g><g><title>hello.exe`alloc::str::impl$4::to_owned(ref$ (898 samples, 0.98%)</title><rect x="13.4476%" y="533" width="0.9762%" height="15" fill="rgb(224,6,22)" fg:x="12370" fg:w="898"/><text x="13.6976%" y="543.50"></text></g><g><title>hello.exe`alloc::slice::impl$9::to_owned(ref$&lt;slice2$ (898 samples, 0.98%)</title><rect x="13.4476%" y="517" width="0.9762%" height="15" fill="rgb(224,145,5)" fg:x="12370" fg:w="898"/><text x="13.6976%" y="527.50"></text></g><g><title>`0x7FF807A61310 (12 samples, 0.01%)</title><rect x="14.6684%" y="549" width="0.0130%" height="15" fill="rgb(234,130,49)" fg:x="13493" fg:w="12"/><text x="14.9184%" y="559.50"></text></g><g><title>`0x7FF807A61382 (48 samples, 0.05%)</title><rect x="14.6999%" y="549" width="0.0522%" height="15" fill="rgb(254,6,2)" fg:x="13522" fg:w="48"/><text x="14.9499%" y="559.50"></text></g><g><title>`0x7FF807A6143A (170 samples, 0.18%)</title><rect x="14.7825%" y="549" width="0.1848%" height="15" fill="rgb(208,96,46)" fg:x="13598" fg:w="170"/><text x="15.0325%" y="559.50"></text></g><g><title>`0x7FF807A61441 (109 samples, 0.12%)</title><rect x="14.9673%" y="549" width="0.1185%" height="15" fill="rgb(239,3,39)" fg:x="13768" fg:w="109"/><text x="15.2173%" y="559.50"></text></g><g><title>`0x7FF807A6144C (33 samples, 0.04%)</title><rect x="15.0956%" y="549" width="0.0359%" height="15" fill="rgb(233,210,1)" fg:x="13886" fg:w="33"/><text x="15.3456%" y="559.50"></text></g><g><title>`0x7FF807A61490 (77 samples, 0.08%)</title><rect x="15.1347%" y="549" width="0.0837%" height="15" fill="rgb(244,137,37)" fg:x="13922" fg:w="77"/><text x="15.3847%" y="559.50"></text></g><g><title>`0x7FF813B7A9AA (36 samples, 0.04%)</title><rect x="15.4261%" y="389" width="0.0391%" height="15" fill="rgb(240,136,2)" fg:x="14190" fg:w="36"/><text x="15.6761%" y="399.50"></text></g><g><title>`0x7FF813B7A9B2 (23 samples, 0.03%)</title><rect x="15.4761%" y="389" width="0.0250%" height="15" fill="rgb(239,18,37)" fg:x="14236" fg:w="23"/><text x="15.7261%" y="399.50"></text></g><g><title>`0x7FF813B7A9C7 (46 samples, 0.05%)</title><rect x="15.5174%" y="389" width="0.0500%" height="15" fill="rgb(218,185,22)" fg:x="14274" fg:w="46"/><text x="15.7674%" y="399.50"></text></g><g><title>`0x7FF813B7A9D2 (21 samples, 0.02%)</title><rect x="15.5815%" y="389" width="0.0228%" height="15" fill="rgb(225,218,4)" fg:x="14333" fg:w="21"/><text x="15.8315%" y="399.50"></text></g><g><title>`0x7FF813B7A9E3 (53 samples, 0.06%)</title><rect x="15.6131%" y="389" width="0.0576%" height="15" fill="rgb(230,182,32)" fg:x="14362" fg:w="53"/><text x="15.8631%" y="399.50"></text></g><g><title>`0x7FF813B7AA20 (10 samples, 0.01%)</title><rect x="15.6827%" y="389" width="0.0109%" height="15" fill="rgb(242,56,43)" fg:x="14426" fg:w="10"/><text x="15.9327%" y="399.50"></text></g><g><title>`0x7FF813B7AA2D (62 samples, 0.07%)</title><rect x="15.7066%" y="389" width="0.0674%" height="15" fill="rgb(233,99,24)" fg:x="14448" fg:w="62"/><text x="15.9566%" y="399.50"></text></g><g><title>`0x7FF813B7AA34 (21 samples, 0.02%)</title><rect x="15.7924%" y="389" width="0.0228%" height="15" fill="rgb(234,209,42)" fg:x="14527" fg:w="21"/><text x="16.0424%" y="399.50"></text></g><g><title>`0x7FF813B7AA42 (38 samples, 0.04%)</title><rect x="15.8240%" y="389" width="0.0413%" height="15" fill="rgb(227,7,12)" fg:x="14556" fg:w="38"/><text x="16.0740%" y="399.50"></text></g><g><title>`0x7FF813B7AA53 (16 samples, 0.02%)</title><rect x="15.8783%" y="389" width="0.0174%" height="15" fill="rgb(245,203,43)" fg:x="14606" fg:w="16"/><text x="16.1283%" y="399.50"></text></g><g><title>`0x7FF813B7B26E (57 samples, 0.06%)</title><rect x="15.9142%" y="389" width="0.0620%" height="15" fill="rgb(238,205,33)" fg:x="14639" fg:w="57"/><text x="16.1642%" y="399.50"></text></g><g><title>`0x7FF813B7B283 (21 samples, 0.02%)</title><rect x="15.9914%" y="389" width="0.0228%" height="15" fill="rgb(231,56,7)" fg:x="14710" fg:w="21"/><text x="16.2414%" y="399.50"></text></g><g><title>`0x7FF813B7B2A6 (38 samples, 0.04%)</title><rect x="16.0240%" y="389" width="0.0413%" height="15" fill="rgb(244,186,29)" fg:x="14740" fg:w="38"/><text x="16.2740%" y="399.50"></text></g><g><title>`0x7FF813B7B2AF (11 samples, 0.01%)</title><rect x="16.0707%" y="389" width="0.0120%" height="15" fill="rgb(234,111,31)" fg:x="14783" fg:w="11"/><text x="16.3207%" y="399.50"></text></g><g><title>`0x7FF813B7B2B5 (18 samples, 0.02%)</title><rect x="16.0860%" y="389" width="0.0196%" height="15" fill="rgb(241,149,10)" fg:x="14797" fg:w="18"/><text x="16.3360%" y="399.50"></text></g><g><title>`0x7FF813B7B2FF (20 samples, 0.02%)</title><rect x="16.1164%" y="389" width="0.0217%" height="15" fill="rgb(249,206,44)" fg:x="14825" fg:w="20"/><text x="16.3664%" y="399.50"></text></g><g><title>`0x7FF813B7B304 (42 samples, 0.05%)</title><rect x="16.1381%" y="389" width="0.0457%" height="15" fill="rgb(251,153,30)" fg:x="14845" fg:w="42"/><text x="16.3881%" y="399.50"></text></g><g><title>`0x7FF813B7B307 (10 samples, 0.01%)</title><rect x="16.1838%" y="389" width="0.0109%" height="15" fill="rgb(239,152,38)" fg:x="14887" fg:w="10"/><text x="16.4338%" y="399.50"></text></g><g><title>`0x7FF813B7B35E (14 samples, 0.02%)</title><rect x="16.2099%" y="389" width="0.0152%" height="15" fill="rgb(249,139,47)" fg:x="14911" fg:w="14"/><text x="16.4599%" y="399.50"></text></g><g><title>`0x7FF813B7B36D (45 samples, 0.05%)</title><rect x="16.2338%" y="389" width="0.0489%" height="15" fill="rgb(244,64,35)" fg:x="14933" fg:w="45"/><text x="16.4838%" y="399.50"></text></g><g><title>`0x7FF813B7B371 (11 samples, 0.01%)</title><rect x="16.2827%" y="389" width="0.0120%" height="15" fill="rgb(216,46,15)" fg:x="14978" fg:w="11"/><text x="16.5327%" y="399.50"></text></g><g><title>`0x7FF813B7B385 (46 samples, 0.05%)</title><rect x="16.3001%" y="389" width="0.0500%" height="15" fill="rgb(250,74,19)" fg:x="14994" fg:w="46"/><text x="16.5501%" y="399.50"></text></g><g><title>`0x7FF813B7B387 (17 samples, 0.02%)</title><rect x="16.3501%" y="389" width="0.0185%" height="15" fill="rgb(249,42,33)" fg:x="15040" fg:w="17"/><text x="16.6001%" y="399.50"></text></g><g><title>`0x7FF813B7B394 (57 samples, 0.06%)</title><rect x="16.3741%" y="389" width="0.0620%" height="15" fill="rgb(242,149,17)" fg:x="15062" fg:w="57"/><text x="16.6241%" y="399.50"></text></g><g><title>`0x7FF813B7B39E (11 samples, 0.01%)</title><rect x="16.4393%" y="389" width="0.0120%" height="15" fill="rgb(244,29,21)" fg:x="15122" fg:w="11"/><text x="16.6893%" y="399.50"></text></g><g><title>`0x7FF813B7B3AA (16 samples, 0.02%)</title><rect x="16.4578%" y="389" width="0.0174%" height="15" fill="rgb(220,130,37)" fg:x="15139" fg:w="16"/><text x="16.7078%" y="399.50"></text></g><g><title>`0x7FF813B7B3BE (44 samples, 0.05%)</title><rect x="16.4849%" y="389" width="0.0478%" height="15" fill="rgb(211,67,2)" fg:x="15164" fg:w="44"/><text x="16.7349%" y="399.50"></text></g><g><title>`0x7FF813B7B650 (14 samples, 0.02%)</title><rect x="16.6241%" y="373" width="0.0152%" height="15" fill="rgb(235,68,52)" fg:x="15292" fg:w="14"/><text x="16.8741%" y="383.50"></text></g><g><title>`0x7FF813B7B655 (32 samples, 0.03%)</title><rect x="16.6393%" y="373" width="0.0348%" height="15" fill="rgb(246,142,3)" fg:x="15306" fg:w="32"/><text x="16.8893%" y="383.50"></text></g><g><title>`0x7FF813B7B661 (49 samples, 0.05%)</title><rect x="16.6817%" y="373" width="0.0533%" height="15" fill="rgb(241,25,7)" fg:x="15345" fg:w="49"/><text x="16.9317%" y="383.50"></text></g><g><title>`0x7FF813B7B663 (20 samples, 0.02%)</title><rect x="16.7426%" y="373" width="0.0217%" height="15" fill="rgb(242,119,39)" fg:x="15401" fg:w="20"/><text x="16.9926%" y="383.50"></text></g><g><title>`0x7FF813B7B667 (21 samples, 0.02%)</title><rect x="16.7698%" y="373" width="0.0228%" height="15" fill="rgb(241,98,45)" fg:x="15426" fg:w="21"/><text x="17.0198%" y="383.50"></text></g><g><title>`0x7FF813B7B66B (13 samples, 0.01%)</title><rect x="16.7948%" y="373" width="0.0141%" height="15" fill="rgb(254,28,30)" fg:x="15449" fg:w="13"/><text x="17.0448%" y="383.50"></text></g><g><title>`0x7FF813B7B66F (49 samples, 0.05%)</title><rect x="16.8089%" y="373" width="0.0533%" height="15" fill="rgb(241,142,54)" fg:x="15462" fg:w="49"/><text x="17.0589%" y="383.50"></text></g><g><title>`0x7FF813B7B685 (16 samples, 0.02%)</title><rect x="16.8752%" y="373" width="0.0174%" height="15" fill="rgb(222,85,15)" fg:x="15523" fg:w="16"/><text x="17.1252%" y="383.50"></text></g><g><title>`0x7FF813B7B69A (45 samples, 0.05%)</title><rect x="16.9067%" y="373" width="0.0489%" height="15" fill="rgb(210,85,47)" fg:x="15552" fg:w="45"/><text x="17.1567%" y="383.50"></text></g><g><title>`0x7FF813B7B6A8 (30 samples, 0.03%)</title><rect x="16.9785%" y="373" width="0.0326%" height="15" fill="rgb(224,206,25)" fg:x="15618" fg:w="30"/><text x="17.2285%" y="383.50"></text></g><g><title>`0x7FF813B7B6FA (57 samples, 0.06%)</title><rect x="17.0209%" y="373" width="0.0620%" height="15" fill="rgb(243,201,19)" fg:x="15657" fg:w="57"/><text x="17.2709%" y="383.50"></text></g><g><title>`0x7FF813B7B70B (36 samples, 0.04%)</title><rect x="17.0970%" y="373" width="0.0391%" height="15" fill="rgb(236,59,4)" fg:x="15727" fg:w="36"/><text x="17.3470%" y="383.50"></text></g><g><title>`0x7FF813B7B721 (33 samples, 0.04%)</title><rect x="17.1383%" y="373" width="0.0359%" height="15" fill="rgb(254,179,45)" fg:x="15765" fg:w="33"/><text x="17.3883%" y="383.50"></text></g><g><title>`0x7FF813B7B726 (39 samples, 0.04%)</title><rect x="17.1742%" y="373" width="0.0424%" height="15" fill="rgb(226,14,10)" fg:x="15798" fg:w="39"/><text x="17.4242%" y="383.50"></text></g><g><title>`0x7FF813B7B73C (53 samples, 0.06%)</title><rect x="17.2220%" y="373" width="0.0576%" height="15" fill="rgb(244,27,41)" fg:x="15842" fg:w="53"/><text x="17.4720%" y="383.50"></text></g><g><title>`0x7FF813B7B73F (17 samples, 0.02%)</title><rect x="17.2796%" y="373" width="0.0185%" height="15" fill="rgb(235,35,32)" fg:x="15895" fg:w="17"/><text x="17.5296%" y="383.50"></text></g><g><title>`0x7FF813B7B748 (68 samples, 0.07%)</title><rect x="17.2981%" y="373" width="0.0739%" height="15" fill="rgb(218,68,31)" fg:x="15912" fg:w="68"/><text x="17.5481%" y="383.50"></text></g><g><title>`0x7FF813B7B74F (57 samples, 0.06%)</title><rect x="17.3775%" y="373" width="0.0620%" height="15" fill="rgb(207,120,37)" fg:x="15985" fg:w="57"/><text x="17.6275%" y="383.50"></text></g><g><title>`0x7FF813B7B75B (23 samples, 0.03%)</title><rect x="17.4405%" y="373" width="0.0250%" height="15" fill="rgb(227,98,0)" fg:x="16043" fg:w="23"/><text x="17.6905%" y="383.50"></text></g><g><title>`0x7FF813B7B763 (32 samples, 0.03%)</title><rect x="17.4655%" y="373" width="0.0348%" height="15" fill="rgb(207,7,3)" fg:x="16066" fg:w="32"/><text x="17.7155%" y="383.50"></text></g><g><title>`0x7FF813B7B77B (33 samples, 0.04%)</title><rect x="17.5068%" y="373" width="0.0359%" height="15" fill="rgb(206,98,19)" fg:x="16104" fg:w="33"/><text x="17.7568%" y="383.50"></text></g><g><title>`0x7FF813B7B783 (24 samples, 0.03%)</title><rect x="17.5460%" y="373" width="0.0261%" height="15" fill="rgb(217,5,26)" fg:x="16140" fg:w="24"/><text x="17.7960%" y="383.50"></text></g><g><title>`0x7FF813B7B788 (31 samples, 0.03%)</title><rect x="17.5720%" y="373" width="0.0337%" height="15" fill="rgb(235,190,38)" fg:x="16164" fg:w="31"/><text x="17.8220%" y="383.50"></text></g><g><title>`0x7FF813B7B797 (22 samples, 0.02%)</title><rect x="17.6275%" y="373" width="0.0239%" height="15" fill="rgb(247,86,24)" fg:x="16215" fg:w="22"/><text x="17.8775%" y="383.50"></text></g><g><title>`0x7FF813B7B7A2 (424 samples, 0.46%)</title><rect x="17.6536%" y="373" width="0.4609%" height="15" fill="rgb(205,101,16)" fg:x="16239" fg:w="424"/><text x="17.9036%" y="383.50"></text></g><g><title>`0x7FF813B7B7E6 (82 samples, 0.09%)</title><rect x="18.1178%" y="373" width="0.0891%" height="15" fill="rgb(246,168,33)" fg:x="16666" fg:w="82"/><text x="18.3678%" y="383.50"></text></g><g><title>`0x7FF813B7B7FA (11 samples, 0.01%)</title><rect x="18.2113%" y="373" width="0.0120%" height="15" fill="rgb(231,114,1)" fg:x="16752" fg:w="11"/><text x="18.4613%" y="383.50"></text></g><g><title>`0x7FF813B7B813 (28 samples, 0.03%)</title><rect x="18.2330%" y="373" width="0.0304%" height="15" fill="rgb(207,184,53)" fg:x="16772" fg:w="28"/><text x="18.4830%" y="383.50"></text></g><g><title>`0x7FF813B7B81B (96 samples, 0.10%)</title><rect x="18.2635%" y="373" width="0.1044%" height="15" fill="rgb(224,95,51)" fg:x="16800" fg:w="96"/><text x="18.5135%" y="383.50"></text></g><g><title>`0x7FF813B7B83C (75 samples, 0.08%)</title><rect x="18.3972%" y="373" width="0.0815%" height="15" fill="rgb(212,188,45)" fg:x="16923" fg:w="75"/><text x="18.6472%" y="383.50"></text></g><g><title>`0x7FF813B7B862 (108 samples, 0.12%)</title><rect x="18.5037%" y="373" width="0.1174%" height="15" fill="rgb(223,154,38)" fg:x="17021" fg:w="108"/><text x="18.7537%" y="383.50"></text></g><g><title>`0x7FF813B543D5 (165 samples, 0.18%)</title><rect x="18.6255%" y="357" width="0.1794%" height="15" fill="rgb(251,22,52)" fg:x="17133" fg:w="165"/><text x="18.8755%" y="367.50"></text></g><g><title>`0x7FF813B543E2 (22 samples, 0.02%)</title><rect x="18.8081%" y="357" width="0.0239%" height="15" fill="rgb(229,209,22)" fg:x="17301" fg:w="22"/><text x="19.0581%" y="367.50"></text></g><g><title>`0x7FF813B543E6 (63 samples, 0.07%)</title><rect x="18.8320%" y="357" width="0.0685%" height="15" fill="rgb(234,138,34)" fg:x="17323" fg:w="63"/><text x="19.0820%" y="367.50"></text></g><g><title>`0x7FF813B5440B (11 samples, 0.01%)</title><rect x="18.9125%" y="357" width="0.0120%" height="15" fill="rgb(212,95,11)" fg:x="17397" fg:w="11"/><text x="19.1625%" y="367.50"></text></g><g><title>`0x7FF813B5440F (66 samples, 0.07%)</title><rect x="18.9244%" y="357" width="0.0717%" height="15" fill="rgb(240,179,47)" fg:x="17408" fg:w="66"/><text x="19.1744%" y="367.50"></text></g><g><title>`0x7FF813B54442 (12 samples, 0.01%)</title><rect x="19.0081%" y="357" width="0.0130%" height="15" fill="rgb(240,163,11)" fg:x="17485" fg:w="12"/><text x="19.2581%" y="367.50"></text></g><g><title>`0x7FF813B5444B (17 samples, 0.02%)</title><rect x="19.0342%" y="357" width="0.0185%" height="15" fill="rgb(236,37,12)" fg:x="17509" fg:w="17"/><text x="19.2842%" y="367.50"></text></g><g><title>`0x7FF813B5444E (65 samples, 0.07%)</title><rect x="19.0527%" y="357" width="0.0707%" height="15" fill="rgb(232,164,16)" fg:x="17526" fg:w="65"/><text x="19.3027%" y="367.50"></text></g><g><title>`0x7FF813B54452 (167 samples, 0.18%)</title><rect x="19.1234%" y="357" width="0.1815%" height="15" fill="rgb(244,205,15)" fg:x="17591" fg:w="167"/><text x="19.3734%" y="367.50"></text></g><g><title>`0x7FF813B54455 (64 samples, 0.07%)</title><rect x="19.3049%" y="357" width="0.0696%" height="15" fill="rgb(223,117,47)" fg:x="17758" fg:w="64"/><text x="19.5549%" y="367.50"></text></g><g><title>`0x7FF813B54458 (71 samples, 0.08%)</title><rect x="19.3745%" y="357" width="0.0772%" height="15" fill="rgb(244,107,35)" fg:x="17822" fg:w="71"/><text x="19.6245%" y="367.50"></text></g><g><title>`0x7FF813B5445C (107 samples, 0.12%)</title><rect x="19.4517%" y="357" width="0.1163%" height="15" fill="rgb(205,140,8)" fg:x="17893" fg:w="107"/><text x="19.7017%" y="367.50"></text></g><g><title>`0x7FF813B54475 (39 samples, 0.04%)</title><rect x="19.5962%" y="357" width="0.0424%" height="15" fill="rgb(228,84,46)" fg:x="18026" fg:w="39"/><text x="19.8462%" y="367.50"></text></g><g><title>`0x7FF813B54479 (70 samples, 0.08%)</title><rect x="19.6386%" y="357" width="0.0761%" height="15" fill="rgb(254,188,9)" fg:x="18065" fg:w="70"/><text x="19.8886%" y="367.50"></text></g><g><title>`0x7FF813BF6827 (54 samples, 0.06%)</title><rect x="19.7310%" y="357" width="0.0587%" height="15" fill="rgb(206,112,54)" fg:x="18150" fg:w="54"/><text x="19.9810%" y="367.50"></text></g><g><title>`0x7FF813BF6835 (52 samples, 0.06%)</title><rect x="19.7941%" y="357" width="0.0565%" height="15" fill="rgb(216,84,49)" fg:x="18208" fg:w="52"/><text x="20.0441%" y="367.50"></text></g><g><title>`0x7FF813BF683A (11 samples, 0.01%)</title><rect x="19.8506%" y="357" width="0.0120%" height="15" fill="rgb(214,194,35)" fg:x="18260" fg:w="11"/><text x="20.1006%" y="367.50"></text></g><g><title>`0x7FF813BF684A (10 samples, 0.01%)</title><rect x="19.8659%" y="357" width="0.0109%" height="15" fill="rgb(249,28,3)" fg:x="18274" fg:w="10"/><text x="20.1159%" y="367.50"></text></g><g><title>`0x7FF813B7B86B (1,163 samples, 1.26%)</title><rect x="18.6211%" y="373" width="1.2643%" height="15" fill="rgb(222,56,52)" fg:x="17129" fg:w="1163"/><text x="18.8711%" y="383.50"></text></g><g><title>`0x7FF813B7B878 (37 samples, 0.04%)</title><rect x="19.8898%" y="373" width="0.0402%" height="15" fill="rgb(245,217,50)" fg:x="18296" fg:w="37"/><text x="20.1398%" y="383.50"></text></g><g><title>`0x7FF813B7B87A (97 samples, 0.11%)</title><rect x="19.9300%" y="373" width="0.1054%" height="15" fill="rgb(213,201,24)" fg:x="18333" fg:w="97"/><text x="20.1800%" y="383.50"></text></g><g><title>`0x7FF813B7B87D (11 samples, 0.01%)</title><rect x="20.0354%" y="373" width="0.0120%" height="15" fill="rgb(248,116,28)" fg:x="18430" fg:w="11"/><text x="20.2854%" y="383.50"></text></g><g><title>`0x7FF813B7B893 (38 samples, 0.04%)</title><rect x="20.0659%" y="373" width="0.0413%" height="15" fill="rgb(219,72,43)" fg:x="18458" fg:w="38"/><text x="20.3159%" y="383.50"></text></g><g><title>`0x7FF813B7B896 (58 samples, 0.06%)</title><rect x="20.1072%" y="373" width="0.0631%" height="15" fill="rgb(209,138,14)" fg:x="18496" fg:w="58"/><text x="20.3572%" y="383.50"></text></g><g><title>`0x7FF813B7B89D (69 samples, 0.08%)</title><rect x="20.1757%" y="373" width="0.0750%" height="15" fill="rgb(222,18,33)" fg:x="18559" fg:w="69"/><text x="20.4257%" y="383.50"></text></g><g><title>`0x7FF813B7B8A0 (30 samples, 0.03%)</title><rect x="20.2507%" y="373" width="0.0326%" height="15" fill="rgb(213,199,7)" fg:x="18628" fg:w="30"/><text x="20.5007%" y="383.50"></text></g><g><title>`0x7FF813B7B8A4 (730 samples, 0.79%)</title><rect x="20.2833%" y="373" width="0.7936%" height="15" fill="rgb(250,110,10)" fg:x="18658" fg:w="730"/><text x="20.5333%" y="383.50"></text></g><g><title>`0x7FF813B7B8AA (61 samples, 0.07%)</title><rect x="21.0769%" y="373" width="0.0663%" height="15" fill="rgb(248,123,6)" fg:x="19388" fg:w="61"/><text x="21.3269%" y="383.50"></text></g><g><title>`0x7FF813B7B8D1 (21 samples, 0.02%)</title><rect x="21.1454%" y="373" width="0.0228%" height="15" fill="rgb(206,91,31)" fg:x="19451" fg:w="21"/><text x="21.3954%" y="383.50"></text></g><g><title>`0x7FF813B7B8D4 (66 samples, 0.07%)</title><rect x="21.1682%" y="373" width="0.0717%" height="15" fill="rgb(211,154,13)" fg:x="19472" fg:w="66"/><text x="21.4182%" y="383.50"></text></g><g><title>`0x7FF813B7B8E6 (34 samples, 0.04%)</title><rect x="21.2410%" y="373" width="0.0370%" height="15" fill="rgb(225,148,7)" fg:x="19539" fg:w="34"/><text x="21.4910%" y="383.50"></text></g><g><title>`0x7FF813B7B8F0 (17 samples, 0.02%)</title><rect x="21.2845%" y="373" width="0.0185%" height="15" fill="rgb(220,160,43)" fg:x="19579" fg:w="17"/><text x="21.5345%" y="383.50"></text></g><g><title>`0x7FF813B7B8F2 (62 samples, 0.07%)</title><rect x="21.3030%" y="373" width="0.0674%" height="15" fill="rgb(213,52,39)" fg:x="19596" fg:w="62"/><text x="21.5530%" y="383.50"></text></g><g><title>`0x7FF813B7B8F7 (10 samples, 0.01%)</title><rect x="21.3737%" y="373" width="0.0109%" height="15" fill="rgb(243,137,7)" fg:x="19661" fg:w="10"/><text x="21.6237%" y="383.50"></text></g><g><title>`0x7FF813B5A4DC (10 samples, 0.01%)</title><rect x="21.4063%" y="357" width="0.0109%" height="15" fill="rgb(230,79,13)" fg:x="19691" fg:w="10"/><text x="21.6563%" y="367.50"></text></g><g><title>`0x7FF813B5A4EB (46 samples, 0.05%)</title><rect x="21.4182%" y="357" width="0.0500%" height="15" fill="rgb(247,105,23)" fg:x="19702" fg:w="46"/><text x="21.6682%" y="367.50"></text></g><g><title>`0x7FF813B7BA28 (72 samples, 0.08%)</title><rect x="21.3911%" y="373" width="0.0783%" height="15" fill="rgb(223,179,41)" fg:x="19677" fg:w="72"/><text x="21.6411%" y="383.50"></text></g><g><title>`0x7FF813B7D7C1 (279 samples, 0.30%)</title><rect x="21.4889%" y="309" width="0.3033%" height="15" fill="rgb(218,9,34)" fg:x="19767" fg:w="279"/><text x="21.7389%" y="319.50"></text></g><g><title>`0x7FF813B5E715 (33 samples, 0.04%)</title><rect x="21.8118%" y="277" width="0.0359%" height="15" fill="rgb(222,106,8)" fg:x="20064" fg:w="33"/><text x="22.0618%" y="287.50"></text></g><g><title>`0x7FF813BED2E4 (32 samples, 0.03%)</title><rect x="21.8129%" y="261" width="0.0348%" height="15" fill="rgb(211,220,0)" fg:x="20065" fg:w="32"/><text x="22.0629%" y="271.50"></text></g><g><title>`0x7FF813B5E92D (22 samples, 0.02%)</title><rect x="21.8498%" y="261" width="0.0239%" height="15" fill="rgb(229,52,16)" fg:x="20099" fg:w="22"/><text x="22.0998%" y="271.50"></text></g><g><title>`0x7FF813B5E37B (65 samples, 0.07%)</title><rect x="21.8085%" y="293" width="0.0707%" height="15" fill="rgb(212,155,18)" fg:x="20061" fg:w="65"/><text x="22.0585%" y="303.50"></text></g><g><title>`0x7FF813B5E7DE (27 samples, 0.03%)</title><rect x="21.8498%" y="277" width="0.0294%" height="15" fill="rgb(242,21,14)" fg:x="20099" fg:w="27"/><text x="22.0998%" y="287.50"></text></g><g><title>`0x7FF813B7DBFA (71 samples, 0.08%)</title><rect x="21.8063%" y="309" width="0.0772%" height="15" fill="rgb(222,19,48)" fg:x="20059" fg:w="71"/><text x="22.0563%" y="319.50"></text></g><g><title>`0x7FF813B7DFDF (23 samples, 0.03%)</title><rect x="21.8879%" y="309" width="0.0250%" height="15" fill="rgb(232,45,27)" fg:x="20134" fg:w="23"/><text x="22.1379%" y="319.50"></text></g><g><title>`0x7FF813B7E237 (97 samples, 0.11%)</title><rect x="21.9194%" y="309" width="0.1054%" height="15" fill="rgb(249,103,42)" fg:x="20163" fg:w="97"/><text x="22.1694%" y="319.50"></text></g><g><title>`0x7FF813B6F44F (516 samples, 0.56%)</title><rect x="21.4846%" y="341" width="0.5609%" height="15" fill="rgb(246,81,33)" fg:x="19763" fg:w="516"/><text x="21.7346%" y="351.50"></text></g><g><title>`0x7FF813B7B44D (516 samples, 0.56%)</title><rect x="21.4846%" y="325" width="0.5609%" height="15" fill="rgb(252,33,42)" fg:x="19763" fg:w="516"/><text x="21.7346%" y="335.50"></text></g><g><title>`0x7FF813B6ED55 (10 samples, 0.01%)</title><rect x="22.0596%" y="245" width="0.0109%" height="15" fill="rgb(209,212,41)" fg:x="20292" fg:w="10"/><text x="22.3096%" y="255.50"></text></g><g><title>`0x7FF813B6DFB0 (13 samples, 0.01%)</title><rect x="22.0596%" y="277" width="0.0141%" height="15" fill="rgb(207,154,6)" fg:x="20292" fg:w="13"/><text x="22.3096%" y="287.50"></text></g><g><title>`0x7FF813B6E2A9 (13 samples, 0.01%)</title><rect x="22.0596%" y="261" width="0.0141%" height="15" fill="rgb(223,64,47)" fg:x="20292" fg:w="13"/><text x="22.3096%" y="271.50"></text></g><g><title>`0x7FF813B72499 (20 samples, 0.02%)</title><rect x="22.0564%" y="293" width="0.0217%" height="15" fill="rgb(211,161,38)" fg:x="20289" fg:w="20"/><text x="22.3064%" y="303.50"></text></g><g><title>`0x7FF813B6F4E5 (30 samples, 0.03%)</title><rect x="22.0477%" y="341" width="0.0326%" height="15" fill="rgb(219,138,40)" fg:x="20281" fg:w="30"/><text x="22.2977%" y="351.50"></text></g><g><title>`0x7FF813B736BD (29 samples, 0.03%)</title><rect x="22.0488%" y="325" width="0.0315%" height="15" fill="rgb(241,228,46)" fg:x="20282" fg:w="29"/><text x="22.2988%" y="335.50"></text></g><g><title>`0x7FF813B738E3 (26 samples, 0.03%)</title><rect x="22.0520%" y="309" width="0.0283%" height="15" fill="rgb(223,209,38)" fg:x="20285" fg:w="26"/><text x="22.3020%" y="319.50"></text></g><g><title>`0x7FF813B70B31 (626 samples, 0.68%)</title><rect x="21.4824%" y="357" width="0.6805%" height="15" fill="rgb(236,164,45)" fg:x="19761" fg:w="626"/><text x="21.7324%" y="367.50"></text></g><g><title>`0x7FF813B6F525 (76 samples, 0.08%)</title><rect x="22.0803%" y="341" width="0.0826%" height="15" fill="rgb(231,15,5)" fg:x="20311" fg:w="76"/><text x="22.3303%" y="351.50"></text></g><g><title>`0x7FF813BED9E4 (76 samples, 0.08%)</title><rect x="22.0803%" y="325" width="0.0826%" height="15" fill="rgb(252,35,15)" fg:x="20311" fg:w="76"/><text x="22.3303%" y="335.50"></text></g><g><title>`0x7FF813B7BEDA (634 samples, 0.69%)</title><rect x="21.4759%" y="373" width="0.6892%" height="15" fill="rgb(248,181,18)" fg:x="19755" fg:w="634"/><text x="21.7259%" y="383.50"></text></g><g><title>`0x7FF813B5A155 (35 samples, 0.04%)</title><rect x="22.1749%" y="357" width="0.0380%" height="15" fill="rgb(233,39,42)" fg:x="20398" fg:w="35"/><text x="22.4249%" y="367.50"></text></g><g><title>`0x7FF813B5A16A (14 samples, 0.02%)</title><rect x="22.2271%" y="357" width="0.0152%" height="15" fill="rgb(238,110,33)" fg:x="20446" fg:w="14"/><text x="22.4771%" y="367.50"></text></g><g><title>`0x7FF813B5A16D (73 samples, 0.08%)</title><rect x="22.2423%" y="357" width="0.0794%" height="15" fill="rgb(233,195,10)" fg:x="20460" fg:w="73"/><text x="22.4923%" y="367.50"></text></g><g><title>`0x7FF813B5A16F (264 samples, 0.29%)</title><rect x="22.3216%" y="357" width="0.2870%" height="15" fill="rgb(254,105,3)" fg:x="20533" fg:w="264"/><text x="22.5716%" y="367.50"></text></g><g><title>`0x7FF813B5A176 (162 samples, 0.18%)</title><rect x="22.6086%" y="357" width="0.1761%" height="15" fill="rgb(221,225,9)" fg:x="20797" fg:w="162"/><text x="22.8586%" y="367.50"></text></g><g><title>`0x7FF813B5A179 (97 samples, 0.11%)</title><rect x="22.7847%" y="357" width="0.1054%" height="15" fill="rgb(224,227,45)" fg:x="20959" fg:w="97"/><text x="23.0347%" y="367.50"></text></g><g><title>`0x7FF813B5A18A (12 samples, 0.01%)</title><rect x="22.8945%" y="357" width="0.0130%" height="15" fill="rgb(229,198,43)" fg:x="21060" fg:w="12"/><text x="23.1445%" y="367.50"></text></g><g><title>`0x7FF813B7BF5E (705 samples, 0.77%)</title><rect x="22.1694%" y="373" width="0.7664%" height="15" fill="rgb(206,209,35)" fg:x="20393" fg:w="705"/><text x="22.4194%" y="383.50"></text></g><g><title>`0x7FF813B7B3C7 (5,892 samples, 6.41%)</title><rect x="16.5393%" y="389" width="6.4053%" height="15" fill="rgb(245,195,53)" fg:x="15214" fg:w="5892"/><text x="16.7893%" y="399.50">`0x7FF81..</text></g><g><title>`0x7FF813B7B458 (21 samples, 0.02%)</title><rect x="22.9445%" y="389" width="0.0228%" height="15" fill="rgb(240,92,26)" fg:x="21106" fg:w="21"/><text x="23.1945%" y="399.50"></text></g><g><title>`0x7FF813B7B4FF (22 samples, 0.02%)</title><rect x="22.9793%" y="389" width="0.0239%" height="15" fill="rgb(207,40,23)" fg:x="21138" fg:w="22"/><text x="23.2293%" y="399.50"></text></g><g><title>`0x7FF813B7B502 (77 samples, 0.08%)</title><rect x="23.0033%" y="389" width="0.0837%" height="15" fill="rgb(223,111,35)" fg:x="21160" fg:w="77"/><text x="23.2533%" y="399.50"></text></g><g><title>`0x7FF813B7B527 (78 samples, 0.08%)</title><rect x="23.0870%" y="389" width="0.0848%" height="15" fill="rgb(229,147,28)" fg:x="21237" fg:w="78"/><text x="23.3370%" y="399.50"></text></g><g><title>`0x7FF813B7B633 (83 samples, 0.09%)</title><rect x="23.1728%" y="389" width="0.0902%" height="15" fill="rgb(211,29,28)" fg:x="21316" fg:w="83"/><text x="23.4228%" y="399.50"></text></g><g><title>`0x7FF813B7B63E (11 samples, 0.01%)</title><rect x="23.2696%" y="389" width="0.0120%" height="15" fill="rgb(228,72,33)" fg:x="21405" fg:w="11"/><text x="23.5196%" y="399.50"></text></g><g><title>hello.exe`std::alloc::__default_lib_allocator::__rdl_alloc (124 samples, 0.13%)</title><rect x="23.2902%" y="389" width="0.1348%" height="15" fill="rgb(205,214,31)" fg:x="21424" fg:w="124"/><text x="23.5402%" y="399.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::impl$0::alloc (42 samples, 0.05%)</title><rect x="23.3794%" y="373" width="0.0457%" height="15" fill="rgb(224,111,15)" fg:x="21506" fg:w="42"/><text x="23.6294%" y="383.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::allocate (42 samples, 0.05%)</title><rect x="23.3794%" y="357" width="0.0457%" height="15" fill="rgb(253,21,26)" fg:x="21506" fg:w="42"/><text x="23.6294%" y="367.50"></text></g><g><title>hello.exe`alloc::vec::Vec::with_capacity_in (7,704 samples, 8.38%)</title><rect x="15.2239%" y="485" width="8.3751%" height="15" fill="rgb(245,139,43)" fg:x="14004" fg:w="7704"/><text x="15.4739%" y="495.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::raw_vec::RawVec::with_capacity_in (7,704 samples, 8.38%)</title><rect x="15.2239%" y="469" width="8.3751%" height="15" fill="rgb(252,170,7)" fg:x="14004" fg:w="7704"/><text x="15.4739%" y="479.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::raw_vec::RawVec::allocate_in (7,704 samples, 8.38%)</title><rect x="15.2239%" y="453" width="8.3751%" height="15" fill="rgb(231,118,14)" fg:x="14004" fg:w="7704"/><text x="15.4739%" y="463.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::alloc::impl$1::allocate (7,683 samples, 8.35%)</title><rect x="15.2467%" y="437" width="8.3523%" height="15" fill="rgb(238,83,0)" fg:x="14025" fg:w="7683"/><text x="15.4967%" y="447.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::alloc::Global::alloc_impl (7,683 samples, 8.35%)</title><rect x="15.2467%" y="421" width="8.3523%" height="15" fill="rgb(221,39,39)" fg:x="14025" fg:w="7683"/><text x="15.4967%" y="431.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::alloc::alloc (7,683 samples, 8.35%)</title><rect x="15.2467%" y="405" width="8.3523%" height="15" fill="rgb(222,119,46)" fg:x="14025" fg:w="7683"/><text x="15.4967%" y="415.50">hello.exe`al..</text></g><g><title>hello.exe`std::sys::pal::windows::alloc::process_heap_alloc (160 samples, 0.17%)</title><rect x="23.4250%" y="389" width="0.1739%" height="15" fill="rgb(222,165,49)" fg:x="21548" fg:w="160"/><text x="23.6750%" y="399.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::init_or_get_process_heap (61 samples, 0.07%)</title><rect x="23.5327%" y="373" width="0.0663%" height="15" fill="rgb(219,113,52)" fg:x="21647" fg:w="61"/><text x="23.7827%" y="383.50"></text></g><g><title>hello.exe`alloc::vec::impl$10::clone (7,706 samples, 8.38%)</title><rect x="15.2239%" y="549" width="8.3773%" height="15" fill="rgb(214,7,15)" fg:x="14004" fg:w="7706"/><text x="15.4739%" y="559.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::slice::impl$0::to_vec_in (7,706 samples, 8.38%)</title><rect x="15.2239%" y="533" width="8.3773%" height="15" fill="rgb(235,32,4)" fg:x="14004" fg:w="7706"/><text x="15.4739%" y="543.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::slice::hack::to_vec (7,706 samples, 8.38%)</title><rect x="15.2239%" y="517" width="8.3773%" height="15" fill="rgb(238,90,54)" fg:x="14004" fg:w="7706"/><text x="15.4739%" y="527.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::slice::hack::impl$1::to_vec (7,706 samples, 8.38%)</title><rect x="15.2239%" y="501" width="8.3773%" height="15" fill="rgb(213,208,19)" fg:x="14004" fg:w="7706"/><text x="15.4739%" y="511.50">hello.exe`al..</text></g><g><title>hello.exe`alloc::string::impl$6::clone (8,514 samples, 9.26%)</title><rect x="14.4238%" y="565" width="9.2557%" height="15" fill="rgb(233,156,4)" fg:x="13268" fg:w="8514"/><text x="14.6738%" y="575.50">hello.exe`all..</text></g><g><title>hello.exe`memcpy (72 samples, 0.08%)</title><rect x="23.6012%" y="549" width="0.0783%" height="15" fill="rgb(207,194,5)" fg:x="21710" fg:w="72"/><text x="23.8512%" y="559.50"></text></g><g><title>`0x7FF813B74760 (34 samples, 0.04%)</title><rect x="23.6936%" y="533" width="0.0370%" height="15" fill="rgb(206,111,30)" fg:x="21795" fg:w="34"/><text x="23.9436%" y="543.50"></text></g><g><title>`0x7FF813B74777 (29 samples, 0.03%)</title><rect x="23.7349%" y="533" width="0.0315%" height="15" fill="rgb(243,70,54)" fg:x="21833" fg:w="29"/><text x="23.9849%" y="543.50"></text></g><g><title>`0x7FF813B7479E (29 samples, 0.03%)</title><rect x="23.7697%" y="533" width="0.0315%" height="15" fill="rgb(242,28,8)" fg:x="21865" fg:w="29"/><text x="24.0197%" y="543.50"></text></g><g><title>`0x7FF813B7571F (14 samples, 0.02%)</title><rect x="23.8414%" y="517" width="0.0152%" height="15" fill="rgb(219,106,18)" fg:x="21931" fg:w="14"/><text x="24.0914%" y="527.50"></text></g><g><title>`0x7FF813B75731 (18 samples, 0.02%)</title><rect x="23.8632%" y="517" width="0.0196%" height="15" fill="rgb(244,222,10)" fg:x="21951" fg:w="18"/><text x="24.1132%" y="527.50"></text></g><g><title>`0x7FF813B7592E (27 samples, 0.03%)</title><rect x="23.8871%" y="517" width="0.0294%" height="15" fill="rgb(236,179,52)" fg:x="21973" fg:w="27"/><text x="24.1371%" y="527.50"></text></g><g><title>`0x7FF813B75B11 (13 samples, 0.01%)</title><rect x="23.9327%" y="517" width="0.0141%" height="15" fill="rgb(213,23,39)" fg:x="22015" fg:w="13"/><text x="24.1827%" y="527.50"></text></g><g><title>`0x7FF813B75B9C (31 samples, 0.03%)</title><rect x="23.9675%" y="517" width="0.0337%" height="15" fill="rgb(238,48,10)" fg:x="22047" fg:w="31"/><text x="24.2175%" y="527.50"></text></g><g><title>`0x7FF813B74820 (49 samples, 0.05%)</title><rect x="24.0023%" y="501" width="0.0533%" height="15" fill="rgb(251,196,23)" fg:x="22079" fg:w="49"/><text x="24.2523%" y="511.50"></text></g><g><title>`0x7FF813B74837 (27 samples, 0.03%)</title><rect x="24.0577%" y="501" width="0.0294%" height="15" fill="rgb(250,152,24)" fg:x="22130" fg:w="27"/><text x="24.3077%" y="511.50"></text></g><g><title>`0x7FF813B75BA1 (80 samples, 0.09%)</title><rect x="24.0012%" y="517" width="0.0870%" height="15" fill="rgb(209,150,17)" fg:x="22078" fg:w="80"/><text x="24.2512%" y="527.50"></text></g><g><title>`0x7FF813B75BBB (34 samples, 0.04%)</title><rect x="24.0904%" y="517" width="0.0370%" height="15" fill="rgb(234,202,34)" fg:x="22160" fg:w="34"/><text x="24.3404%" y="527.50"></text></g><g><title>`0x7FF813B75BC9 (16 samples, 0.02%)</title><rect x="24.1273%" y="517" width="0.0174%" height="15" fill="rgb(253,148,53)" fg:x="22194" fg:w="16"/><text x="24.3773%" y="527.50"></text></g><g><title>`0x7FF813BF6EFE (20 samples, 0.02%)</title><rect x="24.1458%" y="517" width="0.0217%" height="15" fill="rgb(218,129,16)" fg:x="22211" fg:w="20"/><text x="24.3958%" y="527.50"></text></g><g><title>`0x7FF813BF6F21 (21 samples, 0.02%)</title><rect x="24.1828%" y="517" width="0.0228%" height="15" fill="rgb(216,85,19)" fg:x="22245" fg:w="21"/><text x="24.4328%" y="527.50"></text></g><g><title>`0x7FF813BF6F2A (72 samples, 0.08%)</title><rect x="24.2078%" y="517" width="0.0783%" height="15" fill="rgb(235,228,7)" fg:x="22268" fg:w="72"/><text x="24.4578%" y="527.50"></text></g><g><title>`0x7FF813BF6F3B (62 samples, 0.07%)</title><rect x="24.2937%" y="517" width="0.0674%" height="15" fill="rgb(245,175,0)" fg:x="22347" fg:w="62"/><text x="24.5437%" y="527.50"></text></g><g><title>`0x7FF813BF6F3F (23 samples, 0.03%)</title><rect x="24.3611%" y="517" width="0.0250%" height="15" fill="rgb(208,168,36)" fg:x="22409" fg:w="23"/><text x="24.6111%" y="527.50"></text></g><g><title>`0x7FF813BF6F43 (15 samples, 0.02%)</title><rect x="24.3861%" y="517" width="0.0163%" height="15" fill="rgb(246,171,24)" fg:x="22432" fg:w="15"/><text x="24.6361%" y="527.50"></text></g><g><title>`0x7FF813BF6F4C (18 samples, 0.02%)</title><rect x="24.4024%" y="517" width="0.0196%" height="15" fill="rgb(215,142,24)" fg:x="22447" fg:w="18"/><text x="24.6524%" y="527.50"></text></g><g><title>`0x7FF813BF6F58 (89 samples, 0.10%)</title><rect x="24.4274%" y="517" width="0.0968%" height="15" fill="rgb(250,187,7)" fg:x="22470" fg:w="89"/><text x="24.6774%" y="527.50"></text></g><g><title>`0x7FF813BF6F5F (12 samples, 0.01%)</title><rect x="24.5328%" y="517" width="0.0130%" height="15" fill="rgb(228,66,33)" fg:x="22567" fg:w="12"/><text x="24.7828%" y="527.50"></text></g><g><title>`0x7FF813BF6F63 (89 samples, 0.10%)</title><rect x="24.5459%" y="517" width="0.0968%" height="15" fill="rgb(234,215,21)" fg:x="22579" fg:w="89"/><text x="24.7959%" y="527.50"></text></g><g><title>`0x7FF813BF6F66 (21 samples, 0.02%)</title><rect x="24.6426%" y="517" width="0.0228%" height="15" fill="rgb(222,191,20)" fg:x="22668" fg:w="21"/><text x="24.8926%" y="527.50"></text></g><g><title>`0x7FF813BF6F6E (18 samples, 0.02%)</title><rect x="24.6720%" y="517" width="0.0196%" height="15" fill="rgb(245,79,54)" fg:x="22695" fg:w="18"/><text x="24.9220%" y="527.50"></text></g><g><title>`0x7FF813BF6F73 (25 samples, 0.03%)</title><rect x="24.6915%" y="517" width="0.0272%" height="15" fill="rgb(240,10,37)" fg:x="22713" fg:w="25"/><text x="24.9415%" y="527.50"></text></g><g><title>`0x7FF813BF6F76 (22 samples, 0.02%)</title><rect x="24.7187%" y="517" width="0.0239%" height="15" fill="rgb(214,192,32)" fg:x="22738" fg:w="22"/><text x="24.9687%" y="527.50"></text></g><g><title>`0x7FF813BF6F7C (63 samples, 0.07%)</title><rect x="24.7459%" y="517" width="0.0685%" height="15" fill="rgb(209,36,54)" fg:x="22763" fg:w="63"/><text x="24.9959%" y="527.50"></text></g><g><title>`0x7FF813BF6F7F (26 samples, 0.03%)</title><rect x="24.8144%" y="517" width="0.0283%" height="15" fill="rgb(220,10,11)" fg:x="22826" fg:w="26"/><text x="25.0644%" y="527.50"></text></g><g><title>`0x7FF813BF6F82 (20 samples, 0.02%)</title><rect x="24.8426%" y="517" width="0.0217%" height="15" fill="rgb(221,106,17)" fg:x="22852" fg:w="20"/><text x="25.0926%" y="527.50"></text></g><g><title>`0x7FF813BF6F92 (11 samples, 0.01%)</title><rect x="24.8644%" y="517" width="0.0120%" height="15" fill="rgb(251,142,44)" fg:x="22872" fg:w="11"/><text x="25.1144%" y="527.50"></text></g><g><title>`0x7FF813BF6F94 (20 samples, 0.02%)</title><rect x="24.8763%" y="517" width="0.0217%" height="15" fill="rgb(238,13,15)" fg:x="22883" fg:w="20"/><text x="25.1263%" y="527.50"></text></g><g><title>`0x7FF813BF6FFB (24 samples, 0.03%)</title><rect x="24.9100%" y="517" width="0.0261%" height="15" fill="rgb(208,107,27)" fg:x="22914" fg:w="24"/><text x="25.1600%" y="527.50"></text></g><g><title>`0x7FF813BF701D (32 samples, 0.03%)</title><rect x="24.9416%" y="517" width="0.0348%" height="15" fill="rgb(205,136,37)" fg:x="22943" fg:w="32"/><text x="25.1916%" y="527.50"></text></g><g><title>`0x7FF813BF702A (315 samples, 0.34%)</title><rect x="24.9764%" y="517" width="0.3424%" height="15" fill="rgb(250,205,27)" fg:x="22975" fg:w="315"/><text x="25.2264%" y="527.50"></text></g><g><title>`0x7FF813BF7045 (37 samples, 0.04%)</title><rect x="25.3188%" y="517" width="0.0402%" height="15" fill="rgb(210,80,43)" fg:x="23290" fg:w="37"/><text x="25.5688%" y="527.50"></text></g><g><title>`0x7FF813BF706A (48 samples, 0.05%)</title><rect x="25.3612%" y="517" width="0.0522%" height="15" fill="rgb(247,160,36)" fg:x="23329" fg:w="48"/><text x="25.6112%" y="527.50"></text></g><g><title>`0x7FF813BF70AB (28 samples, 0.03%)</title><rect x="25.4177%" y="517" width="0.0304%" height="15" fill="rgb(234,13,49)" fg:x="23381" fg:w="28"/><text x="25.6677%" y="527.50"></text></g><g><title>`0x7FF813BF70C5 (23 samples, 0.03%)</title><rect x="25.4569%" y="517" width="0.0250%" height="15" fill="rgb(234,122,0)" fg:x="23417" fg:w="23"/><text x="25.7069%" y="527.50"></text></g><g><title>`0x7FF813BF733B (16 samples, 0.02%)</title><rect x="25.4895%" y="517" width="0.0174%" height="15" fill="rgb(207,146,38)" fg:x="23447" fg:w="16"/><text x="25.7395%" y="527.50"></text></g><g><title>`0x7FF813B73574 (12 samples, 0.01%)</title><rect x="25.5166%" y="501" width="0.0130%" height="15" fill="rgb(207,177,25)" fg:x="23472" fg:w="12"/><text x="25.7666%" y="511.50"></text></g><g><title>`0x7FF813BF7351 (49 samples, 0.05%)</title><rect x="25.5145%" y="517" width="0.0533%" height="15" fill="rgb(211,178,42)" fg:x="23470" fg:w="49"/><text x="25.7645%" y="527.50"></text></g><g><title>`0x7FF813B7358A (33 samples, 0.04%)</title><rect x="25.5319%" y="501" width="0.0359%" height="15" fill="rgb(230,69,54)" fg:x="23486" fg:w="33"/><text x="25.7819%" y="511.50"></text></g><g><title>`0x7FF813B747B1 (1,628 samples, 1.77%)</title><rect x="23.8012%" y="533" width="1.7698%" height="15" fill="rgb(214,135,41)" fg:x="21894" fg:w="1628"/><text x="24.0512%" y="543.50"></text></g><g><title>`0x7FF813B747C6 (36 samples, 0.04%)</title><rect x="25.5743%" y="533" width="0.0391%" height="15" fill="rgb(237,67,25)" fg:x="23525" fg:w="36"/><text x="25.8243%" y="543.50"></text></g><g><title>hello.exe`__rust_dealloc (10 samples, 0.01%)</title><rect x="25.6134%" y="533" width="0.0109%" height="15" fill="rgb(222,189,50)" fg:x="23561" fg:w="10"/><text x="25.8634%" y="543.50"></text></g><g><title>hello.exe`core::ptr::non_null::impl$12::eq(core::ptr::non_null::NonNull&lt;alloc::string::String&gt;*, core::ptr::non_null::NonNull (1,816 samples, 1.97%)</title><rect x="23.6805%" y="549" width="1.9742%" height="15" fill="rgb(245,148,34)" fg:x="21783" fg:w="1816"/><text x="23.9305%" y="559.50">h..</text></g><g><title>hello.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (28 samples, 0.03%)</title><rect x="25.6243%" y="533" width="0.0304%" height="15" fill="rgb(222,29,6)" fg:x="23571" fg:w="28"/><text x="25.8743%" y="543.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::impl$0::dealloc (28 samples, 0.03%)</title><rect x="25.6243%" y="517" width="0.0304%" height="15" fill="rgb(221,189,43)" fg:x="23571" fg:w="28"/><text x="25.8743%" y="527.50"></text></g><g><title>hello.exe`alloc::vec::into_iter::impl$5::next(alloc::vec::into_iter::IntoIter (1,850 samples, 2.01%)</title><rect x="23.6794%" y="565" width="2.0112%" height="15" fill="rgb(207,36,27)" fg:x="21782" fg:w="1850"/><text x="23.9294%" y="575.50">h..</text></g><g><title>hello.exe`core::ptr::read (33 samples, 0.04%)</title><rect x="25.6547%" y="549" width="0.0359%" height="15" fill="rgb(217,90,24)" fg:x="23599" fg:w="33"/><text x="25.9047%" y="559.50"></text></g><g><title>`0x7FF813B6ED55 (17 samples, 0.02%)</title><rect x="25.6971%" y="453" width="0.0185%" height="15" fill="rgb(224,66,35)" fg:x="23638" fg:w="17"/><text x="25.9471%" y="463.50"></text></g><g><title>`0x7FF813B6EA31 (20 samples, 0.02%)</title><rect x="25.6960%" y="485" width="0.0217%" height="15" fill="rgb(221,13,50)" fg:x="23637" fg:w="20"/><text x="25.9460%" y="495.50"></text></g><g><title>`0x7FF813B6E2A9 (20 samples, 0.02%)</title><rect x="25.6960%" y="469" width="0.0217%" height="15" fill="rgb(236,68,49)" fg:x="23637" fg:w="20"/><text x="25.9460%" y="479.50"></text></g><g><title>`0x7FF813B765F6 (24 samples, 0.03%)</title><rect x="25.6928%" y="517" width="0.0261%" height="15" fill="rgb(229,146,28)" fg:x="23634" fg:w="24"/><text x="25.9428%" y="527.50"></text></g><g><title>`0x7FF813B6E430 (22 samples, 0.02%)</title><rect x="25.6949%" y="501" width="0.0239%" height="15" fill="rgb(225,31,38)" fg:x="23636" fg:w="22"/><text x="25.9449%" y="511.50"></text></g><g><title>`0x7FF813B76F37 (10 samples, 0.01%)</title><rect x="25.7189%" y="517" width="0.0109%" height="15" fill="rgb(250,208,3)" fg:x="23658" fg:w="10"/><text x="25.9689%" y="527.50"></text></g><g><title>`0x7FF813B59B1A (10 samples, 0.01%)</title><rect x="25.7189%" y="501" width="0.0109%" height="15" fill="rgb(246,54,23)" fg:x="23658" fg:w="10"/><text x="25.9689%" y="511.50"></text></g><g><title>`0x7FF813BED3A4 (10 samples, 0.01%)</title><rect x="25.7189%" y="485" width="0.0109%" height="15" fill="rgb(243,76,11)" fg:x="23658" fg:w="10"/><text x="25.9689%" y="495.50"></text></g><g><title>hello.exe`core::iter::adapters::take::impl$1::next(core::iter::adapters::take::Take&lt;std::io::Lines&lt;std::io::buffered::bufreader::BufReader (37 samples, 0.04%)</title><rect x="25.6906%" y="565" width="0.0402%" height="15" fill="rgb(245,21,50)" fg:x="23632" fg:w="37"/><text x="25.9406%" y="575.50"></text></g><g><title>`0x7FF813B747B1 (37 samples, 0.04%)</title><rect x="25.6906%" y="549" width="0.0402%" height="15" fill="rgb(228,9,43)" fg:x="23632" fg:w="37"/><text x="25.9406%" y="559.50"></text></g><g><title>`0x7FF813B75B74 (37 samples, 0.04%)</title><rect x="25.6906%" y="533" width="0.0402%" height="15" fill="rgb(208,100,47)" fg:x="23632" fg:w="37"/><text x="25.9406%" y="543.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (16 samples, 0.02%)</title><rect x="25.7884%" y="341" width="0.0174%" height="15" fill="rgb(232,26,8)" fg:x="23722" fg:w="16"/><text x="26.0384%" y="351.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (26 samples, 0.03%)</title><rect x="25.7819%" y="357" width="0.0283%" height="15" fill="rgb(216,166,38)" fg:x="23716" fg:w="26"/><text x="26.0319%" y="367.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (63 samples, 0.07%)</title><rect x="25.7569%" y="485" width="0.0685%" height="15" fill="rgb(251,202,51)" fg:x="23693" fg:w="63"/><text x="26.0069%" y="495.50"></text></g><g><title>hello.exe`alloc::string::impl$23::hash (57 samples, 0.06%)</title><rect x="25.7634%" y="469" width="0.0620%" height="15" fill="rgb(254,216,34)" fg:x="23699" fg:w="57"/><text x="26.0134%" y="479.50"></text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (57 samples, 0.06%)</title><rect x="25.7634%" y="453" width="0.0620%" height="15" fill="rgb(251,32,27)" fg:x="23699" fg:w="57"/><text x="26.0134%" y="463.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (57 samples, 0.06%)</title><rect x="25.7634%" y="437" width="0.0620%" height="15" fill="rgb(208,127,28)" fg:x="23699" fg:w="57"/><text x="26.0134%" y="447.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (57 samples, 0.06%)</title><rect x="25.7634%" y="421" width="0.0620%" height="15" fill="rgb(224,137,22)" fg:x="23699" fg:w="57"/><text x="26.0134%" y="431.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (57 samples, 0.06%)</title><rect x="25.7634%" y="405" width="0.0620%" height="15" fill="rgb(254,70,32)" fg:x="23699" fg:w="57"/><text x="26.0134%" y="415.50"></text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (57 samples, 0.06%)</title><rect x="25.7634%" y="389" width="0.0620%" height="15" fill="rgb(229,75,37)" fg:x="23699" fg:w="57"/><text x="26.0134%" y="399.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (56 samples, 0.06%)</title><rect x="25.7645%" y="373" width="0.0609%" height="15" fill="rgb(252,64,23)" fg:x="23700" fg:w="56"/><text x="26.0145%" y="383.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (14 samples, 0.02%)</title><rect x="25.8102%" y="357" width="0.0152%" height="15" fill="rgb(232,162,48)" fg:x="23742" fg:w="14"/><text x="26.0602%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (18 samples, 0.02%)</title><rect x="25.8341%" y="437" width="0.0196%" height="15" fill="rgb(246,160,12)" fg:x="23764" fg:w="18"/><text x="26.0841%" y="447.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (12 samples, 0.01%)</title><rect x="25.8537%" y="437" width="0.0130%" height="15" fill="rgb(247,166,0)" fg:x="23782" fg:w="12"/><text x="26.1037%" y="447.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (22 samples, 0.02%)</title><rect x="25.8689%" y="421" width="0.0239%" height="15" fill="rgb(249,219,21)" fg:x="23796" fg:w="22"/><text x="26.1189%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,std::collections::hash::set::HashSet (132 samples, 0.14%)</title><rect x="25.7536%" y="517" width="0.1435%" height="15" fill="rgb(205,209,3)" fg:x="23690" fg:w="132"/><text x="26.0036%" y="527.50"></text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (132 samples, 0.14%)</title><rect x="25.7536%" y="501" width="0.1435%" height="15" fill="rgb(243,44,1)" fg:x="23690" fg:w="132"/><text x="26.0036%" y="511.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::finish (65 samples, 0.07%)</title><rect x="25.8265%" y="485" width="0.0707%" height="15" fill="rgb(206,159,16)" fg:x="23757" fg:w="65"/><text x="26.0765%" y="495.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (65 samples, 0.07%)</title><rect x="25.8265%" y="469" width="0.0707%" height="15" fill="rgb(244,77,30)" fg:x="23757" fg:w="65"/><text x="26.0765%" y="479.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (65 samples, 0.07%)</title><rect x="25.8265%" y="453" width="0.0707%" height="15" fill="rgb(218,69,12)" fg:x="23757" fg:w="65"/><text x="26.0765%" y="463.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (28 samples, 0.03%)</title><rect x="25.8667%" y="437" width="0.0304%" height="15" fill="rgb(212,87,7)" fg:x="23794" fg:w="28"/><text x="26.1167%" y="447.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (345 samples, 0.38%)</title><rect x="25.9015%" y="469" width="0.3751%" height="15" fill="rgb(245,114,25)" fg:x="23826" fg:w="345"/><text x="26.1515%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (16 samples, 0.02%)</title><rect x="26.2874%" y="421" width="0.0174%" height="15" fill="rgb(210,61,42)" fg:x="24181" fg:w="16"/><text x="26.5374%" y="431.50"></text></g><g><title>hello.exe`core::num::nonzero::NonZero&lt;u16&gt;::new (16 samples, 0.02%)</title><rect x="26.2874%" y="405" width="0.0174%" height="15" fill="rgb(211,52,33)" fg:x="24181" fg:w="16"/><text x="26.5374%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (39 samples, 0.04%)</title><rect x="26.2841%" y="437" width="0.0424%" height="15" fill="rgb(234,58,33)" fg:x="24178" fg:w="39"/><text x="26.5341%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (20 samples, 0.02%)</title><rect x="26.3048%" y="421" width="0.0217%" height="15" fill="rgb(220,115,36)" fg:x="24197" fg:w="20"/><text x="26.5548%" y="431.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.02%)</title><rect x="26.3048%" y="405" width="0.0217%" height="15" fill="rgb(243,153,54)" fg:x="24197" fg:w="20"/><text x="26.5548%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (11 samples, 0.01%)</title><rect x="26.3265%" y="437" width="0.0120%" height="15" fill="rgb(251,47,18)" fg:x="24217" fg:w="11"/><text x="26.5765%" y="447.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (20 samples, 0.02%)</title><rect x="26.7038%" y="261" width="0.0217%" height="15" fill="rgb(242,102,42)" fg:x="24564" fg:w="20"/><text x="26.9538%" y="271.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (310 samples, 0.34%)</title><rect x="26.3929%" y="277" width="0.3370%" height="15" fill="rgb(234,31,38)" fg:x="24278" fg:w="310"/><text x="26.6429%" y="287.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (445 samples, 0.48%)</title><rect x="26.3515%" y="405" width="0.4838%" height="15" fill="rgb(221,117,51)" fg:x="24240" fg:w="445"/><text x="26.6015%" y="415.50"></text></g><g><title>hello.exe`alloc::string::impl$23::hash (440 samples, 0.48%)</title><rect x="26.3570%" y="389" width="0.4783%" height="15" fill="rgb(212,20,18)" fg:x="24245" fg:w="440"/><text x="26.6070%" y="399.50"></text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (440 samples, 0.48%)</title><rect x="26.3570%" y="373" width="0.4783%" height="15" fill="rgb(245,133,36)" fg:x="24245" fg:w="440"/><text x="26.6070%" y="383.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (440 samples, 0.48%)</title><rect x="26.3570%" y="357" width="0.4783%" height="15" fill="rgb(212,6,19)" fg:x="24245" fg:w="440"/><text x="26.6070%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (440 samples, 0.48%)</title><rect x="26.3570%" y="341" width="0.4783%" height="15" fill="rgb(218,1,36)" fg:x="24245" fg:w="440"/><text x="26.6070%" y="351.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (440 samples, 0.48%)</title><rect x="26.3570%" y="325" width="0.4783%" height="15" fill="rgb(246,84,54)" fg:x="24245" fg:w="440"/><text x="26.6070%" y="335.50"></text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (438 samples, 0.48%)</title><rect x="26.3592%" y="309" width="0.4762%" height="15" fill="rgb(242,110,6)" fg:x="24247" fg:w="438"/><text x="26.6092%" y="319.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (437 samples, 0.48%)</title><rect x="26.3602%" y="293" width="0.4751%" height="15" fill="rgb(214,47,5)" fg:x="24248" fg:w="437"/><text x="26.6102%" y="303.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (97 samples, 0.11%)</title><rect x="26.7299%" y="277" width="0.1054%" height="15" fill="rgb(218,159,25)" fg:x="24588" fg:w="97"/><text x="26.9799%" y="287.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (61 samples, 0.07%)</title><rect x="26.7690%" y="261" width="0.0663%" height="15" fill="rgb(215,211,28)" fg:x="24624" fg:w="61"/><text x="27.0190%" y="271.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (43 samples, 0.05%)</title><rect x="26.8614%" y="357" width="0.0467%" height="15" fill="rgb(238,59,32)" fg:x="24709" fg:w="43"/><text x="27.1114%" y="367.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (30 samples, 0.03%)</title><rect x="26.9212%" y="341" width="0.0326%" height="15" fill="rgb(226,82,3)" fg:x="24764" fg:w="30"/><text x="27.1712%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::probe_seq (572 samples, 0.62%)</title><rect x="26.3385%" y="437" width="0.6218%" height="15" fill="rgb(240,164,32)" fg:x="24228" fg:w="572"/><text x="26.5885%" y="447.50"></text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (571 samples, 0.62%)</title><rect x="26.3396%" y="421" width="0.6207%" height="15" fill="rgb(232,46,7)" fg:x="24229" fg:w="571"/><text x="26.5896%" y="431.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::finish (112 samples, 0.12%)</title><rect x="26.8386%" y="405" width="0.1218%" height="15" fill="rgb(229,129,53)" fg:x="24688" fg:w="112"/><text x="27.0886%" y="415.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (112 samples, 0.12%)</title><rect x="26.8386%" y="389" width="0.1218%" height="15" fill="rgb(234,188,29)" fg:x="24688" fg:w="112"/><text x="27.0886%" y="399.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (112 samples, 0.12%)</title><rect x="26.8386%" y="373" width="0.1218%" height="15" fill="rgb(246,141,4)" fg:x="24688" fg:w="112"/><text x="27.0886%" y="383.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (43 samples, 0.05%)</title><rect x="26.9136%" y="357" width="0.0467%" height="15" fill="rgb(229,23,39)" fg:x="24757" fg:w="43"/><text x="27.1636%" y="367.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot (624 samples, 0.68%)</title><rect x="26.2841%" y="453" width="0.6784%" height="15" fill="rgb(206,12,3)" fg:x="24178" fg:w="624"/><text x="26.5341%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (633 samples, 0.69%)</title><rect x="26.2841%" y="469" width="0.6881%" height="15" fill="rgb(252,226,20)" fg:x="24178" fg:w="633"/><text x="26.5341%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,std::collections::hash::set::HashSet (998 samples, 1.08%)</title><rect x="25.8971%" y="517" width="1.0849%" height="15" fill="rgb(216,123,35)" fg:x="23822" fg:w="998"/><text x="26.1471%" y="527.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (998 samples, 1.08%)</title><rect x="25.8971%" y="501" width="1.0849%" height="15" fill="rgb(212,68,40)" fg:x="23822" fg:w="998"/><text x="26.1471%" y="511.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (998 samples, 1.08%)</title><rect x="25.8971%" y="485" width="1.0849%" height="15" fill="rgb(254,125,32)" fg:x="23822" fg:w="998"/><text x="26.1471%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (15 samples, 0.02%)</title><rect x="26.9919%" y="501" width="0.0163%" height="15" fill="rgb(253,97,22)" fg:x="24829" fg:w="15"/><text x="27.2419%" y="511.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::is_bucket_full (15 samples, 0.02%)</title><rect x="26.9919%" y="485" width="0.0163%" height="15" fill="rgb(241,101,14)" fg:x="24829" fg:w="15"/><text x="27.2419%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,std::collections::hash::set::HashSet (1,178 samples, 1.28%)</title><rect x="25.7504%" y="533" width="1.2806%" height="15" fill="rgb(238,103,29)" fg:x="23687" fg:w="1178"/><text x="26.0004%" y="543.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (45 samples, 0.05%)</title><rect x="26.9821%" y="517" width="0.0489%" height="15" fill="rgb(233,195,47)" fg:x="24820" fg:w="45"/><text x="27.2321%" y="527.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_byte (10 samples, 0.01%)</title><rect x="27.0201%" y="501" width="0.0109%" height="15" fill="rgb(246,218,30)" fg:x="24855" fg:w="10"/><text x="27.2701%" y="511.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.01%)</title><rect x="27.0201%" y="485" width="0.0109%" height="15" fill="rgb(219,145,47)" fg:x="24855" fg:w="10"/><text x="27.2701%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;::write(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (110 samples, 0.12%)</title><rect x="27.0310%" y="517" width="0.1196%" height="15" fill="rgb(243,12,26)" fg:x="24865" fg:w="110"/><text x="27.2810%" y="527.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::write(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;*, tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (110 samples, 0.12%)</title><rect x="27.0310%" y="501" width="0.1196%" height="15" fill="rgb(214,87,16)" fg:x="24865" fg:w="110"/><text x="27.2810%" y="511.50"></text></g><g><title>hello.exe`core::ptr::write(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;*, tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (110 samples, 0.12%)</title><rect x="27.0310%" y="485" width="0.1196%" height="15" fill="rgb(208,99,42)" fg:x="24865" fg:w="110"/><text x="27.2810%" y="495.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(enum2$&lt;core::option::Option&lt;std::collections::hash::set::HashSet (1,311 samples, 1.43%)</title><rect x="25.7308%" y="565" width="1.4252%" height="15" fill="rgb(253,99,2)" fg:x="23669" fg:w="1311"/><text x="25.9808%" y="575.50"></text></g><g><title>hello.exe`hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(alloc::string::String, std::collections::hash::set::HashSet (1,311 samples, 1.43%)</title><rect x="25.7308%" y="549" width="1.4252%" height="15" fill="rgb(220,168,23)" fg:x="23669" fg:w="1311"/><text x="25.9808%" y="559.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (115 samples, 0.13%)</title><rect x="27.0310%" y="533" width="0.1250%" height="15" fill="rgb(242,38,24)" fg:x="24865" fg:w="115"/><text x="27.2810%" y="543.50"></text></g><g><title>`0x7FF813B6EA31 (24 samples, 0.03%)</title><rect x="27.1604%" y="437" width="0.0261%" height="15" fill="rgb(225,182,9)" fg:x="24984" fg:w="24"/><text x="27.4104%" y="447.50"></text></g><g><title>`0x7FF813B6E2A9 (24 samples, 0.03%)</title><rect x="27.1604%" y="421" width="0.0261%" height="15" fill="rgb(243,178,37)" fg:x="24984" fg:w="24"/><text x="27.4104%" y="431.50"></text></g><g><title>`0x7FF813B6ED55 (24 samples, 0.03%)</title><rect x="27.1604%" y="405" width="0.0261%" height="15" fill="rgb(232,139,19)" fg:x="24984" fg:w="24"/><text x="27.4104%" y="415.50"></text></g><g><title>`0x7FF813B75B74 (29 samples, 0.03%)</title><rect x="27.1560%" y="485" width="0.0315%" height="15" fill="rgb(225,201,24)" fg:x="24980" fg:w="29"/><text x="27.4060%" y="495.50"></text></g><g><title>`0x7FF813B765F6 (27 samples, 0.03%)</title><rect x="27.1582%" y="469" width="0.0294%" height="15" fill="rgb(221,47,46)" fg:x="24982" fg:w="27"/><text x="27.4082%" y="479.50"></text></g><g><title>`0x7FF813B6E430 (25 samples, 0.03%)</title><rect x="27.1604%" y="453" width="0.0272%" height="15" fill="rgb(249,23,13)" fg:x="24984" fg:w="25"/><text x="27.4104%" y="463.50"></text></g><g><title>`0x7FF813B747B1 (30 samples, 0.03%)</title><rect x="27.1560%" y="501" width="0.0326%" height="15" fill="rgb(219,9,5)" fg:x="24980" fg:w="30"/><text x="27.4060%" y="511.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place (46 samples, 0.05%)</title><rect x="27.1560%" y="565" width="0.0500%" height="15" fill="rgb(254,171,16)" fg:x="24980" fg:w="46"/><text x="27.4060%" y="575.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::vec::Vec (46 samples, 0.05%)</title><rect x="27.1560%" y="549" width="0.0500%" height="15" fill="rgb(230,171,20)" fg:x="24980" fg:w="46"/><text x="27.4060%" y="559.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (46 samples, 0.05%)</title><rect x="27.1560%" y="533" width="0.0500%" height="15" fill="rgb(210,71,41)" fg:x="24980" fg:w="46"/><text x="27.4060%" y="543.50"></text></g><g><title>hello.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (46 samples, 0.05%)</title><rect x="27.1560%" y="517" width="0.0500%" height="15" fill="rgb(206,173,20)" fg:x="24980" fg:w="46"/><text x="27.4060%" y="527.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (12 samples, 0.01%)</title><rect x="27.1930%" y="501" width="0.0130%" height="15" fill="rgb(233,88,34)" fg:x="25014" fg:w="12"/><text x="27.4430%" y="511.50"></text></g><g><title>`0x7FF807A61252 (32 samples, 0.03%)</title><rect x="29.6901%" y="485" width="0.0348%" height="15" fill="rgb(223,209,46)" fg:x="27311" fg:w="32"/><text x="29.9401%" y="495.50"></text></g><g><title>hello.exe`core::slice::cmp::impl$5::equal (71 samples, 0.08%)</title><rect x="29.6705%" y="501" width="0.0772%" height="15" fill="rgb(250,43,18)" fg:x="27293" fg:w="71"/><text x="29.9205%" y="511.50"></text></g><g><title>hello.exe`memcmp (21 samples, 0.02%)</title><rect x="29.7249%" y="485" width="0.0228%" height="15" fill="rgb(208,13,10)" fg:x="27343" fg:w="21"/><text x="29.9749%" y="495.50"></text></g><g><title>hello.exe`core::slice::index::impl$0::index (91 samples, 0.10%)</title><rect x="29.6705%" y="517" width="0.0989%" height="15" fill="rgb(212,200,36)" fg:x="27293" fg:w="91"/><text x="29.9205%" y="527.50"></text></g><g><title>hello.exe`core::slice::index::impl$5::index (19 samples, 0.02%)</title><rect x="29.7488%" y="501" width="0.0207%" height="15" fill="rgb(225,90,30)" fg:x="27365" fg:w="19"/><text x="29.9988%" y="511.50"></text></g><g><title>hello.exe`core::slice::index::impl$4::index (19 samples, 0.02%)</title><rect x="29.7488%" y="485" width="0.0207%" height="15" fill="rgb(236,182,39)" fg:x="27365" fg:w="19"/><text x="29.9988%" y="495.50"></text></g><g><title>hello.exe`core::ptr::non_null::impl$12::eq (37 samples, 0.04%)</title><rect x="29.8694%" y="485" width="0.0402%" height="15" fill="rgb(212,144,35)" fg:x="27476" fg:w="37"/><text x="30.1194%" y="495.50"></text></g><g><title>hello.exe`core::str::pattern::TwoWaySearcher::byteset_create (135 samples, 0.15%)</title><rect x="29.7694%" y="517" width="0.1468%" height="15" fill="rgb(228,63,44)" fg:x="27384" fg:w="135"/><text x="30.0194%" y="527.50"></text></g><g><title>hello.exe`core::slice::iter::impl$181::fold (135 samples, 0.15%)</title><rect x="29.7694%" y="501" width="0.1468%" height="15" fill="rgb(228,109,6)" fg:x="27384" fg:w="135"/><text x="30.0194%" y="511.50"></text></g><g><title>hello.exe`core::str::pattern::TwoWaySearcher::maximal_suffix (56 samples, 0.06%)</title><rect x="29.9162%" y="517" width="0.0609%" height="15" fill="rgb(238,117,24)" fg:x="27519" fg:w="56"/><text x="30.1662%" y="527.50"></text></g><g><title>hello.exe`core::str::pattern::StrSearcher::new (2,558 samples, 2.78%)</title><rect x="27.3256%" y="549" width="2.7808%" height="15" fill="rgb(242,26,26)" fg:x="25136" fg:w="2558"/><text x="27.5756%" y="559.50">he..</text></g><g><title>hello.exe`core::str::pattern::TwoWaySearcher::new (422 samples, 0.46%)</title><rect x="29.6477%" y="533" width="0.4588%" height="15" fill="rgb(221,92,48)" fg:x="27272" fg:w="422"/><text x="29.8977%" y="543.50"></text></g><g><title>hello.exe`core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (119 samples, 0.13%)</title><rect x="29.9771%" y="517" width="0.1294%" height="15" fill="rgb(209,209,32)" fg:x="27575" fg:w="119"/><text x="30.2271%" y="527.50"></text></g><g><title>hello.exe`core::str::impl$0::split(ref$&lt;str$&gt;, ref$ (2,839 samples, 3.09%)</title><rect x="27.2060%" y="565" width="3.0863%" height="15" fill="rgb(221,70,22)" fg:x="25026" fg:w="2839"/><text x="27.4560%" y="575.50">hel..</text></g><g><title>hello.exe`core::str::pattern::impl$30::into_searcher(ref$&lt;str$&gt;, ref$ (171 samples, 0.19%)</title><rect x="30.1064%" y="549" width="0.1859%" height="15" fill="rgb(248,145,5)" fg:x="27694" fg:w="171"/><text x="30.3564%" y="559.50"></text></g><g><title>hello.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (39 samples, 0.04%)</title><rect x="35.4398%" y="501" width="0.0424%" height="15" fill="rgb(226,116,26)" fg:x="32600" fg:w="39"/><text x="35.6898%" y="511.50"></text></g><g><title>hello.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (39 samples, 0.04%)</title><rect x="35.4398%" y="485" width="0.0424%" height="15" fill="rgb(244,5,17)" fg:x="32600" fg:w="39"/><text x="35.6898%" y="495.50"></text></g><g><title>hello.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (39 samples, 0.04%)</title><rect x="35.4398%" y="469" width="0.0424%" height="15" fill="rgb(252,159,33)" fg:x="32600" fg:w="39"/><text x="35.6898%" y="479.50"></text></g><g><title>hello.exe`core::cmp::impls::impl$54::lt (12 samples, 0.01%)</title><rect x="35.4691%" y="453" width="0.0130%" height="15" fill="rgb(206,71,0)" fg:x="32627" fg:w="12"/><text x="35.7191%" y="463.50"></text></g><g><title>hello.exe`core::iter::range::impl$6::next(core::ops::range::Range (101 samples, 0.11%)</title><rect x="35.4822%" y="501" width="0.1098%" height="15" fill="rgb(233,118,54)" fg:x="32639" fg:w="101"/><text x="35.7322%" y="511.50"></text></g><g><title>hello.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (101 samples, 0.11%)</title><rect x="35.4822%" y="485" width="0.1098%" height="15" fill="rgb(234,83,48)" fg:x="32639" fg:w="101"/><text x="35.7322%" y="495.50"></text></g><g><title>hello.exe`core::cmp::impls::impl$54::lt (44 samples, 0.05%)</title><rect x="35.5442%" y="469" width="0.0478%" height="15" fill="rgb(228,3,54)" fg:x="32696" fg:w="44"/><text x="35.7942%" y="479.50"></text></g><g><title>hello.exe`core::str::pattern::TwoWaySearcher::next(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (4,771 samples, 5.19%)</title><rect x="30.7815%" y="517" width="5.1866%" height="15" fill="rgb(226,155,13)" fg:x="28315" fg:w="4771"/><text x="31.0315%" y="527.50">hello...</text></g><g><title>hello.exe`core::slice::impl$0::get(ref$&lt;slice2$ (346 samples, 0.38%)</title><rect x="35.5920%" y="501" width="0.3761%" height="15" fill="rgb(241,28,37)" fg:x="32740" fg:w="346"/><text x="35.8420%" y="511.50"></text></g><g><title>hello.exe`core::slice::index::impl$2::get(unsigned long long, ref$&lt;slice2$ (346 samples, 0.38%)</title><rect x="35.5920%" y="485" width="0.3761%" height="15" fill="rgb(233,93,10)" fg:x="32740" fg:w="346"/><text x="35.8420%" y="495.50"></text></g><g><title>hello.exe`core::str::pattern::impl$32::next_match (5,306 samples, 5.77%)</title><rect x="30.6076%" y="533" width="5.7682%" height="15" fill="rgb(225,113,19)" fg:x="28155" fg:w="5306"/><text x="30.8576%" y="543.50">hello.e..</text></g><g><title>hello.exe`core::str::pattern::impl$32::next (375 samples, 0.41%)</title><rect x="35.9681%" y="517" width="0.4077%" height="15" fill="rgb(241,2,18)" fg:x="33086" fg:w="375"/><text x="36.2181%" y="527.50"></text></g><g><title>hello.exe`core::str::traits::impl$4::index(ref$&lt;str$&gt;, core::ops::range::RangeFrom (31 samples, 0.03%)</title><rect x="36.3421%" y="501" width="0.0337%" height="15" fill="rgb(228,207,21)" fg:x="33430" fg:w="31"/><text x="36.5921%" y="511.50"></text></g><g><title>hello.exe`core::str::traits::impl$10::index(core::ops::range::RangeFrom&lt;usize&gt;, ref$ (31 samples, 0.03%)</title><rect x="36.3421%" y="485" width="0.0337%" height="15" fill="rgb(213,211,35)" fg:x="33430" fg:w="31"/><text x="36.5921%" y="495.50"></text></g><g><title>hello.exe`core::str::traits::impl$10::get(core::ops::range::RangeFrom&lt;usize&gt;, ref$ (31 samples, 0.03%)</title><rect x="36.3421%" y="469" width="0.0337%" height="15" fill="rgb(209,83,10)" fg:x="33430" fg:w="31"/><text x="36.5921%" y="479.50"></text></g><g><title>hello.exe`core::str::impl$0::is_char_boundary(ref$ (31 samples, 0.03%)</title><rect x="36.3421%" y="453" width="0.0337%" height="15" fill="rgb(209,164,1)" fg:x="33430" fg:w="31"/><text x="36.5921%" y="463.50"></text></g><g><title>hello.exe`core::num::impl$6::is_utf8_char_boundary (31 samples, 0.03%)</title><rect x="36.3421%" y="437" width="0.0337%" height="15" fill="rgb(213,184,43)" fg:x="33430" fg:w="31"/><text x="36.5921%" y="447.50"></text></g><g><title>`0x7FF813B74760 (46 samples, 0.05%)</title><rect x="37.2020%" y="517" width="0.0500%" height="15" fill="rgb(231,61,34)" fg:x="34221" fg:w="46"/><text x="37.4520%" y="527.50"></text></g><g><title>`0x7FF813B74777 (49 samples, 0.05%)</title><rect x="37.2542%" y="517" width="0.0533%" height="15" fill="rgb(235,75,3)" fg:x="34269" fg:w="49"/><text x="37.5042%" y="527.50"></text></g><g><title>`0x7FF813B7479E (43 samples, 0.05%)</title><rect x="37.3259%" y="517" width="0.0467%" height="15" fill="rgb(220,106,47)" fg:x="34335" fg:w="43"/><text x="37.5759%" y="527.50"></text></g><g><title>`0x7FF813B7571F (46 samples, 0.05%)</title><rect x="37.4401%" y="501" width="0.0500%" height="15" fill="rgb(210,196,33)" fg:x="34440" fg:w="46"/><text x="37.6901%" y="511.50"></text></g><g><title>`0x7FF813B75731 (42 samples, 0.05%)</title><rect x="37.5020%" y="501" width="0.0457%" height="15" fill="rgb(229,154,42)" fg:x="34497" fg:w="42"/><text x="37.7520%" y="511.50"></text></g><g><title>`0x7FF813B7592A (15 samples, 0.02%)</title><rect x="37.5607%" y="501" width="0.0163%" height="15" fill="rgb(228,114,26)" fg:x="34551" fg:w="15"/><text x="37.8107%" y="511.50"></text></g><g><title>`0x7FF813B7592E (61 samples, 0.07%)</title><rect x="37.5770%" y="501" width="0.0663%" height="15" fill="rgb(208,144,1)" fg:x="34566" fg:w="61"/><text x="37.8270%" y="511.50"></text></g><g><title>`0x7FF813B75B11 (56 samples, 0.06%)</title><rect x="37.6673%" y="501" width="0.0609%" height="15" fill="rgb(239,112,37)" fg:x="34649" fg:w="56"/><text x="37.9173%" y="511.50"></text></g><g><title>`0x7FF813B75B9C (52 samples, 0.06%)</title><rect x="37.7488%" y="501" width="0.0565%" height="15" fill="rgb(210,96,50)" fg:x="34724" fg:w="52"/><text x="37.9988%" y="511.50"></text></g><g><title>`0x7FF813B75BA1 (72 samples, 0.08%)</title><rect x="37.8053%" y="501" width="0.0783%" height="15" fill="rgb(222,178,2)" fg:x="34776" fg:w="72"/><text x="38.0553%" y="511.50"></text></g><g><title>`0x7FF813B74837 (56 samples, 0.06%)</title><rect x="37.8227%" y="485" width="0.0609%" height="15" fill="rgb(226,74,18)" fg:x="34792" fg:w="56"/><text x="38.0727%" y="495.50"></text></g><g><title>`0x7FF813B75BC9 (53 samples, 0.06%)</title><rect x="37.8999%" y="501" width="0.0576%" height="15" fill="rgb(225,67,54)" fg:x="34863" fg:w="53"/><text x="38.1499%" y="511.50"></text></g><g><title>`0x7FF813BF6EFE (55 samples, 0.06%)</title><rect x="37.9619%" y="501" width="0.0598%" height="15" fill="rgb(251,92,32)" fg:x="34920" fg:w="55"/><text x="38.2119%" y="511.50"></text></g><g><title>`0x7FF813BF6F21 (45 samples, 0.05%)</title><rect x="38.0467%" y="501" width="0.0489%" height="15" fill="rgb(228,149,22)" fg:x="34998" fg:w="45"/><text x="38.2967%" y="511.50"></text></g><g><title>`0x7FF813BF6F2A (20 samples, 0.02%)</title><rect x="38.1043%" y="501" width="0.0217%" height="15" fill="rgb(243,54,13)" fg:x="35051" fg:w="20"/><text x="38.3543%" y="511.50"></text></g><g><title>`0x7FF813BF6F3B (25 samples, 0.03%)</title><rect x="38.1293%" y="501" width="0.0272%" height="15" fill="rgb(243,180,28)" fg:x="35074" fg:w="25"/><text x="38.3793%" y="511.50"></text></g><g><title>`0x7FF813BF6F43 (39 samples, 0.04%)</title><rect x="38.1619%" y="501" width="0.0424%" height="15" fill="rgb(208,167,24)" fg:x="35104" fg:w="39"/><text x="38.4119%" y="511.50"></text></g><g><title>`0x7FF813BF6F58 (31 samples, 0.03%)</title><rect x="38.2097%" y="501" width="0.0337%" height="15" fill="rgb(245,73,45)" fg:x="35148" fg:w="31"/><text x="38.4597%" y="511.50"></text></g><g><title>`0x7FF813BF6F5F (49 samples, 0.05%)</title><rect x="38.2456%" y="501" width="0.0533%" height="15" fill="rgb(237,203,48)" fg:x="35181" fg:w="49"/><text x="38.4956%" y="511.50"></text></g><g><title>`0x7FF813BF6F63 (44 samples, 0.05%)</title><rect x="38.2989%" y="501" width="0.0478%" height="15" fill="rgb(211,197,16)" fg:x="35230" fg:w="44"/><text x="38.5489%" y="511.50"></text></g><g><title>`0x7FF813BF6F66 (10 samples, 0.01%)</title><rect x="38.3467%" y="501" width="0.0109%" height="15" fill="rgb(243,99,51)" fg:x="35274" fg:w="10"/><text x="38.5967%" y="511.50"></text></g><g><title>`0x7FF813BF6F6E (18 samples, 0.02%)</title><rect x="38.3576%" y="501" width="0.0196%" height="15" fill="rgb(215,123,29)" fg:x="35284" fg:w="18"/><text x="38.6076%" y="511.50"></text></g><g><title>`0x7FF813BF6F73 (25 samples, 0.03%)</title><rect x="38.3793%" y="501" width="0.0272%" height="15" fill="rgb(239,186,37)" fg:x="35304" fg:w="25"/><text x="38.6293%" y="511.50"></text></g><g><title>`0x7FF813BF6F76 (27 samples, 0.03%)</title><rect x="38.4065%" y="501" width="0.0294%" height="15" fill="rgb(252,136,39)" fg:x="35329" fg:w="27"/><text x="38.6565%" y="511.50"></text></g><g><title>`0x7FF813BF6F79 (37 samples, 0.04%)</title><rect x="38.4359%" y="501" width="0.0402%" height="15" fill="rgb(223,213,32)" fg:x="35356" fg:w="37"/><text x="38.6859%" y="511.50"></text></g><g><title>`0x7FF813BF6F7C (110 samples, 0.12%)</title><rect x="38.4761%" y="501" width="0.1196%" height="15" fill="rgb(233,115,5)" fg:x="35393" fg:w="110"/><text x="38.7261%" y="511.50"></text></g><g><title>`0x7FF813BF6F7F (41 samples, 0.04%)</title><rect x="38.5957%" y="501" width="0.0446%" height="15" fill="rgb(207,226,44)" fg:x="35503" fg:w="41"/><text x="38.8457%" y="511.50"></text></g><g><title>`0x7FF813BF6F82 (40 samples, 0.04%)</title><rect x="38.6402%" y="501" width="0.0435%" height="15" fill="rgb(208,126,0)" fg:x="35544" fg:w="40"/><text x="38.8902%" y="511.50"></text></g><g><title>`0x7FF813BF6F92 (10 samples, 0.01%)</title><rect x="38.6837%" y="501" width="0.0109%" height="15" fill="rgb(244,66,21)" fg:x="35584" fg:w="10"/><text x="38.9337%" y="511.50"></text></g><g><title>`0x7FF813BF6F94 (56 samples, 0.06%)</title><rect x="38.6946%" y="501" width="0.0609%" height="15" fill="rgb(222,97,12)" fg:x="35594" fg:w="56"/><text x="38.9446%" y="511.50"></text></g><g><title>`0x7FF813BF6FFB (50 samples, 0.05%)</title><rect x="38.7663%" y="501" width="0.0544%" height="15" fill="rgb(219,213,19)" fg:x="35660" fg:w="50"/><text x="39.0163%" y="511.50"></text></g><g><title>`0x7FF813BF701D (64 samples, 0.07%)</title><rect x="38.8316%" y="501" width="0.0696%" height="15" fill="rgb(252,169,30)" fg:x="35720" fg:w="64"/><text x="39.0816%" y="511.50"></text></g><g><title>`0x7FF813BF702A (294 samples, 0.32%)</title><rect x="38.9022%" y="501" width="0.3196%" height="15" fill="rgb(206,32,51)" fg:x="35785" fg:w="294"/><text x="39.1522%" y="511.50"></text></g><g><title>`0x7FF813BF7045 (60 samples, 0.07%)</title><rect x="39.2251%" y="501" width="0.0652%" height="15" fill="rgb(250,172,42)" fg:x="36082" fg:w="60"/><text x="39.4751%" y="511.50"></text></g><g><title>`0x7FF813BF706A (91 samples, 0.10%)</title><rect x="39.3001%" y="501" width="0.0989%" height="15" fill="rgb(209,34,43)" fg:x="36151" fg:w="91"/><text x="39.5501%" y="511.50"></text></g><g><title>`0x7FF813BF70AB (71 samples, 0.08%)</title><rect x="39.4001%" y="501" width="0.0772%" height="15" fill="rgb(223,11,35)" fg:x="36243" fg:w="71"/><text x="39.6501%" y="511.50"></text></g><g><title>`0x7FF813BF70BA (11 samples, 0.01%)</title><rect x="39.4784%" y="501" width="0.0120%" height="15" fill="rgb(251,219,26)" fg:x="36315" fg:w="11"/><text x="39.7284%" y="511.50"></text></g><g><title>`0x7FF813BF70C5 (56 samples, 0.06%)</title><rect x="39.4904%" y="501" width="0.0609%" height="15" fill="rgb(231,119,3)" fg:x="36326" fg:w="56"/><text x="39.7404%" y="511.50"></text></g><g><title>`0x7FF813B747B1 (2,023 samples, 2.20%)</title><rect x="37.3759%" y="517" width="2.1992%" height="15" fill="rgb(216,97,11)" fg:x="34381" fg:w="2023"/><text x="37.6259%" y="527.50">`..</text></g><g><title>`0x7FF813B747C6 (74 samples, 0.08%)</title><rect x="39.5849%" y="517" width="0.0804%" height="15" fill="rgb(223,59,9)" fg:x="36413" fg:w="74"/><text x="39.8349%" y="527.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (14 samples, 0.02%)</title><rect x="39.6665%" y="453" width="0.0152%" height="15" fill="rgb(233,93,31)" fg:x="36488" fg:w="14"/><text x="39.9165%" y="463.50"></text></g><g><title>hello.exe`alloc::alloc::dealloc (14 samples, 0.02%)</title><rect x="39.6665%" y="437" width="0.0152%" height="15" fill="rgb(239,81,33)" fg:x="36488" fg:w="14"/><text x="39.9165%" y="447.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place (58 samples, 0.06%)</title><rect x="39.6654%" y="517" width="0.0631%" height="15" fill="rgb(213,120,34)" fg:x="36487" fg:w="58"/><text x="39.9154%" y="527.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::vec::Vec (58 samples, 0.06%)</title><rect x="39.6654%" y="501" width="0.0631%" height="15" fill="rgb(243,49,53)" fg:x="36487" fg:w="58"/><text x="39.9154%" y="511.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (58 samples, 0.06%)</title><rect x="39.6654%" y="485" width="0.0631%" height="15" fill="rgb(247,216,33)" fg:x="36487" fg:w="58"/><text x="39.9154%" y="495.50"></text></g><g><title>hello.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (58 samples, 0.06%)</title><rect x="39.6654%" y="469" width="0.0631%" height="15" fill="rgb(226,26,14)" fg:x="36487" fg:w="58"/><text x="39.9154%" y="479.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::current_memory (43 samples, 0.05%)</title><rect x="39.6817%" y="453" width="0.0467%" height="15" fill="rgb(215,49,53)" fg:x="36502" fg:w="43"/><text x="39.9317%" y="463.50"></text></g><g><title>hello.exe`hashbrown::map::make_hash (77 samples, 0.08%)</title><rect x="39.7284%" y="517" width="0.0837%" height="15" fill="rgb(245,162,40)" fg:x="36545" fg:w="77"/><text x="39.9784%" y="527.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (1,359 samples, 1.48%)</title><rect x="41.5211%" y="325" width="1.4774%" height="15" fill="rgb(229,68,17)" fg:x="38194" fg:w="1359"/><text x="41.7711%" y="335.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (1,978 samples, 2.15%)</title><rect x="41.2428%" y="341" width="2.1503%" height="15" fill="rgb(213,182,10)" fg:x="37938" fg:w="1978"/><text x="41.4928%" y="351.50">h..</text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (363 samples, 0.39%)</title><rect x="42.9985%" y="325" width="0.3946%" height="15" fill="rgb(245,125,30)" fg:x="39553" fg:w="363"/><text x="43.2485%" y="335.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (84 samples, 0.09%)</title><rect x="43.3931%" y="341" width="0.0913%" height="15" fill="rgb(232,202,2)" fg:x="39916" fg:w="84"/><text x="43.6431%" y="351.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (3,104 samples, 3.37%)</title><rect x="40.1187%" y="469" width="3.3744%" height="15" fill="rgb(237,140,51)" fg:x="36904" fg:w="3104"/><text x="40.3687%" y="479.50">hel..</text></g><g><title>hello.exe`alloc::string::impl$23::hash (3,051 samples, 3.32%)</title><rect x="40.1763%" y="453" width="3.3168%" height="15" fill="rgb(236,157,25)" fg:x="36957" fg:w="3051"/><text x="40.4263%" y="463.50">hel..</text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (3,051 samples, 3.32%)</title><rect x="40.1763%" y="437" width="3.3168%" height="15" fill="rgb(219,209,0)" fg:x="36957" fg:w="3051"/><text x="40.4263%" y="447.50">hel..</text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (3,051 samples, 3.32%)</title><rect x="40.1763%" y="421" width="3.3168%" height="15" fill="rgb(240,116,54)" fg:x="36957" fg:w="3051"/><text x="40.4263%" y="431.50">hel..</text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (3,051 samples, 3.32%)</title><rect x="40.1763%" y="405" width="3.3168%" height="15" fill="rgb(216,10,36)" fg:x="36957" fg:w="3051"/><text x="40.4263%" y="415.50">hel..</text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (3,051 samples, 3.32%)</title><rect x="40.1763%" y="389" width="3.3168%" height="15" fill="rgb(222,72,44)" fg:x="36957" fg:w="3051"/><text x="40.4263%" y="399.50">hel..</text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (3,040 samples, 3.30%)</title><rect x="40.1883%" y="373" width="3.3048%" height="15" fill="rgb(232,159,9)" fg:x="36968" fg:w="3040"/><text x="40.4383%" y="383.50">hel..</text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (2,952 samples, 3.21%)</title><rect x="40.2840%" y="357" width="3.2091%" height="15" fill="rgb(210,39,32)" fg:x="37056" fg:w="2952"/><text x="40.5340%" y="367.50">hel..</text></g><g><title>hello.exe`std::hash::random::impl$1::build_hasher (348 samples, 0.38%)</title><rect x="43.4931%" y="469" width="0.3783%" height="15" fill="rgb(216,194,45)" fg:x="40008" fg:w="348"/><text x="43.7431%" y="479.50"></text></g><g><title>hello.exe`core::hash::sip::SipHasher13::new_with_keys (225 samples, 0.24%)</title><rect x="43.6268%" y="453" width="0.2446%" height="15" fill="rgb(218,18,35)" fg:x="40131" fg:w="225"/><text x="43.8768%" y="463.50"></text></g><g><title>hello.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (225 samples, 0.24%)</title><rect x="43.6268%" y="437" width="0.2446%" height="15" fill="rgb(207,83,51)" fg:x="40131" fg:w="225"/><text x="43.8768%" y="447.50"></text></g><g><title>hello.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (225 samples, 0.24%)</title><rect x="43.6268%" y="421" width="0.2446%" height="15" fill="rgb(225,63,43)" fg:x="40131" fg:w="225"/><text x="43.8768%" y="431.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (402 samples, 0.44%)</title><rect x="44.5650%" y="421" width="0.4370%" height="15" fill="rgb(207,57,36)" fg:x="40994" fg:w="402"/><text x="44.8150%" y="431.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (122 samples, 0.13%)</title><rect x="44.8694%" y="405" width="0.1326%" height="15" fill="rgb(216,99,33)" fg:x="41274" fg:w="122"/><text x="45.1194%" y="415.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (177 samples, 0.19%)</title><rect x="45.1640%" y="405" width="0.1924%" height="15" fill="rgb(225,42,16)" fg:x="41545" fg:w="177"/><text x="45.4140%" y="415.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (414 samples, 0.45%)</title><rect x="45.0020%" y="421" width="0.4501%" height="15" fill="rgb(220,201,45)" fg:x="41396" fg:w="414"/><text x="45.2520%" y="431.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (88 samples, 0.10%)</title><rect x="45.3564%" y="405" width="0.0957%" height="15" fill="rgb(225,33,4)" fg:x="41722" fg:w="88"/><text x="45.6064%" y="415.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (848 samples, 0.92%)</title><rect x="45.6314%" y="405" width="0.9219%" height="15" fill="rgb(224,33,50)" fg:x="41975" fg:w="848"/><text x="45.8814%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (6,292 samples, 6.84%)</title><rect x="39.9089%" y="501" width="6.8401%" height="15" fill="rgb(246,198,51)" fg:x="36711" fg:w="6292"/><text x="40.1589%" y="511.50">hello.exe..</text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (6,232 samples, 6.77%)</title><rect x="39.9741%" y="485" width="6.7749%" height="15" fill="rgb(205,22,4)" fg:x="36771" fg:w="6232"/><text x="40.2241%" y="495.50">hello.exe..</text></g><g><title>hello.exe`std::hash::random::impl$4::finish (2,647 samples, 2.88%)</title><rect x="43.8714%" y="469" width="2.8776%" height="15" fill="rgb(206,3,8)" fg:x="40356" fg:w="2647"/><text x="44.1214%" y="479.50">he..</text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (2,647 samples, 2.88%)</title><rect x="43.8714%" y="453" width="2.8776%" height="15" fill="rgb(251,23,15)" fg:x="40356" fg:w="2647"/><text x="44.1214%" y="463.50">he..</text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (2,647 samples, 2.88%)</title><rect x="43.8714%" y="437" width="2.8776%" height="15" fill="rgb(252,88,28)" fg:x="40356" fg:w="2647"/><text x="44.1214%" y="447.50">he..</text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (1,193 samples, 1.30%)</title><rect x="45.4521%" y="421" width="1.2969%" height="15" fill="rgb(212,127,14)" fg:x="41810" fg:w="1193"/><text x="45.7021%" y="431.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (180 samples, 0.20%)</title><rect x="46.5533%" y="405" width="0.1957%" height="15" fill="rgb(247,145,37)" fg:x="42823" fg:w="180"/><text x="46.8033%" y="415.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (218 samples, 0.24%)</title><rect x="46.7827%" y="453" width="0.2370%" height="15" fill="rgb(209,117,53)" fg:x="43034" fg:w="218"/><text x="47.0327%" y="463.50"></text></g><g><title>`0x7FF813BF6F2A (35 samples, 0.04%)</title><rect x="47.1056%" y="341" width="0.0380%" height="15" fill="rgb(212,90,42)" fg:x="43331" fg:w="35"/><text x="47.3556%" y="351.50"></text></g><g><title>`0x7FF813BF6F3B (16 samples, 0.02%)</title><rect x="47.1458%" y="341" width="0.0174%" height="15" fill="rgb(218,164,37)" fg:x="43368" fg:w="16"/><text x="47.3958%" y="351.50"></text></g><g><title>`0x7FF813BF6F3F (14 samples, 0.02%)</title><rect x="47.1632%" y="341" width="0.0152%" height="15" fill="rgb(246,65,34)" fg:x="43384" fg:w="14"/><text x="47.4132%" y="351.50"></text></g><g><title>`0x7FF813BF6F58 (15 samples, 0.02%)</title><rect x="47.1817%" y="341" width="0.0163%" height="15" fill="rgb(231,100,33)" fg:x="43401" fg:w="15"/><text x="47.4317%" y="351.50"></text></g><g><title>`0x7FF813BF6F63 (10 samples, 0.01%)</title><rect x="47.2001%" y="341" width="0.0109%" height="15" fill="rgb(228,126,14)" fg:x="43418" fg:w="10"/><text x="47.4501%" y="351.50"></text></g><g><title>`0x7FF813BF702A (17 samples, 0.02%)</title><rect x="47.2436%" y="341" width="0.0185%" height="15" fill="rgb(215,173,21)" fg:x="43458" fg:w="17"/><text x="47.4936%" y="351.50"></text></g><g><title>`0x7FF813BF706A (10 samples, 0.01%)</title><rect x="47.2675%" y="341" width="0.0109%" height="15" fill="rgb(210,6,40)" fg:x="43480" fg:w="10"/><text x="47.5175%" y="351.50"></text></g><g><title>`0x7FF813B747B1 (240 samples, 0.26%)</title><rect x="47.0403%" y="357" width="0.2609%" height="15" fill="rgb(212,48,18)" fg:x="43271" fg:w="240"/><text x="47.2903%" y="367.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (269 samples, 0.29%)</title><rect x="47.0208%" y="389" width="0.2924%" height="15" fill="rgb(230,214,11)" fg:x="43253" fg:w="269"/><text x="47.2708%" y="399.50"></text></g><g><title>hello.exe`alloc::alloc::dealloc (269 samples, 0.29%)</title><rect x="47.0208%" y="373" width="0.2924%" height="15" fill="rgb(254,105,39)" fg:x="43253" fg:w="269"/><text x="47.2708%" y="383.50"></text></g><g><title>hello.exe`core::ptr::drop_in_place(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0 (270 samples, 0.29%)</title><rect x="47.0208%" y="453" width="0.2935%" height="15" fill="rgb(245,158,5)" fg:x="43253" fg:w="270"/><text x="47.2708%" y="463.50"></text></g><g><title>hello.exe`hashbrown::scopeguard::impl$3::drop(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0 (270 samples, 0.29%)</title><rect x="47.0208%" y="437" width="0.2935%" height="15" fill="rgb(249,208,11)" fg:x="43253" fg:w="270"/><text x="47.2708%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$12::prepare_resize::closure$0(hashbrown::raw::impl$12::prepare_resize::closure_env$0 (270 samples, 0.29%)</title><rect x="47.0208%" y="421" width="0.2935%" height="15" fill="rgb(210,39,28)" fg:x="43253" fg:w="270"/><text x="47.2708%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::free_buckets (270 samples, 0.29%)</title><rect x="47.0208%" y="405" width="0.2935%" height="15" fill="rgb(211,56,53)" fg:x="43253" fg:w="270"/><text x="47.2708%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::bucket_ptr (52 samples, 0.06%)</title><rect x="47.3143%" y="453" width="0.0565%" height="15" fill="rgb(226,201,30)" fg:x="43523" fg:w="52"/><text x="47.5643%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::data_end (50 samples, 0.05%)</title><rect x="47.3165%" y="437" width="0.0544%" height="15" fill="rgb(239,101,34)" fg:x="43525" fg:w="50"/><text x="47.5665%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::full_buckets_indices (259 samples, 0.28%)</title><rect x="47.3708%" y="453" width="0.2816%" height="15" fill="rgb(226,209,5)" fg:x="43575" fg:w="259"/><text x="47.6208%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::load_aligned (259 samples, 0.28%)</title><rect x="47.3708%" y="437" width="0.2816%" height="15" fill="rgb(250,105,47)" fg:x="43575" fg:w="259"/><text x="47.6208%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (258 samples, 0.28%)</title><rect x="47.3719%" y="421" width="0.2805%" height="15" fill="rgb(230,72,3)" fg:x="43576" fg:w="258"/><text x="47.6219%" y="431.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (246 samples, 0.27%)</title><rect x="47.3850%" y="405" width="0.2674%" height="15" fill="rgb(232,218,39)" fg:x="43588" fg:w="246"/><text x="47.6350%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (169 samples, 0.18%)</title><rect x="47.7165%" y="405" width="0.1837%" height="15" fill="rgb(248,166,6)" fg:x="43893" fg:w="169"/><text x="47.9665%" y="415.50"></text></g><g><title>hello.exe`core::num::nonzero::NonZero&lt;u16&gt;::new (169 samples, 0.18%)</title><rect x="47.7165%" y="389" width="0.1837%" height="15" fill="rgb(247,89,20)" fg:x="43893" fg:w="169"/><text x="47.9665%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (388 samples, 0.42%)</title><rect x="47.6524%" y="421" width="0.4218%" height="15" fill="rgb(248,130,54)" fg:x="43834" fg:w="388"/><text x="47.9024%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (160 samples, 0.17%)</title><rect x="47.9002%" y="405" width="0.1739%" height="15" fill="rgb(234,196,4)" fg:x="44062" fg:w="160"/><text x="48.1502%" y="415.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (160 samples, 0.17%)</title><rect x="47.9002%" y="389" width="0.1739%" height="15" fill="rgb(250,143,31)" fg:x="44062" fg:w="160"/><text x="48.1502%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (220 samples, 0.24%)</title><rect x="48.0742%" y="421" width="0.2392%" height="15" fill="rgb(211,110,34)" fg:x="44222" fg:w="220"/><text x="48.3242%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::is_bucket_full (29 samples, 0.03%)</title><rect x="48.2818%" y="405" width="0.0315%" height="15" fill="rgb(215,124,48)" fg:x="44413" fg:w="29"/><text x="48.5318%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::is_full (29 samples, 0.03%)</title><rect x="48.2818%" y="389" width="0.0315%" height="15" fill="rgb(216,46,13)" fg:x="44413" fg:w="29"/><text x="48.5318%" y="399.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (412 samples, 0.45%)</title><rect x="53.3825%" y="245" width="0.4479%" height="15" fill="rgb(205,184,25)" fg:x="49105" fg:w="412"/><text x="53.6325%" y="255.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (4,800 samples, 5.22%)</title><rect x="48.7482%" y="261" width="5.2181%" height="15" fill="rgb(228,1,10)" fg:x="44842" fg:w="4800"/><text x="48.9982%" y="271.50">hello...</text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (125 samples, 0.14%)</title><rect x="53.8304%" y="245" width="0.1359%" height="15" fill="rgb(213,116,27)" fg:x="49517" fg:w="125"/><text x="54.0804%" y="255.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (35 samples, 0.04%)</title><rect x="53.9663%" y="261" width="0.0380%" height="15" fill="rgb(241,95,50)" fg:x="49642" fg:w="35"/><text x="54.2163%" y="271.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (5,196 samples, 5.65%)</title><rect x="48.3590%" y="389" width="5.6486%" height="15" fill="rgb(238,48,32)" fg:x="44484" fg:w="5196"/><text x="48.6090%" y="399.50">hello.e..</text></g><g><title>hello.exe`alloc::string::impl$23::hash (5,025 samples, 5.46%)</title><rect x="48.5449%" y="373" width="5.4627%" height="15" fill="rgb(235,113,49)" fg:x="44655" fg:w="5025"/><text x="48.7949%" y="383.50">hello.e..</text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (5,025 samples, 5.46%)</title><rect x="48.5449%" y="357" width="5.4627%" height="15" fill="rgb(205,127,43)" fg:x="44655" fg:w="5025"/><text x="48.7949%" y="367.50">hello.e..</text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (5,025 samples, 5.46%)</title><rect x="48.5449%" y="341" width="5.4627%" height="15" fill="rgb(250,162,2)" fg:x="44655" fg:w="5025"/><text x="48.7949%" y="351.50">hello.e..</text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (5,025 samples, 5.46%)</title><rect x="48.5449%" y="325" width="5.4627%" height="15" fill="rgb(220,13,41)" fg:x="44655" fg:w="5025"/><text x="48.7949%" y="335.50">hello.e..</text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (5,025 samples, 5.46%)</title><rect x="48.5449%" y="309" width="5.4627%" height="15" fill="rgb(249,221,25)" fg:x="44655" fg:w="5025"/><text x="48.7949%" y="319.50">hello.e..</text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (5,012 samples, 5.45%)</title><rect x="48.5590%" y="293" width="5.4486%" height="15" fill="rgb(215,208,19)" fg:x="44668" fg:w="5012"/><text x="48.8090%" y="303.50">hello.e..</text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (4,974 samples, 5.41%)</title><rect x="48.6003%" y="277" width="5.4073%" height="15" fill="rgb(236,175,2)" fg:x="44706" fg:w="4974"/><text x="48.8503%" y="287.50">hello.e..</text></g><g><title>hello.exe`std::hash::random::impl$1::build_hasher (41 samples, 0.04%)</title><rect x="54.0076%" y="389" width="0.0446%" height="15" fill="rgb(241,52,2)" fg:x="49680" fg:w="41"/><text x="54.2576%" y="399.50"></text></g><g><title>hello.exe`core::hash::sip::SipHasher13::new_with_keys (20 samples, 0.02%)</title><rect x="54.0305%" y="373" width="0.0217%" height="15" fill="rgb(248,140,14)" fg:x="49701" fg:w="20"/><text x="54.2805%" y="383.50"></text></g><g><title>hello.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (20 samples, 0.02%)</title><rect x="54.0305%" y="357" width="0.0217%" height="15" fill="rgb(253,22,42)" fg:x="49701" fg:w="20"/><text x="54.2805%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (20 samples, 0.02%)</title><rect x="54.0305%" y="341" width="0.0217%" height="15" fill="rgb(234,61,47)" fg:x="49701" fg:w="20"/><text x="54.2805%" y="351.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (148 samples, 0.16%)</title><rect x="54.2098%" y="341" width="0.1609%" height="15" fill="rgb(208,226,15)" fg:x="49866" fg:w="148"/><text x="54.4598%" y="351.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (41 samples, 0.04%)</title><rect x="54.3262%" y="325" width="0.0446%" height="15" fill="rgb(217,221,4)" fg:x="49973" fg:w="41"/><text x="54.5762%" y="335.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (32 samples, 0.03%)</title><rect x="54.4207%" y="325" width="0.0348%" height="15" fill="rgb(212,174,34)" fg:x="50060" fg:w="32"/><text x="54.6707%" y="335.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (107 samples, 0.12%)</title><rect x="54.3707%" y="341" width="0.1163%" height="15" fill="rgb(253,83,4)" fg:x="50014" fg:w="107"/><text x="54.6207%" y="351.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (29 samples, 0.03%)</title><rect x="54.4555%" y="325" width="0.0315%" height="15" fill="rgb(250,195,49)" fg:x="50092" fg:w="29"/><text x="54.7055%" y="335.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (211 samples, 0.23%)</title><rect x="54.5642%" y="325" width="0.2294%" height="15" fill="rgb(241,192,25)" fg:x="50192" fg:w="211"/><text x="54.8142%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::probe_seq (6,028 samples, 6.55%)</title><rect x="48.3133%" y="421" width="6.5531%" height="15" fill="rgb(208,124,10)" fg:x="44442" fg:w="6028"/><text x="48.5633%" y="431.50">hello.exe..</text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (6,022 samples, 6.55%)</title><rect x="48.3199%" y="405" width="6.5466%" height="15" fill="rgb(222,33,0)" fg:x="44448" fg:w="6022"/><text x="48.5699%" y="415.50">hello.exe..</text></g><g><title>hello.exe`std::hash::random::impl$4::finish (749 samples, 0.81%)</title><rect x="54.0522%" y="389" width="0.8142%" height="15" fill="rgb(234,209,28)" fg:x="49721" fg:w="749"/><text x="54.3022%" y="399.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (749 samples, 0.81%)</title><rect x="54.0522%" y="373" width="0.8142%" height="15" fill="rgb(224,11,23)" fg:x="49721" fg:w="749"/><text x="54.3022%" y="383.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (749 samples, 0.81%)</title><rect x="54.0522%" y="357" width="0.8142%" height="15" fill="rgb(232,99,1)" fg:x="49721" fg:w="749"/><text x="54.3022%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (349 samples, 0.38%)</title><rect x="54.4870%" y="341" width="0.3794%" height="15" fill="rgb(237,95,45)" fg:x="50121" fg:w="349"/><text x="54.7370%" y="351.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (67 samples, 0.07%)</title><rect x="54.7936%" y="325" width="0.0728%" height="15" fill="rgb(208,109,11)" fg:x="50403" fg:w="67"/><text x="55.0436%" y="335.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot (6,668 samples, 7.25%)</title><rect x="47.6524%" y="437" width="7.2489%" height="15" fill="rgb(216,190,48)" fg:x="43834" fg:w="6668"/><text x="47.9024%" y="447.50">hello.exe`..</text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::load (32 samples, 0.03%)</title><rect x="54.8664%" y="421" width="0.0348%" height="15" fill="rgb(251,171,36)" fg:x="50470" fg:w="32"/><text x="55.1164%" y="431.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (32 samples, 0.03%)</title><rect x="54.8664%" y="405" width="0.0348%" height="15" fill="rgb(230,62,22)" fg:x="50470" fg:w="32"/><text x="55.1164%" y="415.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="54.8664%" y="389" width="0.0348%" height="15" fill="rgb(225,114,35)" fg:x="50470" fg:w="32"/><text x="55.1164%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (6,705 samples, 7.29%)</title><rect x="47.6524%" y="453" width="7.2891%" height="15" fill="rgb(215,118,42)" fg:x="43834" fg:w="6705"/><text x="47.9024%" y="463.50">hello.exe`..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::set_ctrl_h2 (37 samples, 0.04%)</title><rect x="54.9012%" y="437" width="0.0402%" height="15" fill="rgb(243,119,21)" fg:x="50502" fg:w="37"/><text x="55.1512%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::h2 (37 samples, 0.04%)</title><rect x="54.9012%" y="421" width="0.0402%" height="15" fill="rgb(252,177,53)" fg:x="50502" fg:w="37"/><text x="55.1512%" y="431.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::write_bytes (19 samples, 0.02%)</title><rect x="54.9415%" y="421" width="0.0207%" height="15" fill="rgb(237,209,29)" fg:x="50539" fg:w="19"/><text x="55.1915%" y="431.50"></text></g><g><title>hello.exe`core::intrinsics::write_bytes (19 samples, 0.02%)</title><rect x="54.9415%" y="405" width="0.0207%" height="15" fill="rgb(212,65,23)" fg:x="50539" fg:w="19"/><text x="55.1915%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::TableLayout::calculate_layout_for (17 samples, 0.02%)</title><rect x="54.9665%" y="405" width="0.0185%" height="15" fill="rgb(230,222,46)" fg:x="50562" fg:w="17"/><text x="55.2165%" y="415.50"></text></g><g><title>`0x7FF813B7B721 (13 samples, 0.01%)</title><rect x="55.0621%" y="325" width="0.0141%" height="15" fill="rgb(215,135,32)" fg:x="50650" fg:w="13"/><text x="55.3121%" y="335.50"></text></g><g><title>`0x7FF813B7B73C (14 samples, 0.02%)</title><rect x="55.0763%" y="325" width="0.0152%" height="15" fill="rgb(246,101,22)" fg:x="50663" fg:w="14"/><text x="55.3263%" y="335.50"></text></g><g><title>`0x7FF813B7B748 (22 samples, 0.02%)</title><rect x="55.0926%" y="325" width="0.0239%" height="15" fill="rgb(206,107,13)" fg:x="50678" fg:w="22"/><text x="55.3426%" y="335.50"></text></g><g><title>`0x7FF813B7B7A2 (12 samples, 0.01%)</title><rect x="55.1252%" y="325" width="0.0130%" height="15" fill="rgb(250,100,44)" fg:x="50708" fg:w="12"/><text x="55.3752%" y="335.50"></text></g><g><title>`0x7FF813B543E2 (12 samples, 0.01%)</title><rect x="55.1447%" y="309" width="0.0130%" height="15" fill="rgb(231,147,38)" fg:x="50726" fg:w="12"/><text x="55.3947%" y="319.50"></text></g><g><title>`0x7FF813B54452 (15 samples, 0.02%)</title><rect x="55.1752%" y="309" width="0.0163%" height="15" fill="rgb(229,8,40)" fg:x="50754" fg:w="15"/><text x="55.4252%" y="319.50"></text></g><g><title>`0x7FF813B7B86B (67 samples, 0.07%)</title><rect x="55.1447%" y="325" width="0.0728%" height="15" fill="rgb(221,135,30)" fg:x="50726" fg:w="67"/><text x="55.3947%" y="335.50"></text></g><g><title>`0x7FF813B7B8A4 (193 samples, 0.21%)</title><rect x="55.2274%" y="325" width="0.2098%" height="15" fill="rgb(249,193,18)" fg:x="50802" fg:w="193"/><text x="55.4774%" y="335.50"></text></g><g><title>`0x7FF813B7D7C1 (11 samples, 0.01%)</title><rect x="55.4676%" y="261" width="0.0120%" height="15" fill="rgb(209,133,39)" fg:x="51023" fg:w="11"/><text x="55.7176%" y="271.50"></text></g><g><title>`0x7FF813B5E715 (27 samples, 0.03%)</title><rect x="55.4828%" y="229" width="0.0294%" height="15" fill="rgb(232,100,14)" fg:x="51037" fg:w="27"/><text x="55.7328%" y="239.50"></text></g><g><title>`0x7FF813BED2E4 (27 samples, 0.03%)</title><rect x="55.4828%" y="213" width="0.0294%" height="15" fill="rgb(224,185,1)" fg:x="51037" fg:w="27"/><text x="55.7328%" y="223.50"></text></g><g><title>`0x7FF813B5E92D (20 samples, 0.02%)</title><rect x="55.5133%" y="213" width="0.0217%" height="15" fill="rgb(223,139,8)" fg:x="51065" fg:w="20"/><text x="55.7633%" y="223.50"></text></g><g><title>`0x7FF813B5E37B (51 samples, 0.06%)</title><rect x="55.4818%" y="245" width="0.0554%" height="15" fill="rgb(232,213,38)" fg:x="51036" fg:w="51"/><text x="55.7318%" y="255.50"></text></g><g><title>`0x7FF813B5E7DE (22 samples, 0.02%)</title><rect x="55.5133%" y="229" width="0.0239%" height="15" fill="rgb(207,94,22)" fg:x="51065" fg:w="22"/><text x="55.7633%" y="239.50"></text></g><g><title>`0x7FF813B7DBFA (58 samples, 0.06%)</title><rect x="55.4807%" y="261" width="0.0631%" height="15" fill="rgb(219,183,54)" fg:x="51035" fg:w="58"/><text x="55.7307%" y="271.50"></text></g><g><title>`0x7FF813B7DFDF (13 samples, 0.01%)</title><rect x="55.5448%" y="261" width="0.0141%" height="15" fill="rgb(216,185,54)" fg:x="51094" fg:w="13"/><text x="55.7948%" y="271.50"></text></g><g><title>`0x7FF813B7E237 (40 samples, 0.04%)</title><rect x="55.5600%" y="261" width="0.0435%" height="15" fill="rgb(254,217,39)" fg:x="51108" fg:w="40"/><text x="55.8100%" y="271.50"></text></g><g><title>`0x7FF813B6F44F (131 samples, 0.14%)</title><rect x="55.4676%" y="293" width="0.1424%" height="15" fill="rgb(240,178,23)" fg:x="51023" fg:w="131"/><text x="55.7176%" y="303.50"></text></g><g><title>`0x7FF813B7B44D (131 samples, 0.14%)</title><rect x="55.4676%" y="277" width="0.1424%" height="15" fill="rgb(218,11,47)" fg:x="51023" fg:w="131"/><text x="55.7176%" y="287.50"></text></g><g><title>`0x7FF813B6F4E5 (11 samples, 0.01%)</title><rect x="55.6100%" y="293" width="0.0120%" height="15" fill="rgb(218,51,51)" fg:x="51154" fg:w="11"/><text x="55.8600%" y="303.50"></text></g><g><title>`0x7FF813B736BD (11 samples, 0.01%)</title><rect x="55.6100%" y="277" width="0.0120%" height="15" fill="rgb(238,126,27)" fg:x="51154" fg:w="11"/><text x="55.8600%" y="287.50"></text></g><g><title>`0x7FF813B738E3 (11 samples, 0.01%)</title><rect x="55.6100%" y="261" width="0.0120%" height="15" fill="rgb(249,202,22)" fg:x="51154" fg:w="11"/><text x="55.8600%" y="271.50"></text></g><g><title>`0x7FF813B72499 (10 samples, 0.01%)</title><rect x="55.6111%" y="245" width="0.0109%" height="15" fill="rgb(254,195,49)" fg:x="51155" fg:w="10"/><text x="55.8611%" y="255.50"></text></g><g><title>`0x7FF813B6DFB0 (10 samples, 0.01%)</title><rect x="55.6111%" y="229" width="0.0109%" height="15" fill="rgb(208,123,14)" fg:x="51155" fg:w="10"/><text x="55.8611%" y="239.50"></text></g><g><title>`0x7FF813B6E2A9 (10 samples, 0.01%)</title><rect x="55.6111%" y="213" width="0.0109%" height="15" fill="rgb(224,200,8)" fg:x="51155" fg:w="10"/><text x="55.8611%" y="223.50"></text></g><g><title>`0x7FF813B6F525 (13 samples, 0.01%)</title><rect x="55.6220%" y="293" width="0.0141%" height="15" fill="rgb(217,61,36)" fg:x="51165" fg:w="13"/><text x="55.8720%" y="303.50"></text></g><g><title>`0x7FF813BED9E4 (13 samples, 0.01%)</title><rect x="55.6220%" y="277" width="0.0141%" height="15" fill="rgb(206,35,45)" fg:x="51165" fg:w="13"/><text x="55.8720%" y="287.50"></text></g><g><title>`0x7FF813B7BEDA (156 samples, 0.17%)</title><rect x="55.4676%" y="325" width="0.1696%" height="15" fill="rgb(217,65,33)" fg:x="51023" fg:w="156"/><text x="55.7176%" y="335.50"></text></g><g><title>`0x7FF813B70B31 (156 samples, 0.17%)</title><rect x="55.4676%" y="309" width="0.1696%" height="15" fill="rgb(222,158,48)" fg:x="51023" fg:w="156"/><text x="55.7176%" y="319.50"></text></g><g><title>`0x7FF813B5A16F (494 samples, 0.54%)</title><rect x="55.6437%" y="309" width="0.5370%" height="15" fill="rgb(254,2,54)" fg:x="51185" fg:w="494"/><text x="55.8937%" y="319.50"></text></g><g><title>`0x7FF813B5A176 (84 samples, 0.09%)</title><rect x="56.1808%" y="309" width="0.0913%" height="15" fill="rgb(250,143,38)" fg:x="51679" fg:w="84"/><text x="56.4308%" y="319.50"></text></g><g><title>`0x7FF813B7BF5E (592 samples, 0.64%)</title><rect x="55.6372%" y="325" width="0.6436%" height="15" fill="rgb(248,25,0)" fg:x="51179" fg:w="592"/><text x="55.8872%" y="335.50"></text></g><g><title>`0x7FF813B7B3C7 (1,145 samples, 1.24%)</title><rect x="55.0371%" y="341" width="1.2447%" height="15" fill="rgb(206,152,27)" fg:x="50627" fg:w="1145"/><text x="55.2871%" y="351.50"></text></g><g><title>`0x7FF813B7D7C1 (13 samples, 0.01%)</title><rect x="56.2819%" y="325" width="0.0141%" height="15" fill="rgb(240,77,30)" fg:x="51772" fg:w="13"/><text x="56.5319%" y="335.50"></text></g><g><title>`0x7FF813B7B44D (19 samples, 0.02%)</title><rect x="56.2819%" y="341" width="0.0207%" height="15" fill="rgb(231,5,3)" fg:x="51772" fg:w="19"/><text x="56.5319%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::new_uninitialized (1,259 samples, 1.37%)</title><rect x="54.9621%" y="421" width="1.3687%" height="15" fill="rgb(207,226,32)" fg:x="50558" fg:w="1259"/><text x="55.2121%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::alloc::inner::do_alloc (1,238 samples, 1.35%)</title><rect x="54.9849%" y="405" width="1.3458%" height="15" fill="rgb(222,207,47)" fg:x="50579" fg:w="1238"/><text x="55.2349%" y="415.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::allocate (1,238 samples, 1.35%)</title><rect x="54.9849%" y="389" width="1.3458%" height="15" fill="rgb(229,115,45)" fg:x="50579" fg:w="1238"/><text x="55.2349%" y="399.50"></text></g><g><title>hello.exe`alloc::alloc::Global::alloc_impl (1,238 samples, 1.35%)</title><rect x="54.9849%" y="373" width="1.3458%" height="15" fill="rgb(224,191,6)" fg:x="50579" fg:w="1238"/><text x="55.2349%" y="383.50"></text></g><g><title>hello.exe`alloc::alloc::alloc (1,238 samples, 1.35%)</title><rect x="54.9849%" y="357" width="1.3458%" height="15" fill="rgb(230,227,24)" fg:x="50579" fg:w="1238"/><text x="55.2349%" y="367.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::process_heap_alloc (12 samples, 0.01%)</title><rect x="56.3177%" y="341" width="0.0130%" height="15" fill="rgb(228,80,19)" fg:x="51805" fg:w="12"/><text x="56.5677%" y="351.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::prepare_resize (1,305 samples, 1.42%)</title><rect x="54.9415%" y="453" width="1.4187%" height="15" fill="rgb(247,229,0)" fg:x="50539" fg:w="1305"/><text x="55.1915%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (1,305 samples, 1.42%)</title><rect x="54.9415%" y="437" width="1.4187%" height="15" fill="rgb(237,194,15)" fg:x="50539" fg:w="1305"/><text x="55.1915%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::capacity_to_buckets (27 samples, 0.03%)</title><rect x="56.3308%" y="421" width="0.0294%" height="15" fill="rgb(219,203,20)" fg:x="51817" fg:w="27"/><text x="56.5808%" y="431.50"></text></g><g><title>hello.exe`core::num::impl$11::next_power_of_two (18 samples, 0.02%)</title><rect x="56.3406%" y="405" width="0.0196%" height="15" fill="rgb(234,128,8)" fg:x="51826" fg:w="18"/><text x="56.5906%" y="415.50"></text></g><g><title>hello.exe`core::num::impl$11::one_less_than_next_power_of_two (15 samples, 0.02%)</title><rect x="56.3438%" y="389" width="0.0163%" height="15" fill="rgb(248,202,8)" fg:x="51829" fg:w="15"/><text x="56.5938%" y="399.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$32::next (22 samples, 0.02%)</title><rect x="56.3601%" y="453" width="0.0239%" height="15" fill="rgb(206,104,37)" fg:x="51844" fg:w="22"/><text x="56.6101%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::FullBucketsIndices::next_impl (22 samples, 0.02%)</title><rect x="56.3601%" y="437" width="0.0239%" height="15" fill="rgb(223,8,27)" fg:x="51844" fg:w="22"/><text x="56.6101%" y="447.50"></text></g><g><title>hello.exe`hashbrown::map::make_hasher::closure$0(hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState&gt;*, tuple$&lt;alloc::string::String,tuple$ (15 samples, 0.02%)</title><rect x="56.3841%" y="437" width="0.0163%" height="15" fill="rgb(216,217,28)" fg:x="51866" fg:w="15"/><text x="56.6341%" y="447.50"></text></g><g><title>hello.exe`hashbrown::map::make_hash (15 samples, 0.02%)</title><rect x="56.3841%" y="421" width="0.0163%" height="15" fill="rgb(249,199,1)" fg:x="51866" fg:w="15"/><text x="56.6341%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (8,869 samples, 9.64%)</title><rect x="46.7794%" y="469" width="9.6416%" height="15" fill="rgb(240,85,17)" fg:x="43031" fg:w="8869"/><text x="47.0294%" y="479.50">hello.exe`hash..</text></g><g><title>hello.exe`hashbrown::raw::impl$8::reserve_rehash::closure$0(hashbrown::raw::impl$8::reserve_rehash::closure_env$0&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (34 samples, 0.04%)</title><rect x="56.3841%" y="453" width="0.0370%" height="15" fill="rgb(206,108,45)" fg:x="51866" fg:w="34"/><text x="56.6341%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::bucket (19 samples, 0.02%)</title><rect x="56.4004%" y="437" width="0.0207%" height="15" fill="rgb(245,210,41)" fg:x="51881" fg:w="19"/><text x="56.6504%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;alloc::string::String,tuple$ (11 samples, 0.01%)</title><rect x="56.4091%" y="421" width="0.0120%" height="15" fill="rgb(206,13,37)" fg:x="51889" fg:w="11"/><text x="56.6591%" y="431.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;alloc::string::String,tuple$ (11 samples, 0.01%)</title><rect x="56.4091%" y="405" width="0.0120%" height="15" fill="rgb(250,61,18)" fg:x="51889" fg:w="11"/><text x="56.6591%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (8,899 samples, 9.67%)</title><rect x="46.7490%" y="501" width="9.6742%" height="15" fill="rgb(235,172,48)" fg:x="43003" fg:w="8899"/><text x="46.9990%" y="511.50">hello.exe`hash..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (8,886 samples, 9.66%)</title><rect x="46.7631%" y="485" width="9.6601%" height="15" fill="rgb(249,201,17)" fg:x="43016" fg:w="8886"/><text x="47.0131%" y="495.50">hello.exe`hash..</text></g><g><title>hello.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_none (26 samples, 0.03%)</title><rect x="56.9852%" y="485" width="0.0283%" height="15" fill="rgb(219,208,6)" fg:x="52419" fg:w="26"/><text x="57.2352%" y="495.50"></text></g><g><title>hello.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_some (26 samples, 0.03%)</title><rect x="56.9852%" y="469" width="0.0283%" height="15" fill="rgb(248,31,23)" fg:x="52419" fg:w="26"/><text x="57.2352%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::ProbeSeq::move_next (17 samples, 0.02%)</title><rect x="57.0135%" y="485" width="0.0185%" height="15" fill="rgb(245,15,42)" fg:x="52445" fg:w="17"/><text x="57.2635%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (13 samples, 0.01%)</title><rect x="57.0776%" y="469" width="0.0141%" height="15" fill="rgb(222,217,39)" fg:x="52504" fg:w="13"/><text x="57.3276%" y="479.50"></text></g><g><title>hello.exe`core::num::nonzero::NonZero&lt;u16&gt;::new (11 samples, 0.01%)</title><rect x="57.0798%" y="453" width="0.0120%" height="15" fill="rgb(210,219,27)" fg:x="52506" fg:w="11"/><text x="57.3298%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (56 samples, 0.06%)</title><rect x="57.0320%" y="485" width="0.0609%" height="15" fill="rgb(252,166,36)" fg:x="52462" fg:w="56"/><text x="57.2820%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::is_bucket_full (267 samples, 0.29%)</title><rect x="57.1168%" y="469" width="0.2903%" height="15" fill="rgb(245,132,34)" fg:x="52540" fg:w="267"/><text x="57.3668%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::is_full (130 samples, 0.14%)</title><rect x="57.2657%" y="453" width="0.1413%" height="15" fill="rgb(236,54,3)" fg:x="52677" fg:w="130"/><text x="57.5157%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (293 samples, 0.32%)</title><rect x="57.0929%" y="485" width="0.3185%" height="15" fill="rgb(241,173,43)" fg:x="52518" fg:w="293"/><text x="57.3429%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::h2 (457 samples, 0.50%)</title><rect x="57.4135%" y="485" width="0.4968%" height="15" fill="rgb(215,190,9)" fg:x="52813" fg:w="457"/><text x="57.6635%" y="495.50"></text></g><g><title>`0x7FF807A61213 (67 samples, 0.07%)</title><rect x="58.8116%" y="357" width="0.0728%" height="15" fill="rgb(242,101,16)" fg:x="54099" fg:w="67"/><text x="59.0616%" y="367.50"></text></g><g><title>`0x7FF807A6123B (50 samples, 0.05%)</title><rect x="58.8844%" y="357" width="0.0544%" height="15" fill="rgb(223,190,21)" fg:x="54166" fg:w="50"/><text x="59.1344%" y="367.50"></text></g><g><title>`0x7FF807A6125E (66 samples, 0.07%)</title><rect x="58.9453%" y="357" width="0.0717%" height="15" fill="rgb(215,228,25)" fg:x="54222" fg:w="66"/><text x="59.1953%" y="367.50"></text></g><g><title>`0x7FF807A61267 (756 samples, 0.82%)</title><rect x="59.0181%" y="357" width="0.8219%" height="15" fill="rgb(225,36,22)" fg:x="54289" fg:w="756"/><text x="59.2681%" y="367.50"></text></g><g><title>`0x7FF807A61272 (55 samples, 0.06%)</title><rect x="59.8432%" y="357" width="0.0598%" height="15" fill="rgb(251,106,46)" fg:x="55048" fg:w="55"/><text x="60.0932%" y="367.50"></text></g><g><title>`0x7FF807A6127D (67 samples, 0.07%)</title><rect x="59.9030%" y="357" width="0.0728%" height="15" fill="rgb(208,90,1)" fg:x="55103" fg:w="67"/><text x="60.1530%" y="367.50"></text></g><g><title>`0x7FF807A61288 (24 samples, 0.03%)</title><rect x="59.9759%" y="357" width="0.0261%" height="15" fill="rgb(243,10,4)" fg:x="55170" fg:w="24"/><text x="60.2259%" y="367.50"></text></g><g><title>hello.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,tuple$&lt;&gt; &gt;*, tuple$&lt;alloc::string::String,tuple$ (1,945 samples, 2.11%)</title><rect x="57.9104%" y="469" width="2.1144%" height="15" fill="rgb(212,137,27)" fg:x="53270" fg:w="1945"/><text x="58.1604%" y="479.50">h..</text></g><g><title>hello.exe`hashbrown::impl$0::equivalent (1,945 samples, 2.11%)</title><rect x="57.9104%" y="453" width="2.1144%" height="15" fill="rgb(231,220,49)" fg:x="53270" fg:w="1945"/><text x="58.1604%" y="463.50">h..</text></g><g><title>hello.exe`core::cmp::impls::impl$9::eq (1,945 samples, 2.11%)</title><rect x="57.9104%" y="437" width="2.1144%" height="15" fill="rgb(237,96,20)" fg:x="53270" fg:w="1945"/><text x="58.1604%" y="447.50">h..</text></g><g><title>hello.exe`alloc::string::impl$80::eq (1,944 samples, 2.11%)</title><rect x="57.9114%" y="421" width="2.1133%" height="15" fill="rgb(239,229,30)" fg:x="53271" fg:w="1944"/><text x="58.1614%" y="431.50">h..</text></g><g><title>hello.exe`alloc::vec::partial_eq::impl$0::eq(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, alloc::vec::Vec (1,944 samples, 2.11%)</title><rect x="57.9114%" y="405" width="2.1133%" height="15" fill="rgb(219,65,33)" fg:x="53271" fg:w="1944"/><text x="58.1614%" y="415.50">h..</text></g><g><title>hello.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1,944 samples, 2.11%)</title><rect x="57.9114%" y="389" width="2.1133%" height="15" fill="rgb(243,134,7)" fg:x="53271" fg:w="1944"/><text x="58.1614%" y="399.50">h..</text></g><g><title>hello.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1,944 samples, 2.11%)</title><rect x="57.9114%" y="373" width="2.1133%" height="15" fill="rgb(216,177,54)" fg:x="53271" fg:w="1944"/><text x="58.1614%" y="383.50">h..</text></g><g><title>hello.exe`hashbrown::raw::impl$8::find_or_find_insert_slot::closure$0(hashbrown::raw::impl$8::find_or_find_insert_slot::closure_env$0&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,tuple$&lt;&gt; &gt;,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (2,073 samples, 2.25%)</title><rect x="57.9104%" y="485" width="2.2536%" height="15" fill="rgb(211,160,20)" fg:x="53270" fg:w="2073"/><text x="58.1604%" y="495.50">h..</text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::bucket (128 samples, 0.14%)</title><rect x="60.0248%" y="469" width="0.1392%" height="15" fill="rgb(239,85,39)" fg:x="55215" fg:w="128"/><text x="60.2748%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;alloc::string::String,tuple$ (128 samples, 0.14%)</title><rect x="60.0248%" y="453" width="0.1392%" height="15" fill="rgb(232,125,22)" fg:x="55215" fg:w="128"/><text x="60.2748%" y="463.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;alloc::string::String,tuple$ (128 samples, 0.14%)</title><rect x="60.0248%" y="437" width="0.1392%" height="15" fill="rgb(244,57,34)" fg:x="55215" fg:w="128"/><text x="60.2748%" y="447.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;alloc::string::String,tuple$ (73 samples, 0.08%)</title><rect x="60.0846%" y="421" width="0.0794%" height="15" fill="rgb(214,203,32)" fg:x="55270" fg:w="73"/><text x="60.3346%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::load (71 samples, 0.08%)</title><rect x="60.1639%" y="485" width="0.0772%" height="15" fill="rgb(207,58,43)" fg:x="55343" fg:w="71"/><text x="60.4139%" y="495.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (71 samples, 0.08%)</title><rect x="60.1639%" y="469" width="0.0772%" height="15" fill="rgb(215,193,15)" fg:x="55343" fg:w="71"/><text x="60.4139%" y="479.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (71 samples, 0.08%)</title><rect x="60.1639%" y="453" width="0.0772%" height="15" fill="rgb(232,15,44)" fg:x="55343" fg:w="71"/><text x="60.4139%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_byte (4,827 samples, 5.25%)</title><rect x="60.2411%" y="485" width="5.2475%" height="15" fill="rgb(212,3,48)" fg:x="55414" fg:w="4827"/><text x="60.4911%" y="495.50">hello...</text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (4,827 samples, 5.25%)</title><rect x="60.2411%" y="469" width="5.2475%" height="15" fill="rgb(218,128,7)" fg:x="55414" fg:w="4827"/><text x="60.4911%" y="479.50">hello...</text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,tuple$&lt;&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,tuple$ (23,621 samples, 25.68%)</title><rect x="39.8121%" y="517" width="25.6786%" height="15" fill="rgb(226,216,39)" fg:x="36622" fg:w="23621"/><text x="40.0621%" y="527.50">hello.exe`hashbrown::raw::RawTable&lt;tuple$..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (8,341 samples, 9.07%)</title><rect x="56.4232%" y="501" width="9.0676%" height="15" fill="rgb(243,47,51)" fg:x="51902" fg:w="8341"/><text x="56.6732%" y="511.50">hello.exe`has..</text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::write(tuple$&lt;alloc::string::String,tuple$ (274 samples, 0.30%)</title><rect x="65.4919%" y="501" width="0.2979%" height="15" fill="rgb(241,183,40)" fg:x="60244" fg:w="274"/><text x="65.7419%" y="511.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::write(tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;*, tuple$&lt;alloc::string::String,tuple$ (274 samples, 0.30%)</title><rect x="65.4919%" y="485" width="0.2979%" height="15" fill="rgb(231,217,32)" fg:x="60244" fg:w="274"/><text x="65.7419%" y="495.50"></text></g><g><title>hello.exe`core::ptr::write(tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;*, tuple$&lt;alloc::string::String,tuple$ (274 samples, 0.30%)</title><rect x="65.4919%" y="469" width="0.2979%" height="15" fill="rgb(229,61,38)" fg:x="60244" fg:w="274"/><text x="65.7419%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::bucket (12 samples, 0.01%)</title><rect x="65.7897%" y="501" width="0.0130%" height="15" fill="rgb(225,210,5)" fg:x="60518" fg:w="12"/><text x="66.0397%" y="511.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;alloc::string::String,tuple$ (12 samples, 0.01%)</title><rect x="65.7897%" y="485" width="0.0130%" height="15" fill="rgb(231,79,45)" fg:x="60518" fg:w="12"/><text x="66.0397%" y="495.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;alloc::string::String,tuple$ (12 samples, 0.01%)</title><rect x="65.7897%" y="469" width="0.0130%" height="15" fill="rgb(224,100,7)" fg:x="60518" fg:w="12"/><text x="66.0397%" y="479.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;alloc::string::String,tuple$ (10 samples, 0.01%)</title><rect x="65.7919%" y="453" width="0.0109%" height="15" fill="rgb(241,198,18)" fg:x="60520" fg:w="10"/><text x="66.0419%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$&lt;alloc::string::String,tuple$ (371 samples, 0.40%)</title><rect x="65.4908%" y="517" width="0.4033%" height="15" fill="rgb(252,97,53)" fg:x="60243" fg:w="371"/><text x="65.7408%" y="527.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::record_item_insert_at (84 samples, 0.09%)</title><rect x="65.8028%" y="501" width="0.0913%" height="15" fill="rgb(220,88,7)" fg:x="60530" fg:w="84"/><text x="66.0528%" y="511.50"></text></g><g><title>hello.exe`hashbrown::raw::special_is_empty (16 samples, 0.02%)</title><rect x="65.8767%" y="485" width="0.0174%" height="15" fill="rgb(213,176,14)" fg:x="60598" fg:w="16"/><text x="66.1267%" y="495.50"></text></g><g><title>hello.exe`core::str::iter::impl$61::next(core::str::iter::Split&lt;ref$ (32,817 samples, 35.68%)</title><rect x="30.2923%" y="565" width="35.6757%" height="15" fill="rgb(246,73,7)" fg:x="27865" fg:w="32817"/><text x="30.5423%" y="575.50">hello.exe`core::str::iter::impl$61::next(core::str::iter::..</text></g><g><title>hello.exe`core::str::iter::SplitInternal&lt;ref$&lt;str$&gt; &gt;::next (32,817 samples, 35.68%)</title><rect x="30.2923%" y="549" width="35.6757%" height="15" fill="rgb(245,64,36)" fg:x="27865" fg:w="32817"/><text x="30.5423%" y="559.50">hello.exe`core::str::iter::SplitInternal&lt;ref$&lt;str$&gt; &gt;::next</text></g><g><title>hello.exe`hashbrown::map::HashMap&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::string::String,tuple$&lt;&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(alloc::string::String, tuple$ (27,221 samples, 29.59%)</title><rect x="36.3758%" y="533" width="29.5922%" height="15" fill="rgb(245,80,10)" fg:x="33461" fg:w="27221"/><text x="36.6258%" y="543.50">hello.exe`hashbrown::map::HashMap&lt;alloc::string:..</text></g><g><title>hello.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (68 samples, 0.07%)</title><rect x="65.8941%" y="517" width="0.0739%" height="15" fill="rgb(232,107,50)" fg:x="60614" fg:w="68"/><text x="66.1441%" y="527.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::impl$0::dealloc (68 samples, 0.07%)</title><rect x="65.8941%" y="501" width="0.0739%" height="15" fill="rgb(253,3,0)" fg:x="60614" fg:w="68"/><text x="66.1441%" y="511.50"></text></g><g><title>`0x7FF813B7D7C1 (14 samples, 0.02%)</title><rect x="66.2387%" y="229" width="0.0152%" height="15" fill="rgb(212,99,53)" fg:x="60931" fg:w="14"/><text x="66.4887%" y="239.50"></text></g><g><title>`0x7FF813B7BEDA (26 samples, 0.03%)</title><rect x="66.2354%" y="293" width="0.0283%" height="15" fill="rgb(249,111,54)" fg:x="60928" fg:w="26"/><text x="66.4854%" y="303.50"></text></g><g><title>`0x7FF813B70B31 (24 samples, 0.03%)</title><rect x="66.2376%" y="277" width="0.0261%" height="15" fill="rgb(249,55,30)" fg:x="60930" fg:w="24"/><text x="66.4876%" y="287.50"></text></g><g><title>`0x7FF813B6F44F (24 samples, 0.03%)</title><rect x="66.2376%" y="261" width="0.0261%" height="15" fill="rgb(237,47,42)" fg:x="60930" fg:w="24"/><text x="66.4876%" y="271.50"></text></g><g><title>`0x7FF813B7B44D (24 samples, 0.03%)</title><rect x="66.2376%" y="245" width="0.0261%" height="15" fill="rgb(211,20,18)" fg:x="60930" fg:w="24"/><text x="66.4876%" y="255.50"></text></g><g><title>`0x7FF813B5A16F (13 samples, 0.01%)</title><rect x="66.2637%" y="277" width="0.0141%" height="15" fill="rgb(231,203,46)" fg:x="60954" fg:w="13"/><text x="66.5137%" y="287.50"></text></g><g><title>`0x7FF813B7B3C7 (51 samples, 0.06%)</title><rect x="66.2267%" y="309" width="0.0554%" height="15" fill="rgb(237,142,3)" fg:x="60920" fg:w="51"/><text x="66.4767%" y="319.50"></text></g><g><title>`0x7FF813B7BF5E (17 samples, 0.02%)</title><rect x="66.2637%" y="293" width="0.0185%" height="15" fill="rgb(241,107,1)" fg:x="60954" fg:w="17"/><text x="66.5137%" y="303.50"></text></g><g><title>`0x7FF813B7D7C1 (24 samples, 0.03%)</title><rect x="66.2844%" y="293" width="0.0261%" height="15" fill="rgb(229,83,13)" fg:x="60973" fg:w="24"/><text x="66.5344%" y="303.50"></text></g><g><title>`0x7FF813B71BF2 (80 samples, 0.09%)</title><rect x="66.2257%" y="325" width="0.0870%" height="15" fill="rgb(241,91,40)" fg:x="60919" fg:w="80"/><text x="66.4757%" y="335.50"></text></g><g><title>`0x7FF813B7B44D (28 samples, 0.03%)</title><rect x="66.2822%" y="309" width="0.0304%" height="15" fill="rgb(225,3,45)" fg:x="60971" fg:w="28"/><text x="66.5322%" y="319.50"></text></g><g><title>`0x7FF813B71C3D (18 samples, 0.02%)</title><rect x="66.3126%" y="325" width="0.0196%" height="15" fill="rgb(244,223,14)" fg:x="60999" fg:w="18"/><text x="66.5626%" y="335.50"></text></g><g><title>`0x7FF813B7D7C1 (78 samples, 0.08%)</title><rect x="66.3572%" y="293" width="0.0848%" height="15" fill="rgb(224,124,37)" fg:x="61040" fg:w="78"/><text x="66.6072%" y="303.50"></text></g><g><title>`0x7FF813B72615 (132 samples, 0.14%)</title><rect x="66.3550%" y="325" width="0.1435%" height="15" fill="rgb(251,171,30)" fg:x="61038" fg:w="132"/><text x="66.6050%" y="335.50"></text></g><g><title>`0x7FF813B7B44D (132 samples, 0.14%)</title><rect x="66.3550%" y="309" width="0.1435%" height="15" fill="rgb(236,46,54)" fg:x="61038" fg:w="132"/><text x="66.6050%" y="319.50"></text></g><g><title>`0x7FF813BF3F53 (20 samples, 0.02%)</title><rect x="66.5083%" y="309" width="0.0217%" height="15" fill="rgb(245,213,5)" fg:x="61179" fg:w="20"/><text x="66.7583%" y="319.50"></text></g><g><title>`0x7FF813BF3F57 (12 samples, 0.01%)</title><rect x="66.5301%" y="309" width="0.0130%" height="15" fill="rgb(230,144,27)" fg:x="61199" fg:w="12"/><text x="66.7801%" y="319.50"></text></g><g><title>`0x7FF813BF3F5E (20 samples, 0.02%)</title><rect x="66.5442%" y="309" width="0.0217%" height="15" fill="rgb(220,86,6)" fg:x="61212" fg:w="20"/><text x="66.7942%" y="319.50"></text></g><g><title>`0x7FF813BF3F62 (51 samples, 0.06%)</title><rect x="66.5659%" y="309" width="0.0554%" height="15" fill="rgb(240,20,13)" fg:x="61232" fg:w="51"/><text x="66.8159%" y="319.50"></text></g><g><title>`0x7FF813BF3F66 (58 samples, 0.06%)</title><rect x="66.6214%" y="309" width="0.0631%" height="15" fill="rgb(217,89,34)" fg:x="61283" fg:w="58"/><text x="66.8714%" y="319.50"></text></g><g><title>`0x7FF813BF3F6A (22 samples, 0.02%)</title><rect x="66.6844%" y="309" width="0.0239%" height="15" fill="rgb(229,13,5)" fg:x="61341" fg:w="22"/><text x="66.9344%" y="319.50"></text></g><g><title>`0x7FF813B727D9 (204 samples, 0.22%)</title><rect x="66.4996%" y="325" width="0.2218%" height="15" fill="rgb(244,67,35)" fg:x="61171" fg:w="204"/><text x="66.7496%" y="335.50"></text></g><g><title>`0x7FF813B6ED55 (16 samples, 0.02%)</title><rect x="66.7301%" y="213" width="0.0174%" height="15" fill="rgb(221,40,2)" fg:x="61383" fg:w="16"/><text x="66.9801%" y="223.50"></text></g><g><title>`0x7FF813B75B74 (33 samples, 0.04%)</title><rect x="66.7236%" y="293" width="0.0359%" height="15" fill="rgb(237,157,21)" fg:x="61377" fg:w="33"/><text x="66.9736%" y="303.50"></text></g><g><title>`0x7FF813B765F6 (28 samples, 0.03%)</title><rect x="66.7290%" y="277" width="0.0304%" height="15" fill="rgb(222,94,11)" fg:x="61382" fg:w="28"/><text x="66.9790%" y="287.50"></text></g><g><title>`0x7FF813B6E430 (27 samples, 0.03%)</title><rect x="66.7301%" y="261" width="0.0294%" height="15" fill="rgb(249,113,6)" fg:x="61383" fg:w="27"/><text x="66.9801%" y="271.50"></text></g><g><title>`0x7FF813B6EA31 (27 samples, 0.03%)</title><rect x="66.7301%" y="245" width="0.0294%" height="15" fill="rgb(238,137,36)" fg:x="61383" fg:w="27"/><text x="66.9801%" y="255.50"></text></g><g><title>`0x7FF813B6E2A9 (27 samples, 0.03%)</title><rect x="66.7301%" y="229" width="0.0294%" height="15" fill="rgb(210,102,26)" fg:x="61383" fg:w="27"/><text x="66.9801%" y="239.50"></text></g><g><title>`0x7FF813B727F0 (36 samples, 0.04%)</title><rect x="66.7214%" y="325" width="0.0391%" height="15" fill="rgb(218,30,30)" fg:x="61375" fg:w="36"/><text x="66.9714%" y="335.50"></text></g><g><title>`0x7FF813B747B1 (34 samples, 0.04%)</title><rect x="66.7236%" y="309" width="0.0370%" height="15" fill="rgb(214,67,26)" fg:x="61377" fg:w="34"/><text x="66.9736%" y="319.50"></text></g><g><title>`0x7FF813B736BD (497 samples, 0.54%)</title><rect x="66.2213%" y="357" width="0.5403%" height="15" fill="rgb(251,9,53)" fg:x="60915" fg:w="497"/><text x="66.4713%" y="367.50"></text></g><g><title>`0x7FF813B738E3 (496 samples, 0.54%)</title><rect x="66.2224%" y="341" width="0.5392%" height="15" fill="rgb(228,204,25)" fg:x="60916" fg:w="496"/><text x="66.4724%" y="351.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;alloc::string::String,alloc::alloc::Global&gt;::reserve_for_push&lt;alloc::string::String,alloc::alloc::Global&gt; (502 samples, 0.55%)</title><rect x="66.2213%" y="437" width="0.5457%" height="15" fill="rgb(207,153,8)" fg:x="60915" fg:w="502"/><text x="66.4713%" y="447.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;alloc::string::String,alloc::alloc::Global&gt;::grow_amortized (502 samples, 0.55%)</title><rect x="66.2213%" y="421" width="0.5457%" height="15" fill="rgb(242,9,16)" fg:x="60915" fg:w="502"/><text x="66.4713%" y="431.50"></text></g><g><title>hello.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (502 samples, 0.55%)</title><rect x="66.2213%" y="405" width="0.5457%" height="15" fill="rgb(217,211,10)" fg:x="60915" fg:w="502"/><text x="66.4713%" y="415.50"></text></g><g><title>hello.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (502 samples, 0.55%)</title><rect x="66.2213%" y="389" width="0.5457%" height="15" fill="rgb(219,228,52)" fg:x="60915" fg:w="502"/><text x="66.4713%" y="399.50"></text></g><g><title>hello.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (502 samples, 0.55%)</title><rect x="66.2213%" y="373" width="0.5457%" height="15" fill="rgb(231,92,29)" fg:x="60915" fg:w="502"/><text x="66.4713%" y="383.50"></text></g><g><title>hello.exe`alloc::vec::Vec&lt;alloc::string::String,alloc::alloc::Global&gt;::as_mut_ptr (23 samples, 0.03%)</title><rect x="66.7670%" y="437" width="0.0250%" height="15" fill="rgb(232,8,23)" fg:x="61417" fg:w="23"/><text x="67.0170%" y="447.50"></text></g><g><title>hello.exe`alloc::vec::Vec&lt;alloc::string::String,alloc::alloc::Global&gt;::push (640 samples, 0.70%)</title><rect x="66.2170%" y="453" width="0.6958%" height="15" fill="rgb(216,211,34)" fg:x="60911" fg:w="640"/><text x="66.4670%" y="463.50"></text></g><g><title>hello.exe`core::ptr::write (111 samples, 0.12%)</title><rect x="66.7920%" y="437" width="0.1207%" height="15" fill="rgb(236,151,0)" fg:x="61440" fg:w="111"/><text x="67.0420%" y="447.50"></text></g><g><title>hello.exe`serde::de::SeqAccess::next_element(serde_json::de::SeqAccess (17 samples, 0.02%)</title><rect x="66.9127%" y="453" width="0.0185%" height="15" fill="rgb(209,168,3)" fg:x="61551" fg:w="17"/><text x="67.1627%" y="463.50"></text></g><g><title>`0x7FF807A61450 (16 samples, 0.02%)</title><rect x="67.8118%" y="373" width="0.0174%" height="15" fill="rgb(208,129,28)" fg:x="62378" fg:w="16"/><text x="68.0618%" y="383.50"></text></g><g><title>`0x7FF807A61570 (10 samples, 0.01%)</title><rect x="67.8357%" y="373" width="0.0109%" height="15" fill="rgb(229,78,22)" fg:x="62400" fg:w="10"/><text x="68.0857%" y="383.50"></text></g><g><title>`0x7FF807A615F1 (11 samples, 0.01%)</title><rect x="67.8585%" y="373" width="0.0120%" height="15" fill="rgb(228,187,13)" fg:x="62421" fg:w="11"/><text x="68.1085%" y="383.50"></text></g><g><title>`0x7FF807A615FF (17 samples, 0.02%)</title><rect x="67.8748%" y="373" width="0.0185%" height="15" fill="rgb(240,119,24)" fg:x="62436" fg:w="17"/><text x="68.1248%" y="383.50"></text></g><g><title>`0x7FF807A61606 (52 samples, 0.06%)</title><rect x="67.8933%" y="373" width="0.0565%" height="15" fill="rgb(209,194,42)" fg:x="62453" fg:w="52"/><text x="68.1433%" y="383.50"></text></g><g><title>hello.exe`memcpy (32 samples, 0.03%)</title><rect x="67.9607%" y="373" width="0.0348%" height="15" fill="rgb(247,200,46)" fg:x="62515" fg:w="32"/><text x="68.2107%" y="383.50"></text></g><g><title>`0x7FF813B7A9B2 (14 samples, 0.02%)</title><rect x="68.0444%" y="165" width="0.0152%" height="15" fill="rgb(218,76,16)" fg:x="62592" fg:w="14"/><text x="68.2944%" y="175.50"></text></g><g><title>`0x7FF813B7A9D2 (20 samples, 0.02%)</title><rect x="68.0770%" y="165" width="0.0217%" height="15" fill="rgb(225,21,48)" fg:x="62622" fg:w="20"/><text x="68.3270%" y="175.50"></text></g><g><title>`0x7FF813B7A9E3 (26 samples, 0.03%)</title><rect x="68.1085%" y="165" width="0.0283%" height="15" fill="rgb(239,223,50)" fg:x="62651" fg:w="26"/><text x="68.3585%" y="175.50"></text></g><g><title>`0x7FF813B7AA2D (18 samples, 0.02%)</title><rect x="68.1575%" y="165" width="0.0196%" height="15" fill="rgb(244,45,21)" fg:x="62696" fg:w="18"/><text x="68.4075%" y="175.50"></text></g><g><title>`0x7FF813B7AA2E (11 samples, 0.01%)</title><rect x="68.1770%" y="165" width="0.0120%" height="15" fill="rgb(232,33,43)" fg:x="62714" fg:w="11"/><text x="68.4270%" y="175.50"></text></g><g><title>`0x7FF813B7AA30 (43 samples, 0.05%)</title><rect x="68.1890%" y="165" width="0.0467%" height="15" fill="rgb(209,8,3)" fg:x="62725" fg:w="43"/><text x="68.4390%" y="175.50"></text></g><g><title>`0x7FF813B7B27B (24 samples, 0.03%)</title><rect x="68.2836%" y="165" width="0.0261%" height="15" fill="rgb(214,25,53)" fg:x="62812" fg:w="24"/><text x="68.5336%" y="175.50"></text></g><g><title>`0x7FF813B7B2AF (20 samples, 0.02%)</title><rect x="68.3347%" y="165" width="0.0217%" height="15" fill="rgb(254,186,54)" fg:x="62859" fg:w="20"/><text x="68.5847%" y="175.50"></text></g><g><title>`0x7FF813B7B309 (18 samples, 0.02%)</title><rect x="68.3803%" y="165" width="0.0196%" height="15" fill="rgb(208,174,49)" fg:x="62901" fg:w="18"/><text x="68.6303%" y="175.50"></text></g><g><title>`0x7FF813B7B378 (23 samples, 0.03%)</title><rect x="68.4162%" y="165" width="0.0250%" height="15" fill="rgb(233,191,51)" fg:x="62934" fg:w="23"/><text x="68.6662%" y="175.50"></text></g><g><title>`0x7FF813B7B394 (16 samples, 0.02%)</title><rect x="68.4553%" y="165" width="0.0174%" height="15" fill="rgb(222,134,10)" fg:x="62970" fg:w="16"/><text x="68.7053%" y="175.50"></text></g><g><title>`0x7FF813B7B396 (16 samples, 0.02%)</title><rect x="68.4727%" y="165" width="0.0174%" height="15" fill="rgb(230,226,20)" fg:x="62986" fg:w="16"/><text x="68.7227%" y="175.50"></text></g><g><title>`0x7FF813B7B39E (47 samples, 0.05%)</title><rect x="68.4901%" y="165" width="0.0511%" height="15" fill="rgb(251,111,25)" fg:x="63002" fg:w="47"/><text x="68.7401%" y="175.50"></text></g><g><title>`0x7FF813B7B3A1 (23 samples, 0.03%)</title><rect x="68.5412%" y="165" width="0.0250%" height="15" fill="rgb(224,40,46)" fg:x="63049" fg:w="23"/><text x="68.7912%" y="175.50"></text></g><g><title>`0x7FF813B7B650 (20 samples, 0.02%)</title><rect x="68.6119%" y="149" width="0.0217%" height="15" fill="rgb(236,108,47)" fg:x="63114" fg:w="20"/><text x="68.8619%" y="159.50"></text></g><g><title>`0x7FF813B7B663 (28 samples, 0.03%)</title><rect x="68.6423%" y="149" width="0.0304%" height="15" fill="rgb(234,93,0)" fg:x="63142" fg:w="28"/><text x="68.8923%" y="159.50"></text></g><g><title>`0x7FF813B7B66B (43 samples, 0.05%)</title><rect x="68.6782%" y="149" width="0.0467%" height="15" fill="rgb(224,213,32)" fg:x="63175" fg:w="43"/><text x="68.9282%" y="159.50"></text></g><g><title>`0x7FF813B7B676 (16 samples, 0.02%)</title><rect x="68.7271%" y="149" width="0.0174%" height="15" fill="rgb(251,11,48)" fg:x="63220" fg:w="16"/><text x="68.9771%" y="159.50"></text></g><g><title>`0x7FF813B7B693 (18 samples, 0.02%)</title><rect x="68.7521%" y="149" width="0.0196%" height="15" fill="rgb(236,173,5)" fg:x="63243" fg:w="18"/><text x="69.0021%" y="159.50"></text></g><g><title>`0x7FF813B7B6A1 (16 samples, 0.02%)</title><rect x="68.7771%" y="149" width="0.0174%" height="15" fill="rgb(230,95,12)" fg:x="63266" fg:w="16"/><text x="69.0271%" y="159.50"></text></g><g><title>`0x7FF813B7B6A6 (43 samples, 0.05%)</title><rect x="68.7945%" y="149" width="0.0467%" height="15" fill="rgb(232,209,1)" fg:x="63282" fg:w="43"/><text x="69.0445%" y="159.50"></text></g><g><title>`0x7FF813B7B6A8 (10 samples, 0.01%)</title><rect x="68.8412%" y="149" width="0.0109%" height="15" fill="rgb(232,6,1)" fg:x="63325" fg:w="10"/><text x="69.0912%" y="159.50"></text></g><g><title>`0x7FF813B7B70B (18 samples, 0.02%)</title><rect x="68.8586%" y="149" width="0.0196%" height="15" fill="rgb(210,224,50)" fg:x="63341" fg:w="18"/><text x="69.1086%" y="159.50"></text></g><g><title>`0x7FF813B7B721 (78 samples, 0.08%)</title><rect x="68.8923%" y="149" width="0.0848%" height="15" fill="rgb(228,127,35)" fg:x="63372" fg:w="78"/><text x="69.1423%" y="159.50"></text></g><g><title>`0x7FF813B7B73C (107 samples, 0.12%)</title><rect x="68.9782%" y="149" width="0.1163%" height="15" fill="rgb(245,102,45)" fg:x="63451" fg:w="107"/><text x="69.2282%" y="159.50"></text></g><g><title>`0x7FF813B7B73F (29 samples, 0.03%)</title><rect x="69.0945%" y="149" width="0.0315%" height="15" fill="rgb(214,1,49)" fg:x="63558" fg:w="29"/><text x="69.3445%" y="159.50"></text></g><g><title>`0x7FF813B7B748 (81 samples, 0.09%)</title><rect x="69.1261%" y="149" width="0.0881%" height="15" fill="rgb(226,163,40)" fg:x="63587" fg:w="81"/><text x="69.3761%" y="159.50"></text></g><g><title>`0x7FF813B7B74F (21 samples, 0.02%)</title><rect x="69.2141%" y="149" width="0.0228%" height="15" fill="rgb(239,212,28)" fg:x="63668" fg:w="21"/><text x="69.4641%" y="159.50"></text></g><g><title>`0x7FF813B7B763 (34 samples, 0.04%)</title><rect x="69.2402%" y="149" width="0.0370%" height="15" fill="rgb(220,20,13)" fg:x="63692" fg:w="34"/><text x="69.4902%" y="159.50"></text></g><g><title>`0x7FF813B7B788 (27 samples, 0.03%)</title><rect x="69.2783%" y="149" width="0.0294%" height="15" fill="rgb(210,164,35)" fg:x="63727" fg:w="27"/><text x="69.5283%" y="159.50"></text></g><g><title>`0x7FF813B7B7A2 (130 samples, 0.14%)</title><rect x="69.3109%" y="149" width="0.1413%" height="15" fill="rgb(248,109,41)" fg:x="63757" fg:w="130"/><text x="69.5609%" y="159.50"></text></g><g><title>`0x7FF813B7B7E6 (36 samples, 0.04%)</title><rect x="69.4555%" y="149" width="0.0391%" height="15" fill="rgb(238,23,50)" fg:x="63890" fg:w="36"/><text x="69.7055%" y="159.50"></text></g><g><title>`0x7FF813B7B81B (35 samples, 0.04%)</title><rect x="69.4990%" y="149" width="0.0380%" height="15" fill="rgb(211,48,49)" fg:x="63930" fg:w="35"/><text x="69.7490%" y="159.50"></text></g><g><title>`0x7FF813B7B83C (30 samples, 0.03%)</title><rect x="69.5457%" y="149" width="0.0326%" height="15" fill="rgb(223,36,21)" fg:x="63973" fg:w="30"/><text x="69.7957%" y="159.50"></text></g><g><title>`0x7FF813B7B862 (28 samples, 0.03%)</title><rect x="69.5805%" y="149" width="0.0304%" height="15" fill="rgb(207,123,46)" fg:x="64005" fg:w="28"/><text x="69.8305%" y="159.50"></text></g><g><title>`0x7FF813B543E2 (19 samples, 0.02%)</title><rect x="69.6120%" y="133" width="0.0207%" height="15" fill="rgb(240,218,32)" fg:x="64034" fg:w="19"/><text x="69.8620%" y="143.50"></text></g><g><title>`0x7FF813B543E6 (28 samples, 0.03%)</title><rect x="69.6327%" y="133" width="0.0304%" height="15" fill="rgb(252,5,43)" fg:x="64053" fg:w="28"/><text x="69.8827%" y="143.50"></text></g><g><title>`0x7FF813B54442 (10 samples, 0.01%)</title><rect x="69.6968%" y="133" width="0.0109%" height="15" fill="rgb(252,84,19)" fg:x="64112" fg:w="10"/><text x="69.9468%" y="143.50"></text></g><g><title>`0x7FF813B54445 (18 samples, 0.02%)</title><rect x="69.7077%" y="133" width="0.0196%" height="15" fill="rgb(243,152,39)" fg:x="64122" fg:w="18"/><text x="69.9577%" y="143.50"></text></g><g><title>`0x7FF813B5444B (10 samples, 0.01%)</title><rect x="69.7283%" y="133" width="0.0109%" height="15" fill="rgb(234,160,15)" fg:x="64141" fg:w="10"/><text x="69.9783%" y="143.50"></text></g><g><title>`0x7FF813B5444E (28 samples, 0.03%)</title><rect x="69.7392%" y="133" width="0.0304%" height="15" fill="rgb(237,34,20)" fg:x="64151" fg:w="28"/><text x="69.9892%" y="143.50"></text></g><g><title>`0x7FF813B54452 (120 samples, 0.13%)</title><rect x="69.7696%" y="133" width="0.1305%" height="15" fill="rgb(229,97,13)" fg:x="64179" fg:w="120"/><text x="70.0196%" y="143.50"></text></g><g><title>`0x7FF813B54455 (15 samples, 0.02%)</title><rect x="69.9001%" y="133" width="0.0163%" height="15" fill="rgb(234,71,50)" fg:x="64299" fg:w="15"/><text x="70.1501%" y="143.50"></text></g><g><title>`0x7FF813B54458 (19 samples, 0.02%)</title><rect x="69.9164%" y="133" width="0.0207%" height="15" fill="rgb(253,155,4)" fg:x="64314" fg:w="19"/><text x="70.1664%" y="143.50"></text></g><g><title>`0x7FF813B5445C (36 samples, 0.04%)</title><rect x="69.9371%" y="133" width="0.0391%" height="15" fill="rgb(222,185,37)" fg:x="64333" fg:w="36"/><text x="70.1871%" y="143.50"></text></g><g><title>`0x7FF813B54479 (12 samples, 0.01%)</title><rect x="69.9914%" y="133" width="0.0130%" height="15" fill="rgb(251,177,13)" fg:x="64383" fg:w="12"/><text x="70.2414%" y="143.50"></text></g><g><title>`0x7FF813BF6827 (26 samples, 0.03%)</title><rect x="70.0153%" y="133" width="0.0283%" height="15" fill="rgb(250,179,40)" fg:x="64405" fg:w="26"/><text x="70.2653%" y="143.50"></text></g><g><title>`0x7FF813BF6835 (33 samples, 0.04%)</title><rect x="70.0436%" y="133" width="0.0359%" height="15" fill="rgb(242,44,2)" fg:x="64431" fg:w="33"/><text x="70.2936%" y="143.50"></text></g><g><title>`0x7FF813BF684A (10 samples, 0.01%)</title><rect x="70.0925%" y="133" width="0.0109%" height="15" fill="rgb(216,177,13)" fg:x="64476" fg:w="10"/><text x="70.3425%" y="143.50"></text></g><g><title>`0x7FF813B7B86B (458 samples, 0.50%)</title><rect x="69.6120%" y="149" width="0.4979%" height="15" fill="rgb(216,106,43)" fg:x="64034" fg:w="458"/><text x="69.8620%" y="159.50"></text></g><g><title>`0x7FF813B7B87A (46 samples, 0.05%)</title><rect x="70.1132%" y="149" width="0.0500%" height="15" fill="rgb(216,183,2)" fg:x="64495" fg:w="46"/><text x="70.3632%" y="159.50"></text></g><g><title>`0x7FF813B7B896 (29 samples, 0.03%)</title><rect x="70.1751%" y="149" width="0.0315%" height="15" fill="rgb(249,75,3)" fg:x="64552" fg:w="29"/><text x="70.4251%" y="159.50"></text></g><g><title>`0x7FF813B7B89D (15 samples, 0.02%)</title><rect x="70.2088%" y="149" width="0.0163%" height="15" fill="rgb(219,67,39)" fg:x="64583" fg:w="15"/><text x="70.4588%" y="159.50"></text></g><g><title>`0x7FF813B7B8A4 (699 samples, 0.76%)</title><rect x="70.2284%" y="149" width="0.7599%" height="15" fill="rgb(253,228,2)" fg:x="64601" fg:w="699"/><text x="70.4784%" y="159.50"></text></g><g><title>`0x7FF813B7B8AA (22 samples, 0.02%)</title><rect x="70.9883%" y="149" width="0.0239%" height="15" fill="rgb(235,138,27)" fg:x="65300" fg:w="22"/><text x="71.2383%" y="159.50"></text></g><g><title>`0x7FF813B7B8D4 (22 samples, 0.02%)</title><rect x="71.0133%" y="149" width="0.0239%" height="15" fill="rgb(236,97,51)" fg:x="65323" fg:w="22"/><text x="71.2633%" y="159.50"></text></g><g><title>`0x7FF813B7B8F2 (18 samples, 0.02%)</title><rect x="71.0481%" y="149" width="0.0196%" height="15" fill="rgb(240,80,30)" fg:x="65355" fg:w="18"/><text x="71.2981%" y="159.50"></text></g><g><title>`0x7FF813B7BA28 (21 samples, 0.02%)</title><rect x="71.0861%" y="149" width="0.0228%" height="15" fill="rgb(230,178,19)" fg:x="65390" fg:w="21"/><text x="71.3361%" y="159.50"></text></g><g><title>`0x7FF813B7D7C1 (58 samples, 0.06%)</title><rect x="71.1285%" y="85" width="0.0631%" height="15" fill="rgb(210,190,27)" fg:x="65429" fg:w="58"/><text x="71.3785%" y="95.50"></text></g><g><title>`0x7FF813B7E237 (18 samples, 0.02%)</title><rect x="71.2220%" y="85" width="0.0196%" height="15" fill="rgb(222,107,31)" fg:x="65515" fg:w="18"/><text x="71.4720%" y="95.50"></text></g><g><title>`0x7FF813B6F44F (112 samples, 0.12%)</title><rect x="71.1274%" y="117" width="0.1218%" height="15" fill="rgb(216,127,34)" fg:x="65428" fg:w="112"/><text x="71.3774%" y="127.50"></text></g><g><title>`0x7FF813B7B44D (112 samples, 0.12%)</title><rect x="71.1274%" y="101" width="0.1218%" height="15" fill="rgb(234,116,52)" fg:x="65428" fg:w="112"/><text x="71.3774%" y="111.50"></text></g><g><title>`0x7FF813B7BEDA (159 samples, 0.17%)</title><rect x="71.1253%" y="149" width="0.1729%" height="15" fill="rgb(222,124,15)" fg:x="65426" fg:w="159"/><text x="71.3753%" y="159.50"></text></g><g><title>`0x7FF813B70B31 (157 samples, 0.17%)</title><rect x="71.1274%" y="133" width="0.1707%" height="15" fill="rgb(231,179,28)" fg:x="65428" fg:w="157"/><text x="71.3774%" y="143.50"></text></g><g><title>`0x7FF813B6F525 (36 samples, 0.04%)</title><rect x="71.2590%" y="117" width="0.0391%" height="15" fill="rgb(226,93,45)" fg:x="65549" fg:w="36"/><text x="71.5090%" y="127.50"></text></g><g><title>`0x7FF813BED9E4 (35 samples, 0.04%)</title><rect x="71.2601%" y="101" width="0.0380%" height="15" fill="rgb(215,8,51)" fg:x="65550" fg:w="35"/><text x="71.5101%" y="111.50"></text></g><g><title>`0x7FF813B5A16F (31 samples, 0.03%)</title><rect x="71.3123%" y="133" width="0.0337%" height="15" fill="rgb(223,106,5)" fg:x="65598" fg:w="31"/><text x="71.5623%" y="143.50"></text></g><g><title>`0x7FF813B5A176 (30 samples, 0.03%)</title><rect x="71.3460%" y="133" width="0.0326%" height="15" fill="rgb(250,191,5)" fg:x="65629" fg:w="30"/><text x="71.5960%" y="143.50"></text></g><g><title>`0x7FF813B5A179 (16 samples, 0.02%)</title><rect x="71.3786%" y="133" width="0.0174%" height="15" fill="rgb(242,132,44)" fg:x="65659" fg:w="16"/><text x="71.6286%" y="143.50"></text></g><g><title>`0x7FF813B7BF5E (97 samples, 0.11%)</title><rect x="71.2981%" y="149" width="0.1054%" height="15" fill="rgb(251,152,29)" fg:x="65585" fg:w="97"/><text x="71.5481%" y="159.50"></text></g><g><title>`0x7FF813B7B3C7 (2,603 samples, 2.83%)</title><rect x="68.5760%" y="165" width="2.8297%" height="15" fill="rgb(218,179,5)" fg:x="63081" fg:w="2603"/><text x="68.8260%" y="175.50">`0..</text></g><g><title>`0x7FF813B7B502 (24 samples, 0.03%)</title><rect x="71.4177%" y="165" width="0.0261%" height="15" fill="rgb(227,67,19)" fg:x="65695" fg:w="24"/><text x="71.6677%" y="175.50"></text></g><g><title>`0x7FF813B7B527 (23 samples, 0.03%)</title><rect x="71.4438%" y="165" width="0.0250%" height="15" fill="rgb(233,119,31)" fg:x="65719" fg:w="23"/><text x="71.6938%" y="175.50"></text></g><g><title>`0x7FF813B7B633 (31 samples, 0.03%)</title><rect x="71.4699%" y="165" width="0.0337%" height="15" fill="rgb(241,120,22)" fg:x="65743" fg:w="31"/><text x="71.7199%" y="175.50"></text></g><g><title>hello.exe`__rust_alloc (16 samples, 0.02%)</title><rect x="71.5079%" y="165" width="0.0174%" height="15" fill="rgb(224,102,30)" fg:x="65778" fg:w="16"/><text x="71.7579%" y="175.50"></text></g><g><title>hello.exe`std::alloc::__default_lib_allocator::__rdl_alloc (170 samples, 0.18%)</title><rect x="71.5340%" y="165" width="0.1848%" height="15" fill="rgb(210,164,37)" fg:x="65802" fg:w="170"/><text x="71.7840%" y="175.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::impl$0::alloc (160 samples, 0.17%)</title><rect x="71.5449%" y="149" width="0.1739%" height="15" fill="rgb(226,191,16)" fg:x="65812" fg:w="160"/><text x="71.7949%" y="159.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::allocate (160 samples, 0.17%)</title><rect x="71.5449%" y="133" width="0.1739%" height="15" fill="rgb(214,40,45)" fg:x="65812" fg:w="160"/><text x="71.7949%" y="143.50"></text></g><g><title>hello.exe`serde::de::impls::impl$6::visit_str(serde::de::impls::StringVisitor, ref$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="373" width="3.8158%" height="15" fill="rgb(244,29,26)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="383.50">hell..</text></g><g><title>hello.exe`alloc::str::impl$4::to_owned(ref$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="357" width="3.8158%" height="15" fill="rgb(216,16,5)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="367.50">hell..</text></g><g><title>hello.exe`alloc::slice::impl$9::to_owned(ref$&lt;slice2$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="341" width="3.8158%" height="15" fill="rgb(249,76,35)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="351.50">hell..</text></g><g><title>hello.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="325" width="3.8158%" height="15" fill="rgb(207,11,44)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="335.50">hell..</text></g><g><title>hello.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="309" width="3.8158%" height="15" fill="rgb(228,190,49)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="319.50">hell..</text></g><g><title>hello.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="293" width="3.8158%" height="15" fill="rgb(214,173,12)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="303.50">hell..</text></g><g><title>hello.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (3,510 samples, 3.82%)</title><rect x="67.9955%" y="277" width="3.8158%" height="15" fill="rgb(218,26,35)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="287.50">hell..</text></g><g><title>hello.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (3,510 samples, 3.82%)</title><rect x="67.9955%" y="261" width="3.8158%" height="15" fill="rgb(220,200,19)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="271.50">hell..</text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (3,510 samples, 3.82%)</title><rect x="67.9955%" y="245" width="3.8158%" height="15" fill="rgb(239,95,49)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="255.50">hell..</text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::allocate_in (3,510 samples, 3.82%)</title><rect x="67.9955%" y="229" width="3.8158%" height="15" fill="rgb(235,85,53)" fg:x="62547" fg:w="3510"/><text x="68.2455%" y="239.50">hell..</text></g><g><title>hello.exe`alloc::alloc::impl$1::allocate (3,505 samples, 3.81%)</title><rect x="68.0009%" y="213" width="3.8103%" height="15" fill="rgb(233,133,31)" fg:x="62552" fg:w="3505"/><text x="68.2509%" y="223.50">hell..</text></g><g><title>hello.exe`alloc::alloc::Global::alloc_impl (3,505 samples, 3.81%)</title><rect x="68.0009%" y="197" width="3.8103%" height="15" fill="rgb(218,25,20)" fg:x="62552" fg:w="3505"/><text x="68.2509%" y="207.50">hell..</text></g><g><title>hello.exe`alloc::alloc::alloc (3,505 samples, 3.81%)</title><rect x="68.0009%" y="181" width="3.8103%" height="15" fill="rgb(252,210,38)" fg:x="62552" fg:w="3505"/><text x="68.2509%" y="191.50">hell..</text></g><g><title>hello.exe`std::sys::pal::windows::alloc::process_heap_alloc (85 samples, 0.09%)</title><rect x="71.7188%" y="165" width="0.0924%" height="15" fill="rgb(242,134,21)" fg:x="65972" fg:w="85"/><text x="71.9688%" y="175.50"></text></g><g><title>hello.exe`std::sys::pal::windows::alloc::init_or_get_process_heap (23 samples, 0.03%)</title><rect x="71.7862%" y="149" width="0.0250%" height="15" fill="rgb(213,28,48)" fg:x="66034" fg:w="23"/><text x="72.0362%" y="159.50"></text></g><g><title>hello.exe`core::sync::atomic::AtomicPtr::load (14 samples, 0.02%)</title><rect x="71.7960%" y="133" width="0.0152%" height="15" fill="rgb(250,196,2)" fg:x="66043" fg:w="14"/><text x="72.0460%" y="143.50"></text></g><g><title>hello.exe`core::sync::atomic::atomic_load (14 samples, 0.02%)</title><rect x="71.7960%" y="117" width="0.0152%" height="15" fill="rgb(227,5,17)" fg:x="66043" fg:w="14"/><text x="72.0460%" y="127.50"></text></g><g><title>hello.exe`serde_json::de::Deserializer&lt;serde_json::read::StrRead&gt;::parse_whitespace (40 samples, 0.04%)</title><rect x="71.8112%" y="373" width="0.0435%" height="15" fill="rgb(221,226,24)" fg:x="66057" fg:w="40"/><text x="72.0612%" y="383.50"></text></g><g><title>hello.exe`serde_json::de::Deserializer&lt;serde_json::read::StrRead&gt;::peek (33 samples, 0.04%)</title><rect x="71.8188%" y="357" width="0.0359%" height="15" fill="rgb(211,5,48)" fg:x="66064" fg:w="33"/><text x="72.0688%" y="367.50"></text></g><g><title>hello.exe`serde_json::read::impl$10::peek (33 samples, 0.04%)</title><rect x="71.8188%" y="341" width="0.0359%" height="15" fill="rgb(219,150,6)" fg:x="66064" fg:w="33"/><text x="72.0688%" y="351.50"></text></g><g><title>hello.exe`serde_json::read::impl$7::peek (33 samples, 0.04%)</title><rect x="71.8188%" y="325" width="0.0359%" height="15" fill="rgb(251,46,16)" fg:x="66064" fg:w="33"/><text x="72.0688%" y="335.50"></text></g><g><title>hello.exe`enum2$&lt;core::result::Result&lt;ref$&lt;str$&gt;,serde_json::error::Error&gt; &gt;::map(enum2$&lt;core::result::Result&lt;ref$&lt;str$&gt;,serde_json::error::Error&gt; &gt;, enum2$&lt;serde_json::read::Reference&lt;str$&gt; &gt; (*)(ref$ (46 samples, 0.05%)</title><rect x="74.3496%" y="341" width="0.0500%" height="15" fill="rgb(220,204,40)" fg:x="68392" fg:w="46"/><text x="74.5996%" y="351.50"></text></g><g><title>hello.exe`serde::de::impl$5::deserialize(core::marker::PhantomData&lt;alloc::string::String&gt;, serde_json::de::Deserializer (6,284 samples, 6.83%)</title><rect x="67.5726%" y="437" width="6.8314%" height="15" fill="rgb(211,85,2)" fg:x="62158" fg:w="6284"/><text x="67.8226%" y="447.50">hello.exe..</text></g><g><title>hello.exe`serde::de::impls::impl$8::deserialize(serde_json::de::Deserializer (6,284 samples, 6.83%)</title><rect x="67.5726%" y="421" width="6.8314%" height="15" fill="rgb(229,17,7)" fg:x="62158" fg:w="6284"/><text x="67.8226%" y="431.50">hello.exe..</text></g><g><title>hello.exe`serde_json::de::impl$7::deserialize_string&lt;serde_json::read::StrRead,serde::de::impls::StringVisitor&gt;(serde_json::de::Deserializer (6,269 samples, 6.82%)</title><rect x="67.5889%" y="405" width="6.8151%" height="15" fill="rgb(239,72,28)" fg:x="62173" fg:w="6269"/><text x="67.8389%" y="415.50">hello.exe..</text></g><g><title>hello.exe`serde_json::de::impl$7::deserialize_str(serde_json::de::Deserializer (6,185 samples, 6.72%)</title><rect x="67.6802%" y="389" width="6.7238%" height="15" fill="rgb(230,47,54)" fg:x="62257" fg:w="6185"/><text x="67.9302%" y="399.50">hello.exe..</text></g><g><title>hello.exe`serde_json::read::impl$10::parse_str(serde_json::read::StrRead*, alloc::vec::Vec (2,345 samples, 2.55%)</title><rect x="71.8547%" y="373" width="2.5493%" height="15" fill="rgb(214,50,8)" fg:x="66097" fg:w="2345"/><text x="72.1047%" y="383.50">he..</text></g><g><title>hello.exe`serde_json::read::SliceRead::parse_str_bytes(alloc::vec::Vec (2,170 samples, 2.36%)</title><rect x="72.0450%" y="357" width="2.3590%" height="15" fill="rgb(216,198,43)" fg:x="66272" fg:w="2170"/><text x="72.2950%" y="367.50">h..</text></g><g><title>hello.exe`serde_json::de::impl$7::deserialize_seq&lt;serde_json::read::StrRead,serde::de::impls::impl$19::deserialize::VecVisitor&lt;alloc::string::String&gt; &gt;(serde_json::de::Deserializer&lt;serde_json::read::StrRead&gt;*, serde::de::impls::impl$19::deserialize::VecVisitor (7,849 samples, 8.53%)</title><rect x="65.9800%" y="485" width="8.5327%" height="15" fill="rgb(234,20,35)" fg:x="60693" fg:w="7849"/><text x="66.2300%" y="495.50">hello.exe`se..</text></g><g><title>hello.exe`serde::de::impls::impl$19::deserialize::impl$0::visit_seq&lt;alloc::string::String,serde_json::de::SeqAccess&lt;serde_json::read::StrRead&gt; &gt;(serde::de::impls::impl$19::deserialize::VecVisitor&lt;alloc::string::String&gt;, serde_json::de::SeqAccess (7,849 samples, 8.53%)</title><rect x="65.9800%" y="469" width="8.5327%" height="15" fill="rgb(254,45,19)" fg:x="60693" fg:w="7849"/><text x="66.2300%" y="479.50">hello.exe`se..</text></g><g><title>hello.exe`serde_json::de::impl$9::next_element_seed&lt;serde_json::read::StrRead,core::marker::PhantomData&lt;alloc::string::String&gt; &gt;(serde_json::de::SeqAccess&lt;serde_json::read::StrRead&gt;*, core::marker::PhantomData (6,974 samples, 7.58%)</title><rect x="66.9312%" y="453" width="7.5815%" height="15" fill="rgb(219,14,44)" fg:x="61568" fg:w="6974"/><text x="67.1812%" y="463.50">hello.exe`..</text></g><g><title>hello.exe`serde_json::de::Deserializer&lt;serde_json::read::StrRead&gt;::parse_whitespace (96 samples, 0.10%)</title><rect x="74.4083%" y="437" width="0.1044%" height="15" fill="rgb(217,220,26)" fg:x="68446" fg:w="96"/><text x="74.6583%" y="447.50"></text></g><g><title>hello.exe`serde_json::de::Deserializer&lt;serde_json::read::StrRead&gt;::peek (88 samples, 0.10%)</title><rect x="74.4170%" y="421" width="0.0957%" height="15" fill="rgb(213,158,28)" fg:x="68454" fg:w="88"/><text x="74.6670%" y="431.50"></text></g><g><title>hello.exe`serde_json::read::impl$10::peek (88 samples, 0.10%)</title><rect x="74.4170%" y="405" width="0.0957%" height="15" fill="rgb(252,51,52)" fg:x="68454" fg:w="88"/><text x="74.6670%" y="415.50"></text></g><g><title>hello.exe`serde_json::read::impl$7::peek (88 samples, 0.10%)</title><rect x="74.4170%" y="389" width="0.0957%" height="15" fill="rgb(246,89,16)" fg:x="68454" fg:w="88"/><text x="74.6670%" y="399.50"></text></g><g><title>hello.exe`enum2$&lt;core::option::Option&lt;alloc::string::String&gt; &gt;::is_some (7,855 samples, 8.54%)</title><rect x="65.9789%" y="501" width="8.5393%" height="15" fill="rgb(216,158,49)" fg:x="60692" fg:w="7855"/><text x="66.2289%" y="511.50">hello.exe`en..</text></g><g><title>hello.exe`hello::_::impl$0::deserialize::impl$2::visit_map(hello::_::impl$0::deserialize::__Visitor, serde_json::de::MapAccess (7,857 samples, 8.54%)</title><rect x="65.9778%" y="517" width="8.5414%" height="15" fill="rgb(236,107,19)" fg:x="60691" fg:w="7857"/><text x="66.2278%" y="527.50">hello.exe`he..</text></g><g><title>hello.exe`serde_json::de::from_str(ref$ (7,861 samples, 8.55%)</title><rect x="65.9745%" y="565" width="8.5458%" height="15" fill="rgb(228,185,30)" fg:x="60688" fg:w="7861"/><text x="66.2245%" y="575.50">hello.exe`se..</text></g><g><title>hello.exe`serde_json::de::from_trait&lt;serde_json::read::StrRead,hello::FileData&gt; (7,861 samples, 8.55%)</title><rect x="65.9745%" y="549" width="8.5458%" height="15" fill="rgb(246,134,8)" fg:x="60688" fg:w="7861"/><text x="66.2245%" y="559.50">hello.exe`se..</text></g><g><title>hello.exe`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::StrRead,hello::_::impl$0::deserialize::__Visitor&gt;(serde_json::de::Deserializer&lt;serde_json::read::StrRead&gt;*, ref$&lt;str$&gt;, ref$&lt;slice2$&lt;ref$ (7,858 samples, 8.54%)</title><rect x="65.9778%" y="533" width="8.5425%" height="15" fill="rgb(214,143,50)" fg:x="60691" fg:w="7858"/><text x="66.2278%" y="543.50">hello.exe`se..</text></g><g><title>hello.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,f64,std::hash::random::RandomState&gt;::insert (27 samples, 0.03%)</title><rect x="74.5203%" y="565" width="0.0294%" height="15" fill="rgb(228,75,8)" fg:x="68549" fg:w="27"/><text x="74.7703%" y="575.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (339 samples, 0.37%)</title><rect x="75.9933%" y="357" width="0.3685%" height="15" fill="rgb(207,175,4)" fg:x="69904" fg:w="339"/><text x="76.2433%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (580 samples, 0.63%)</title><rect x="75.8161%" y="373" width="0.6305%" height="15" fill="rgb(205,108,24)" fg:x="69741" fg:w="580"/><text x="76.0661%" y="383.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (78 samples, 0.08%)</title><rect x="76.3619%" y="357" width="0.0848%" height="15" fill="rgb(244,120,49)" fg:x="70243" fg:w="78"/><text x="76.6119%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (470 samples, 0.51%)</title><rect x="76.4467%" y="373" width="0.5109%" height="15" fill="rgb(223,47,38)" fg:x="70321" fg:w="470"/><text x="76.6967%" y="383.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (118 samples, 0.13%)</title><rect x="76.8293%" y="357" width="0.1283%" height="15" fill="rgb(229,179,11)" fg:x="70673" fg:w="118"/><text x="77.0793%" y="367.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash(ref$ (1,840 samples, 2.00%)</title><rect x="74.9584%" y="485" width="2.0003%" height="15" fill="rgb(231,122,1)" fg:x="68952" fg:w="1840"/><text x="75.2084%" y="495.50">h..</text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (1,840 samples, 2.00%)</title><rect x="74.9584%" y="469" width="2.0003%" height="15" fill="rgb(245,119,9)" fg:x="68952" fg:w="1840"/><text x="75.2084%" y="479.50">h..</text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (1,840 samples, 2.00%)</title><rect x="74.9584%" y="453" width="2.0003%" height="15" fill="rgb(241,163,25)" fg:x="68952" fg:w="1840"/><text x="75.2084%" y="463.50">h..</text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (1,840 samples, 2.00%)</title><rect x="74.9584%" y="437" width="2.0003%" height="15" fill="rgb(217,214,3)" fg:x="68952" fg:w="1840"/><text x="75.2084%" y="447.50">h..</text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (1,840 samples, 2.00%)</title><rect x="74.9584%" y="421" width="2.0003%" height="15" fill="rgb(240,86,28)" fg:x="68952" fg:w="1840"/><text x="75.2084%" y="431.50">h..</text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (1,831 samples, 1.99%)</title><rect x="74.9682%" y="405" width="1.9905%" height="15" fill="rgb(215,47,9)" fg:x="68961" fg:w="1831"/><text x="75.2182%" y="415.50">h..</text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1,742 samples, 1.89%)</title><rect x="75.0650%" y="389" width="1.8937%" height="15" fill="rgb(252,25,45)" fg:x="69050" fg:w="1742"/><text x="75.3150%" y="399.50">h..</text></g><g><title>hello.exe`std::hash::random::impl$1::build_hasher (237 samples, 0.26%)</title><rect x="76.9587%" y="485" width="0.2576%" height="15" fill="rgb(251,164,9)" fg:x="70792" fg:w="237"/><text x="77.2087%" y="495.50"></text></g><g><title>hello.exe`core::hash::sip::SipHasher13::new_with_keys (87 samples, 0.09%)</title><rect x="77.1218%" y="469" width="0.0946%" height="15" fill="rgb(233,194,0)" fg:x="70942" fg:w="87"/><text x="77.3718%" y="479.50"></text></g><g><title>hello.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (87 samples, 0.09%)</title><rect x="77.1218%" y="453" width="0.0946%" height="15" fill="rgb(249,111,24)" fg:x="70942" fg:w="87"/><text x="77.3718%" y="463.50"></text></g><g><title>hello.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (87 samples, 0.09%)</title><rect x="77.1218%" y="437" width="0.0946%" height="15" fill="rgb(250,223,3)" fg:x="70942" fg:w="87"/><text x="77.3718%" y="447.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (27 samples, 0.03%)</title><rect x="78.6144%" y="405" width="0.0294%" height="15" fill="rgb(236,178,37)" fg:x="72315" fg:w="27"/><text x="78.8644%" y="415.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (50 samples, 0.05%)</title><rect x="78.6002%" y="421" width="0.0544%" height="15" fill="rgb(241,158,50)" fg:x="72302" fg:w="50"/><text x="78.8502%" y="431.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (10 samples, 0.01%)</title><rect x="78.6437%" y="405" width="0.0109%" height="15" fill="rgb(213,121,41)" fg:x="72342" fg:w="10"/><text x="78.8937%" y="415.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (805 samples, 0.88%)</title><rect x="78.0241%" y="437" width="0.8751%" height="15" fill="rgb(240,92,3)" fg:x="71772" fg:w="805"/><text x="78.2741%" y="447.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (225 samples, 0.24%)</title><rect x="78.6546%" y="421" width="0.2446%" height="15" fill="rgb(205,123,3)" fg:x="72352" fg:w="225"/><text x="78.9046%" y="431.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (156 samples, 0.17%)</title><rect x="79.0786%" y="421" width="0.1696%" height="15" fill="rgb(205,97,47)" fg:x="72742" fg:w="156"/><text x="79.3286%" y="431.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (421 samples, 0.46%)</title><rect x="78.8992%" y="437" width="0.4577%" height="15" fill="rgb(247,152,14)" fg:x="72577" fg:w="421"/><text x="79.1492%" y="447.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (100 samples, 0.11%)</title><rect x="79.2482%" y="421" width="0.1087%" height="15" fill="rgb(248,195,53)" fg:x="72898" fg:w="100"/><text x="79.4982%" y="431.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (912 samples, 0.99%)</title><rect x="79.5580%" y="421" width="0.9914%" height="15" fill="rgb(226,201,16)" fg:x="73183" fg:w="912"/><text x="79.8080%" y="431.50"></text></g><g><title>hello.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$ (5,519 samples, 6.00%)</title><rect x="74.7193%" y="517" width="5.9998%" height="15" fill="rgb(205,98,0)" fg:x="68732" fg:w="5519"/><text x="74.9693%" y="527.50">hello.ex..</text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;str$&gt; &gt;(std::hash::random::RandomState*, ref$ (5,441 samples, 5.91%)</title><rect x="74.8040%" y="501" width="5.9150%" height="15" fill="rgb(214,191,48)" fg:x="68810" fg:w="5441"/><text x="75.0540%" y="511.50">hello.ex..</text></g><g><title>hello.exe`std::hash::random::impl$4::finish (3,222 samples, 3.50%)</title><rect x="77.2163%" y="485" width="3.5027%" height="15" fill="rgb(237,112,39)" fg:x="71029" fg:w="3222"/><text x="77.4663%" y="495.50">hel..</text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (3,222 samples, 3.50%)</title><rect x="77.2163%" y="469" width="3.5027%" height="15" fill="rgb(247,203,27)" fg:x="71029" fg:w="3222"/><text x="77.4663%" y="479.50">hel..</text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (3,222 samples, 3.50%)</title><rect x="77.2163%" y="453" width="3.5027%" height="15" fill="rgb(235,124,28)" fg:x="71029" fg:w="3222"/><text x="77.4663%" y="463.50">hel..</text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (1,253 samples, 1.36%)</title><rect x="79.3569%" y="437" width="1.3621%" height="15" fill="rgb(208,207,46)" fg:x="72998" fg:w="1253"/><text x="79.6069%" y="447.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (156 samples, 0.17%)</title><rect x="80.5494%" y="421" width="0.1696%" height="15" fill="rgb(234,176,4)" fg:x="74095" fg:w="156"/><text x="80.7994%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::bitmask::impl$3::next (319 samples, 0.35%)</title><rect x="80.9060%" y="469" width="0.3468%" height="15" fill="rgb(230,133,28)" fg:x="74423" fg:w="319"/><text x="81.1560%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (319 samples, 0.35%)</title><rect x="80.9060%" y="453" width="0.3468%" height="15" fill="rgb(211,137,40)" fg:x="74423" fg:w="319"/><text x="81.1560%" y="463.50"></text></g><g><title>hello.exe`core::num::nonzero::NonZero&lt;u16&gt;::new (319 samples, 0.35%)</title><rect x="80.9060%" y="437" width="0.3468%" height="15" fill="rgb(254,35,13)" fg:x="74423" fg:w="319"/><text x="81.1560%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::h2 (536 samples, 0.58%)</title><rect x="81.2528%" y="469" width="0.5827%" height="15" fill="rgb(225,49,51)" fg:x="74742" fg:w="536"/><text x="81.5028%" y="479.50"></text></g><g><title>`0x7FF807A61210 (60 samples, 0.07%)</title><rect x="89.2050%" y="341" width="0.0652%" height="15" fill="rgb(251,10,15)" fg:x="82057" fg:w="60"/><text x="89.4550%" y="351.50"></text></g><g><title>`0x7FF807A61213 (19 samples, 0.02%)</title><rect x="89.2702%" y="341" width="0.0207%" height="15" fill="rgb(228,207,15)" fg:x="82117" fg:w="19"/><text x="89.5202%" y="351.50"></text></g><g><title>`0x7FF807A61225 (1,763 samples, 1.92%)</title><rect x="89.2952%" y="341" width="1.9166%" height="15" fill="rgb(241,99,19)" fg:x="82140" fg:w="1763"/><text x="89.5452%" y="351.50">`..</text></g><g><title>`0x7FF807A61230 (18 samples, 0.02%)</title><rect x="91.2194%" y="341" width="0.0196%" height="15" fill="rgb(207,104,49)" fg:x="83910" fg:w="18"/><text x="91.4694%" y="351.50"></text></g><g><title>`0x7FF807A61242 (15 samples, 0.02%)</title><rect x="91.2477%" y="341" width="0.0163%" height="15" fill="rgb(234,99,18)" fg:x="83936" fg:w="15"/><text x="91.4977%" y="351.50"></text></g><g><title>`0x7FF807A61245 (898 samples, 0.98%)</title><rect x="91.2640%" y="341" width="0.9762%" height="15" fill="rgb(213,191,49)" fg:x="83951" fg:w="898"/><text x="91.5140%" y="351.50"></text></g><g><title>`0x7FF807A6124A (10 samples, 0.01%)</title><rect x="92.2402%" y="341" width="0.0109%" height="15" fill="rgb(210,226,19)" fg:x="84849" fg:w="10"/><text x="92.4902%" y="351.50"></text></g><g><title>`0x7FF807A61267 (34 samples, 0.04%)</title><rect x="92.2728%" y="341" width="0.0370%" height="15" fill="rgb(229,97,18)" fg:x="84879" fg:w="34"/><text x="92.5228%" y="351.50"></text></g><g><title>`0x7FF807A61272 (33 samples, 0.04%)</title><rect x="92.3109%" y="341" width="0.0359%" height="15" fill="rgb(211,167,15)" fg:x="84914" fg:w="33"/><text x="92.5609%" y="351.50"></text></g><g><title>`0x7FF807A61288 (63 samples, 0.07%)</title><rect x="92.3500%" y="341" width="0.0685%" height="15" fill="rgb(210,169,34)" fg:x="84950" fg:w="63"/><text x="92.6000%" y="351.50"></text></g><g><title>`0x7FF807A612A0 (11 samples, 0.01%)</title><rect x="92.4283%" y="341" width="0.0120%" height="15" fill="rgb(241,121,31)" fg:x="85022" fg:w="11"/><text x="92.6783%" y="351.50"></text></g><g><title>`0x7FF807A612A7 (163 samples, 0.18%)</title><rect x="92.4468%" y="341" width="0.1772%" height="15" fill="rgb(232,40,11)" fg:x="85039" fg:w="163"/><text x="92.6968%" y="351.50"></text></g><g><title>hello.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;str$,alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;*, tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (9,940 samples, 10.81%)</title><rect x="81.8355%" y="453" width="10.8059%" height="15" fill="rgb(205,86,26)" fg:x="75278" fg:w="9940"/><text x="82.0855%" y="463.50">hello.exe`hashbr..</text></g><g><title>hello.exe`hashbrown::impl$0::equivalent(ref$ (9,940 samples, 10.81%)</title><rect x="81.8355%" y="437" width="10.8059%" height="15" fill="rgb(231,126,28)" fg:x="75278" fg:w="9940"/><text x="82.0855%" y="447.50">hello.exe`hashbr..</text></g><g><title>hello.exe`core::cmp::impls::impl$9::eq(ref$&lt;str$&gt;*, ref$ (9,939 samples, 10.80%)</title><rect x="81.8366%" y="421" width="10.8048%" height="15" fill="rgb(219,221,18)" fg:x="75279" fg:w="9939"/><text x="82.0866%" y="431.50">hello.exe`core::..</text></g><g><title>hello.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (9,939 samples, 10.80%)</title><rect x="81.8366%" y="405" width="10.8048%" height="15" fill="rgb(211,40,0)" fg:x="75279" fg:w="9939"/><text x="82.0866%" y="415.50">hello.exe`core::..</text></g><g><title>hello.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (9,939 samples, 10.80%)</title><rect x="81.8366%" y="389" width="10.8048%" height="15" fill="rgb(239,85,43)" fg:x="75279" fg:w="9939"/><text x="82.0866%" y="399.50">hello.exe`core::..</text></g><g><title>hello.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (9,939 samples, 10.80%)</title><rect x="81.8366%" y="373" width="10.8048%" height="15" fill="rgb(231,55,21)" fg:x="75279" fg:w="9939"/><text x="82.0866%" y="383.50">hello.exe`core::..</text></g><g><title>hello.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (9,939 samples, 10.80%)</title><rect x="81.8366%" y="357" width="10.8048%" height="15" fill="rgb(225,184,43)" fg:x="75279" fg:w="9939"/><text x="82.0866%" y="367.50">hello.exe`core::..</text></g><g><title>hello.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;str$,alloc::string::String,std::collections::hash::set::HashSet (10,102 samples, 10.98%)</title><rect x="81.8355%" y="469" width="10.9820%" height="15" fill="rgb(251,158,41)" fg:x="75278" fg:w="10102"/><text x="82.0855%" y="479.50">hello.exe`hashbr..</text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::bucket (162 samples, 0.18%)</title><rect x="92.6414%" y="453" width="0.1761%" height="15" fill="rgb(234,159,37)" fg:x="85218" fg:w="162"/><text x="92.8914%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt; &gt;::from_base_index(core::ptr::non_null::NonNull&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (162 samples, 0.18%)</title><rect x="92.6414%" y="437" width="0.1761%" height="15" fill="rgb(216,204,22)" fg:x="85218" fg:w="162"/><text x="92.8914%" y="447.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::sub(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (162 samples, 0.18%)</title><rect x="92.6414%" y="421" width="0.1761%" height="15" fill="rgb(214,17,3)" fg:x="85218" fg:w="162"/><text x="92.8914%" y="431.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::offset(tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (89 samples, 0.10%)</title><rect x="92.7207%" y="405" width="0.0968%" height="15" fill="rgb(212,111,17)" fg:x="85291" fg:w="89"/><text x="92.9707%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_byte (2,183 samples, 2.37%)</title><rect x="92.8175%" y="469" width="2.3732%" height="15" fill="rgb(221,157,24)" fg:x="85380" fg:w="2183"/><text x="93.0675%" y="479.50">he..</text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (2,183 samples, 2.37%)</title><rect x="92.8175%" y="453" width="2.3732%" height="15" fill="rgb(252,16,13)" fg:x="85380" fg:w="2183"/><text x="93.0675%" y="463.50">he..</text></g><g><title>hello.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,std::hash::random::RandomState&gt;::get_mut(ref$ (19,000 samples, 20.66%)</title><rect x="74.5497%" y="565" width="20.6551%" height="15" fill="rgb(221,62,2)" fg:x="68576" fg:w="19000"/><text x="74.7997%" y="575.50">hello.exe`std::collections::hash:..</text></g><g><title>hello.exe`hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(ref$ (19,000 samples, 20.66%)</title><rect x="74.5497%" y="549" width="20.6551%" height="15" fill="rgb(247,87,22)" fg:x="68576" fg:w="19000"/><text x="74.7997%" y="559.50">hello.exe`hashbrown::map::HashMap..</text></g><g><title>hello.exe`hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(ref$ (18,991 samples, 20.65%)</title><rect x="74.5594%" y="533" width="20.6453%" height="15" fill="rgb(215,73,9)" fg:x="68585" fg:w="18991"/><text x="74.8094%" y="543.50">hello.exe`hashbrown::map::HashMa..</text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;str$,alloc::string::String,std::collections::hash::set::HashSet (13,325 samples, 14.49%)</title><rect x="80.7190%" y="517" width="14.4857%" height="15" fill="rgb(207,175,33)" fg:x="74251" fg:w="13325"/><text x="80.9690%" y="527.50">hello.exe`hashbrown::r..</text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt; &gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;str$,alloc::string::String,std::collections::hash::set::HashSet (13,325 samples, 14.49%)</title><rect x="80.7190%" y="501" width="14.4857%" height="15" fill="rgb(243,129,54)" fg:x="74251" fg:w="13325"/><text x="80.9690%" y="511.50">hello.exe`hashbrown::r..</text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (13,325 samples, 14.49%)</title><rect x="80.7190%" y="485" width="14.4857%" height="15" fill="rgb(227,119,45)" fg:x="74251" fg:w="13325"/><text x="80.9690%" y="495.50">hello.exe`hashbrown::r..</text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty (13 samples, 0.01%)</title><rect x="95.1906%" y="469" width="0.0141%" height="15" fill="rgb(205,109,36)" fg:x="87563" fg:w="13"/><text x="95.4406%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_byte (13 samples, 0.01%)</title><rect x="95.1906%" y="453" width="0.0141%" height="15" fill="rgb(205,6,39)" fg:x="87563" fg:w="13"/><text x="95.4406%" y="463.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="95.1906%" y="437" width="0.0141%" height="15" fill="rgb(221,32,16)" fg:x="87563" fg:w="13"/><text x="95.4406%" y="447.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (12 samples, 0.01%)</title><rect x="95.2363%" y="325" width="0.0130%" height="15" fill="rgb(228,144,50)" fg:x="87605" fg:w="12"/><text x="95.4863%" y="335.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (36 samples, 0.04%)</title><rect x="95.2211%" y="453" width="0.0391%" height="15" fill="rgb(229,201,53)" fg:x="87591" fg:w="36"/><text x="95.4711%" y="463.50"></text></g><g><title>hello.exe`alloc::string::impl$23::hash (35 samples, 0.04%)</title><rect x="95.2222%" y="437" width="0.0380%" height="15" fill="rgb(249,153,27)" fg:x="87592" fg:w="35"/><text x="95.4722%" y="447.50"></text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (35 samples, 0.04%)</title><rect x="95.2222%" y="421" width="0.0380%" height="15" fill="rgb(227,106,25)" fg:x="87592" fg:w="35"/><text x="95.4722%" y="431.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (35 samples, 0.04%)</title><rect x="95.2222%" y="405" width="0.0380%" height="15" fill="rgb(230,65,29)" fg:x="87592" fg:w="35"/><text x="95.4722%" y="415.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (35 samples, 0.04%)</title><rect x="95.2222%" y="389" width="0.0380%" height="15" fill="rgb(221,57,46)" fg:x="87592" fg:w="35"/><text x="95.4722%" y="399.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (35 samples, 0.04%)</title><rect x="95.2222%" y="373" width="0.0380%" height="15" fill="rgb(229,161,17)" fg:x="87592" fg:w="35"/><text x="95.4722%" y="383.50"></text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (35 samples, 0.04%)</title><rect x="95.2222%" y="357" width="0.0380%" height="15" fill="rgb(222,213,11)" fg:x="87592" fg:w="35"/><text x="95.4722%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (31 samples, 0.03%)</title><rect x="95.2265%" y="341" width="0.0337%" height="15" fill="rgb(235,35,13)" fg:x="87596" fg:w="31"/><text x="95.4765%" y="351.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (10 samples, 0.01%)</title><rect x="95.2493%" y="325" width="0.0109%" height="15" fill="rgb(233,158,34)" fg:x="87617" fg:w="10"/><text x="95.4993%" y="335.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (14 samples, 0.02%)</title><rect x="95.2754%" y="405" width="0.0152%" height="15" fill="rgb(215,151,48)" fg:x="87641" fg:w="14"/><text x="95.5254%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,f64&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (87 samples, 0.09%)</title><rect x="95.2189%" y="485" width="0.0946%" height="15" fill="rgb(229,84,14)" fg:x="87589" fg:w="87"/><text x="95.4689%" y="495.50"></text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (86 samples, 0.09%)</title><rect x="95.2200%" y="469" width="0.0935%" height="15" fill="rgb(229,68,14)" fg:x="87590" fg:w="86"/><text x="95.4700%" y="479.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::finish (49 samples, 0.05%)</title><rect x="95.2602%" y="453" width="0.0533%" height="15" fill="rgb(243,106,26)" fg:x="87627" fg:w="49"/><text x="95.5102%" y="463.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (49 samples, 0.05%)</title><rect x="95.2602%" y="437" width="0.0533%" height="15" fill="rgb(206,45,38)" fg:x="87627" fg:w="49"/><text x="95.5102%" y="447.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (49 samples, 0.05%)</title><rect x="95.2602%" y="421" width="0.0533%" height="15" fill="rgb(226,6,15)" fg:x="87627" fg:w="49"/><text x="95.5102%" y="431.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (16 samples, 0.02%)</title><rect x="95.2961%" y="405" width="0.0174%" height="15" fill="rgb(232,22,54)" fg:x="87660" fg:w="16"/><text x="95.5461%" y="415.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (126 samples, 0.14%)</title><rect x="95.3135%" y="437" width="0.1370%" height="15" fill="rgb(229,222,32)" fg:x="87676" fg:w="126"/><text x="95.5635%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (16 samples, 0.02%)</title><rect x="95.4668%" y="389" width="0.0174%" height="15" fill="rgb(228,62,29)" fg:x="87817" fg:w="16"/><text x="95.7168%" y="399.50"></text></g><g><title>hello.exe`core::num::nonzero::NonZero&lt;u16&gt;::new (16 samples, 0.02%)</title><rect x="95.4668%" y="373" width="0.0174%" height="15" fill="rgb(251,103,34)" fg:x="87817" fg:w="16"/><text x="95.7168%" y="383.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (34 samples, 0.04%)</title><rect x="95.4602%" y="405" width="0.0370%" height="15" fill="rgb(233,12,30)" fg:x="87811" fg:w="34"/><text x="95.7102%" y="415.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.01%)</title><rect x="95.4841%" y="389" width="0.0130%" height="15" fill="rgb(238,52,0)" fg:x="87833" fg:w="12"/><text x="95.7341%" y="399.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="95.4841%" y="373" width="0.0130%" height="15" fill="rgb(223,98,5)" fg:x="87833" fg:w="12"/><text x="95.7341%" y="383.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (17 samples, 0.02%)</title><rect x="95.4972%" y="405" width="0.0185%" height="15" fill="rgb(228,75,37)" fg:x="87845" fg:w="17"/><text x="95.7472%" y="415.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (22 samples, 0.02%)</title><rect x="95.7353%" y="229" width="0.0239%" height="15" fill="rgb(205,115,49)" fg:x="88064" fg:w="22"/><text x="95.9853%" y="239.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::c_rounds (208 samples, 0.23%)</title><rect x="95.5428%" y="245" width="0.2261%" height="15" fill="rgb(250,154,43)" fg:x="87887" fg:w="208"/><text x="95.7928%" y="255.50"></text></g><g><title>hello.exe`core::hash::impls::impl$5::hash (269 samples, 0.29%)</title><rect x="95.5200%" y="373" width="0.2924%" height="15" fill="rgb(226,43,29)" fg:x="87866" fg:w="269"/><text x="95.7700%" y="383.50"></text></g><g><title>hello.exe`alloc::string::impl$23::hash (268 samples, 0.29%)</title><rect x="95.5211%" y="357" width="0.2913%" height="15" fill="rgb(249,228,39)" fg:x="87867" fg:w="268"/><text x="95.7711%" y="367.50"></text></g><g><title>hello.exe`core::hash::impls::impl$2::hash(ref$ (268 samples, 0.29%)</title><rect x="95.5211%" y="341" width="0.2913%" height="15" fill="rgb(216,79,43)" fg:x="87867" fg:w="268"/><text x="95.7711%" y="351.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::write_str(std::hash::random::DefaultHasher*, ref$ (268 samples, 0.29%)</title><rect x="95.5211%" y="325" width="0.2913%" height="15" fill="rgb(228,95,12)" fg:x="87867" fg:w="268"/><text x="95.7711%" y="335.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::write_str(core::hash::sip::SipHasher13*, ref$ (268 samples, 0.29%)</title><rect x="95.5211%" y="309" width="0.2913%" height="15" fill="rgb(249,221,15)" fg:x="87867" fg:w="268"/><text x="95.7711%" y="319.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write_str(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$ (268 samples, 0.29%)</title><rect x="95.5211%" y="293" width="0.2913%" height="15" fill="rgb(233,34,13)" fg:x="87867" fg:w="268"/><text x="95.7711%" y="303.50"></text></g><g><title>hello.exe`core::hash::Hasher::write_u8(core::hash::sip::Hasher (265 samples, 0.29%)</title><rect x="95.5244%" y="277" width="0.2881%" height="15" fill="rgb(214,103,39)" fg:x="87870" fg:w="265"/><text x="95.7744%" y="287.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (264 samples, 0.29%)</title><rect x="95.5255%" y="261" width="0.2870%" height="15" fill="rgb(251,126,39)" fg:x="87871" fg:w="264"/><text x="95.7755%" y="271.50"></text></g><g><title>hello.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (40 samples, 0.04%)</title><rect x="95.7690%" y="245" width="0.0435%" height="15" fill="rgb(214,216,36)" fg:x="88095" fg:w="40"/><text x="96.0190%" y="255.50"></text></g><g><title>hello.exe`core::intrinsics::copy_nonoverlapping (25 samples, 0.03%)</title><rect x="95.7853%" y="229" width="0.0272%" height="15" fill="rgb(220,221,8)" fg:x="88110" fg:w="25"/><text x="96.0353%" y="239.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (27 samples, 0.03%)</title><rect x="95.8309%" y="325" width="0.0294%" height="15" fill="rgb(240,216,3)" fg:x="88152" fg:w="27"/><text x="96.0809%" y="335.50"></text></g><g><title>hello.exe`core::num::impl$9::rotate_left (24 samples, 0.03%)</title><rect x="95.8712%" y="309" width="0.0261%" height="15" fill="rgb(232,218,17)" fg:x="88189" fg:w="24"/><text x="96.1212%" y="319.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::probe_seq (362 samples, 0.39%)</title><rect x="95.5157%" y="405" width="0.3935%" height="15" fill="rgb(229,163,45)" fg:x="87862" fg:w="362"/><text x="95.7657%" y="415.50"></text></g><g><title>hello.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::string::String&gt; &gt; (362 samples, 0.39%)</title><rect x="95.5157%" y="389" width="0.3935%" height="15" fill="rgb(231,110,42)" fg:x="87862" fg:w="362"/><text x="95.7657%" y="399.50"></text></g><g><title>hello.exe`std::hash::random::impl$4::finish (86 samples, 0.09%)</title><rect x="95.8157%" y="373" width="0.0935%" height="15" fill="rgb(208,170,48)" fg:x="88138" fg:w="86"/><text x="96.0657%" y="383.50"></text></g><g><title>hello.exe`core::hash::sip::impl$4::finish (86 samples, 0.09%)</title><rect x="95.8157%" y="357" width="0.0935%" height="15" fill="rgb(239,116,25)" fg:x="88138" fg:w="86"/><text x="96.0657%" y="367.50"></text></g><g><title>hello.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (86 samples, 0.09%)</title><rect x="95.8157%" y="341" width="0.0935%" height="15" fill="rgb(219,200,50)" fg:x="88138" fg:w="86"/><text x="96.0657%" y="351.50"></text></g><g><title>hello.exe`core::hash::sip::impl$8::d_rounds (41 samples, 0.04%)</title><rect x="95.8646%" y="325" width="0.0446%" height="15" fill="rgb(245,200,0)" fg:x="88183" fg:w="41"/><text x="96.1146%" y="335.50"></text></g><g><title>hello.exe`core::num::impl$9::wrapping_add (11 samples, 0.01%)</title><rect x="95.8972%" y="309" width="0.0120%" height="15" fill="rgb(245,119,33)" fg:x="88213" fg:w="11"/><text x="96.1472%" y="319.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_insert_slot (414 samples, 0.45%)</title><rect x="95.4602%" y="421" width="0.4501%" height="15" fill="rgb(231,125,12)" fg:x="87811" fg:w="414"/><text x="95.7102%" y="431.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (416 samples, 0.45%)</title><rect x="95.4602%" y="437" width="0.4522%" height="15" fill="rgb(216,96,41)" fg:x="87811" fg:w="416"/><text x="95.7102%" y="447.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,u64&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,u64&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,u64,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0 (562 samples, 0.61%)</title><rect x="95.3135%" y="485" width="0.6110%" height="15" fill="rgb(248,43,45)" fg:x="87676" fg:w="562"/><text x="95.5635%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (562 samples, 0.61%)</title><rect x="95.3135%" y="469" width="0.6110%" height="15" fill="rgb(217,222,7)" fg:x="87676" fg:w="562"/><text x="95.5635%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (562 samples, 0.61%)</title><rect x="95.3135%" y="453" width="0.6110%" height="15" fill="rgb(233,28,6)" fg:x="87676" fg:w="562"/><text x="95.5635%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::fix_insert_slot (17 samples, 0.02%)</title><rect x="95.9429%" y="469" width="0.0185%" height="15" fill="rgb(231,218,15)" fg:x="88255" fg:w="17"/><text x="96.1929%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::is_bucket_full (16 samples, 0.02%)</title><rect x="95.9440%" y="453" width="0.0174%" height="15" fill="rgb(226,171,48)" fg:x="88256" fg:w="16"/><text x="96.1940%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::h2 (11 samples, 0.01%)</title><rect x="95.9614%" y="469" width="0.0120%" height="15" fill="rgb(235,201,9)" fg:x="88272" fg:w="11"/><text x="96.2114%" y="479.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$8::find_or_find_insert_slot::closure$0(hashbrown::raw::impl$8::find_or_find_insert_slot::closure_env$0&lt;tuple$&lt;alloc::string::String,f64&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,f64&gt;,hashbrown::map::make_hasher::closure_env$0 (31 samples, 0.03%)</title><rect x="95.9733%" y="469" width="0.0337%" height="15" fill="rgb(217,80,15)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="479.50"></text></g><g><title>hello.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,f64&gt;*, tuple$ (31 samples, 0.03%)</title><rect x="95.9733%" y="453" width="0.0337%" height="15" fill="rgb(219,152,8)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="463.50"></text></g><g><title>hello.exe`hashbrown::impl$0::equivalent (31 samples, 0.03%)</title><rect x="95.9733%" y="437" width="0.0337%" height="15" fill="rgb(243,107,38)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="447.50"></text></g><g><title>hello.exe`core::cmp::impls::impl$9::eq (31 samples, 0.03%)</title><rect x="95.9733%" y="421" width="0.0337%" height="15" fill="rgb(231,17,5)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="431.50"></text></g><g><title>hello.exe`alloc::string::impl$80::eq (31 samples, 0.03%)</title><rect x="95.9733%" y="405" width="0.0337%" height="15" fill="rgb(209,25,54)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="415.50"></text></g><g><title>hello.exe`alloc::vec::partial_eq::impl$0::eq(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, alloc::vec::Vec (31 samples, 0.03%)</title><rect x="95.9733%" y="389" width="0.0337%" height="15" fill="rgb(219,0,2)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="399.50"></text></g><g><title>hello.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (31 samples, 0.03%)</title><rect x="95.9733%" y="373" width="0.0337%" height="15" fill="rgb(246,9,5)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="383.50"></text></g><g><title>hello.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (31 samples, 0.03%)</title><rect x="95.9733%" y="357" width="0.0337%" height="15" fill="rgb(226,159,4)" fg:x="88283" fg:w="31"/><text x="96.2233%" y="367.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,f64&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::string::String,alloc::string::String,f64&gt;, hashbrown::map::make_hasher::closure_env$0 (812 samples, 0.88%)</title><rect x="95.2189%" y="501" width="0.8827%" height="15" fill="rgb(219,175,34)" fg:x="87589" fg:w="812"/><text x="95.4689%" y="511.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (163 samples, 0.18%)</title><rect x="95.9244%" y="485" width="0.1772%" height="15" fill="rgb(236,10,46)" fg:x="88238" fg:w="163"/><text x="96.1744%" y="495.50"></text></g><g><title>hello.exe`hashbrown::raw::sse2::Group::match_byte (84 samples, 0.09%)</title><rect x="96.0103%" y="469" width="0.0913%" height="15" fill="rgb(240,211,16)" fg:x="88317" fg:w="84"/><text x="96.2603%" y="479.50"></text></g><g><title>hello.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (84 samples, 0.09%)</title><rect x="96.0103%" y="453" width="0.0913%" height="15" fill="rgb(205,3,43)" fg:x="88317" fg:w="84"/><text x="96.2603%" y="463.50"></text></g><g><title>hello.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,f64&gt; &gt;::write(tuple$ (99 samples, 0.11%)</title><rect x="96.1016%" y="485" width="0.1076%" height="15" fill="rgb(245,7,22)" fg:x="88401" fg:w="99"/><text x="96.3516%" y="495.50"></text></g><g><title>hello.exe`core::ptr::mut_ptr::impl$0::write(tuple$&lt;alloc::string::String,f64&gt;*, tuple$ (99 samples, 0.11%)</title><rect x="96.1016%" y="469" width="0.1076%" height="15" fill="rgb(239,132,32)" fg:x="88401" fg:w="99"/><text x="96.3516%" y="479.50"></text></g><g><title>hello.exe`core::ptr::write(tuple$&lt;alloc::string::String,f64&gt;*, tuple$ (99 samples, 0.11%)</title><rect x="96.1016%" y="453" width="0.1076%" height="15" fill="rgb(228,202,34)" fg:x="88401" fg:w="99"/><text x="96.3516%" y="463.50"></text></g><g><title>hello.exe`hashbrown::map::HashMap&lt;alloc::string::String,f64,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::string::String,f64,std::hash::random::RandomState,alloc::alloc::Global&gt; (927 samples, 1.01%)</title><rect x="95.2069%" y="517" width="1.0078%" height="15" fill="rgb(254,200,22)" fg:x="87578" fg:w="927"/><text x="95.4569%" y="527.50"></text></g><g><title>hello.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,f64&gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$ (104 samples, 0.11%)</title><rect x="96.1016%" y="501" width="0.1131%" height="15" fill="rgb(219,10,39)" fg:x="88401" fg:w="104"/><text x="96.3516%" y="511.50"></text></g><g><title>hello.exe`std::collections::hash::map::impl$39::next(std::collections::hash::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (930 samples, 1.01%)</title><rect x="95.2048%" y="565" width="1.0110%" height="15" fill="rgb(226,210,39)" fg:x="87576" fg:w="930"/><text x="95.4548%" y="575.50"></text></g><g><title>hello.exe`hashbrown::map::impl$60::next(hashbrown::map::Iter&lt;alloc::string::String,std::collections::hash::set::HashSet (930 samples, 1.01%)</title><rect x="95.2048%" y="549" width="1.0110%" height="15" fill="rgb(208,219,16)" fg:x="87576" fg:w="930"/><text x="95.4548%" y="559.50"></text></g><g><title>hello.exe`hashbrown::raw::impl$28::next(hashbrown::raw::RawIter&lt;tuple$&lt;alloc::string::String,std::collections::hash::set::HashSet (930 samples, 1.01%)</title><rect x="95.2048%" y="533" width="1.0110%" height="15" fill="rgb(216,158,51)" fg:x="87576" fg:w="930"/><text x="95.4548%" y="543.50"></text></g><g><title>`0x7FF813B7B7A2 (20 samples, 0.02%)</title><rect x="96.2919%" y="341" width="0.0217%" height="15" fill="rgb(233,14,44)" fg:x="88576" fg:w="20"/><text x="96.5419%" y="351.50"></text></g><g><title>`0x7FF813B7B86B (17 samples, 0.02%)</title><rect x="96.3256%" y="341" width="0.0185%" height="15" fill="rgb(237,97,39)" fg:x="88607" fg:w="17"/><text x="96.5756%" y="351.50"></text></g><g><title>`0x7FF813B7B8A4 (14 samples, 0.02%)</title><rect x="96.3473%" y="341" width="0.0152%" height="15" fill="rgb(218,198,43)" fg:x="88627" fg:w="14"/><text x="96.5973%" y="351.50"></text></g><g><title>`0x7FF813B7B3C7 (101 samples, 0.11%)</title><rect x="96.2647%" y="357" width="0.1098%" height="15" fill="rgb(231,104,20)" fg:x="88551" fg:w="101"/><text x="96.5147%" y="367.50"></text></g><g><title>hello.exe`alloc::vec::impl$10::clone (138 samples, 0.15%)</title><rect x="96.2419%" y="517" width="0.1500%" height="15" fill="rgb(254,36,13)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="527.50"></text></g><g><title>hello.exe`alloc::slice::impl$0::to_vec_in (138 samples, 0.15%)</title><rect x="96.2419%" y="501" width="0.1500%" height="15" fill="rgb(248,14,50)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="511.50"></text></g><g><title>hello.exe`alloc::slice::hack::to_vec (138 samples, 0.15%)</title><rect x="96.2419%" y="485" width="0.1500%" height="15" fill="rgb(217,107,29)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="495.50"></text></g><g><title>hello.exe`alloc::slice::hack::impl$1::to_vec (138 samples, 0.15%)</title><rect x="96.2419%" y="469" width="0.1500%" height="15" fill="rgb(251,169,33)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="479.50"></text></g><g><title>hello.exe`alloc::vec::Vec::with_capacity_in (138 samples, 0.15%)</title><rect x="96.2419%" y="453" width="0.1500%" height="15" fill="rgb(217,108,32)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="463.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec::with_capacity_in (138 samples, 0.15%)</title><rect x="96.2419%" y="437" width="0.1500%" height="15" fill="rgb(219,66,42)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="447.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec::allocate_in (138 samples, 0.15%)</title><rect x="96.2419%" y="421" width="0.1500%" height="15" fill="rgb(206,180,7)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="431.50"></text></g><g><title>hello.exe`alloc::alloc::impl$1::allocate (138 samples, 0.15%)</title><rect x="96.2419%" y="405" width="0.1500%" height="15" fill="rgb(208,226,31)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="415.50"></text></g><g><title>hello.exe`alloc::alloc::Global::alloc_impl (138 samples, 0.15%)</title><rect x="96.2419%" y="389" width="0.1500%" height="15" fill="rgb(218,26,49)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="399.50"></text></g><g><title>hello.exe`alloc::alloc::alloc (138 samples, 0.15%)</title><rect x="96.2419%" y="373" width="0.1500%" height="15" fill="rgb(233,197,48)" fg:x="88530" fg:w="138"/><text x="96.4919%" y="383.50"></text></g><g><title>hello.exe`std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;::insert (163 samples, 0.18%)</title><rect x="96.2158%" y="565" width="0.1772%" height="15" fill="rgb(252,181,51)" fg:x="88506" fg:w="163"/><text x="96.4658%" y="575.50"></text></g><g><title>hello.exe`hashbrown::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert (163 samples, 0.18%)</title><rect x="96.2158%" y="549" width="0.1772%" height="15" fill="rgb(253,90,19)" fg:x="88506" fg:w="163"/><text x="96.4658%" y="559.50"></text></g><g><title>hello.exe`alloc::string::impl$6::clone (151 samples, 0.16%)</title><rect x="96.2288%" y="533" width="0.1642%" height="15" fill="rgb(215,171,30)" fg:x="88518" fg:w="151"/><text x="96.4788%" y="543.50"></text></g><g><title>hello.exe`std::collections::hash::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;::new (12 samples, 0.01%)</title><rect x="96.3930%" y="565" width="0.0130%" height="15" fill="rgb(214,222,9)" fg:x="88669" fg:w="12"/><text x="96.6430%" y="575.50"></text></g><g><title>hello.exe`std::collections::hash::set::impl$11::default (12 samples, 0.01%)</title><rect x="96.3930%" y="549" width="0.0130%" height="15" fill="rgb(223,3,22)" fg:x="88669" fg:w="12"/><text x="96.6430%" y="559.50"></text></g><g><title>hello.exe`hashbrown::set::impl$13::default (12 samples, 0.01%)</title><rect x="96.3930%" y="533" width="0.0130%" height="15" fill="rgb(225,196,46)" fg:x="88669" fg:w="12"/><text x="96.6430%" y="543.50"></text></g><g><title>hello.exe`alloc::vec::impl$12::index(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::ops::range::RangeFrom (104 samples, 0.11%)</title><rect x="96.4136%" y="533" width="0.1131%" height="15" fill="rgb(209,110,37)" fg:x="88688" fg:w="104"/><text x="96.6636%" y="543.50"></text></g><g><title>hello.exe`enum2$&lt;core::result::Result&lt;ref$&lt;str$&gt;,core::str::error::Utf8Error&gt; &gt;::is_ok (104 samples, 0.11%)</title><rect x="96.4136%" y="517" width="0.1131%" height="15" fill="rgb(249,89,12)" fg:x="88688" fg:w="104"/><text x="96.6636%" y="527.50"></text></g><g><title>hello.exe`core::str::converts::from_utf8 (104 samples, 0.11%)</title><rect x="96.4136%" y="501" width="0.1131%" height="15" fill="rgb(226,27,33)" fg:x="88688" fg:w="104"/><text x="96.6636%" y="511.50"></text></g><g><title>hello.exe`core::str::validations::run_utf8_validation (104 samples, 0.11%)</title><rect x="96.4136%" y="485" width="0.1131%" height="15" fill="rgb(213,82,22)" fg:x="88688" fg:w="104"/><text x="96.6636%" y="495.50"></text></g><g><title>`0x7FF807A614F3 (35 samples, 0.04%)</title><rect x="96.5386%" y="453" width="0.0380%" height="15" fill="rgb(248,140,0)" fg:x="88803" fg:w="35"/><text x="96.7886%" y="463.50"></text></g><g><title>`0x7FF807A614F7 (31 samples, 0.03%)</title><rect x="96.5767%" y="453" width="0.0337%" height="15" fill="rgb(228,106,3)" fg:x="88838" fg:w="31"/><text x="96.8267%" y="463.50"></text></g><g><title>`0x7FF807A614FC (32 samples, 0.03%)</title><rect x="96.6104%" y="453" width="0.0348%" height="15" fill="rgb(209,23,37)" fg:x="88869" fg:w="32"/><text x="96.8604%" y="463.50"></text></g><g><title>`0x7FF807A61501 (41 samples, 0.04%)</title><rect x="96.6452%" y="453" width="0.0446%" height="15" fill="rgb(241,93,50)" fg:x="88901" fg:w="41"/><text x="96.8952%" y="463.50"></text></g><g><title>`0x7FF807A61526 (46 samples, 0.05%)</title><rect x="96.7050%" y="453" width="0.0500%" height="15" fill="rgb(253,46,43)" fg:x="88956" fg:w="46"/><text x="96.9550%" y="463.50"></text></g><g><title>`0x7FF807A6152E (32 samples, 0.03%)</title><rect x="96.7550%" y="453" width="0.0348%" height="15" fill="rgb(226,206,43)" fg:x="89002" fg:w="32"/><text x="97.0050%" y="463.50"></text></g><g><title>`0x7FF807A61536 (40 samples, 0.04%)</title><rect x="96.7898%" y="453" width="0.0435%" height="15" fill="rgb(217,54,7)" fg:x="89034" fg:w="40"/><text x="97.0398%" y="463.50"></text></g><g><title>`0x7FF807A6153E (41 samples, 0.04%)</title><rect x="96.8332%" y="453" width="0.0446%" height="15" fill="rgb(223,5,52)" fg:x="89074" fg:w="41"/><text x="97.0832%" y="463.50"></text></g><g><title>`0x7FF807A61546 (15 samples, 0.02%)</title><rect x="96.8778%" y="453" width="0.0163%" height="15" fill="rgb(206,52,46)" fg:x="89115" fg:w="15"/><text x="97.1278%" y="463.50"></text></g><g><title>`0x7FF813B6ED55 (19 samples, 0.02%)</title><rect x="96.9333%" y="261" width="0.0207%" height="15" fill="rgb(253,136,11)" fg:x="89166" fg:w="19"/><text x="97.1833%" y="271.50"></text></g><g><title>`0x7FF813B6F8CD (27 samples, 0.03%)</title><rect x="96.9300%" y="309" width="0.0294%" height="15" fill="rgb(208,106,33)" fg:x="89163" fg:w="27"/><text x="97.1800%" y="319.50"></text></g><g><title>`0x7FF813B6DE31 (24 samples, 0.03%)</title><rect x="96.9333%" y="293" width="0.0261%" height="15" fill="rgb(206,54,4)" fg:x="89166" fg:w="24"/><text x="97.1833%" y="303.50"></text></g><g><title>`0x7FF813B6E2A9 (24 samples, 0.03%)</title><rect x="96.9333%" y="277" width="0.0261%" height="15" fill="rgb(213,3,15)" fg:x="89166" fg:w="24"/><text x="97.1833%" y="287.50"></text></g><g><title>`0x7FF813B72511 (30 samples, 0.03%)</title><rect x="96.9278%" y="325" width="0.0326%" height="15" fill="rgb(252,211,39)" fg:x="89161" fg:w="30"/><text x="97.1778%" y="335.50"></text></g><g><title>`0x7FF813B7D7C1 (138 samples, 0.15%)</title><rect x="96.9670%" y="293" width="0.1500%" height="15" fill="rgb(223,6,36)" fg:x="89197" fg:w="138"/><text x="97.2170%" y="303.50"></text></g><g><title>`0x7FF813B5E715 (11 samples, 0.01%)</title><rect x="97.1387%" y="261" width="0.0120%" height="15" fill="rgb(252,169,45)" fg:x="89355" fg:w="11"/><text x="97.3887%" y="271.50"></text></g><g><title>`0x7FF813BED2E4 (11 samples, 0.01%)</title><rect x="97.1387%" y="245" width="0.0120%" height="15" fill="rgb(212,48,26)" fg:x="89355" fg:w="11"/><text x="97.3887%" y="255.50"></text></g><g><title>`0x7FF813B5E92D (15 samples, 0.02%)</title><rect x="97.1507%" y="245" width="0.0163%" height="15" fill="rgb(251,102,48)" fg:x="89366" fg:w="15"/><text x="97.4007%" y="255.50"></text></g><g><title>`0x7FF813B5E37B (28 samples, 0.03%)</title><rect x="97.1376%" y="277" width="0.0304%" height="15" fill="rgb(243,208,16)" fg:x="89354" fg:w="28"/><text x="97.3876%" y="287.50"></text></g><g><title>`0x7FF813B5E7DE (16 samples, 0.02%)</title><rect x="97.1507%" y="261" width="0.0174%" height="15" fill="rgb(219,96,24)" fg:x="89366" fg:w="16"/><text x="97.4007%" y="271.50"></text></g><g><title>`0x7FF813B7DBFA (31 samples, 0.03%)</title><rect x="97.1376%" y="293" width="0.0337%" height="15" fill="rgb(219,33,29)" fg:x="89354" fg:w="31"/><text x="97.3876%" y="303.50"></text></g><g><title>`0x7FF813B7DFDF (13 samples, 0.01%)</title><rect x="97.1746%" y="293" width="0.0141%" height="15" fill="rgb(223,176,5)" fg:x="89388" fg:w="13"/><text x="97.4246%" y="303.50"></text></g><g><title>`0x7FF813B7E237 (30 samples, 0.03%)</title><rect x="97.1898%" y="293" width="0.0326%" height="15" fill="rgb(228,140,14)" fg:x="89402" fg:w="30"/><text x="97.4398%" y="303.50"></text></g><g><title>`0x7FF813B72615 (255 samples, 0.28%)</title><rect x="96.9626%" y="325" width="0.2772%" height="15" fill="rgb(217,179,31)" fg:x="89193" fg:w="255"/><text x="97.2126%" y="335.50"></text></g><g><title>`0x7FF813B7B44D (255 samples, 0.28%)</title><rect x="96.9626%" y="309" width="0.2772%" height="15" fill="rgb(230,9,30)" fg:x="89193" fg:w="255"/><text x="97.2126%" y="319.50"></text></g><g><title>`0x7FF813BF3F53 (10 samples, 0.01%)</title><rect x="97.2540%" y="309" width="0.0109%" height="15" fill="rgb(230,136,20)" fg:x="89461" fg:w="10"/><text x="97.5040%" y="319.50"></text></g><g><title>`0x7FF813BF3F57 (20 samples, 0.02%)</title><rect x="97.2648%" y="309" width="0.0217%" height="15" fill="rgb(215,210,22)" fg:x="89471" fg:w="20"/><text x="97.5148%" y="319.50"></text></g><g><title>`0x7FF813BF3F62 (68 samples, 0.07%)</title><rect x="97.2931%" y="309" width="0.0739%" height="15" fill="rgb(218,43,5)" fg:x="89497" fg:w="68"/><text x="97.5431%" y="319.50"></text></g><g><title>`0x7FF813BF3F66 (77 samples, 0.08%)</title><rect x="97.3670%" y="309" width="0.0837%" height="15" fill="rgb(216,11,5)" fg:x="89565" fg:w="77"/><text x="97.6170%" y="319.50"></text></g><g><title>`0x7FF813BF3F6A (33 samples, 0.04%)</title><rect x="97.4507%" y="309" width="0.0359%" height="15" fill="rgb(209,82,29)" fg:x="89642" fg:w="33"/><text x="97.7007%" y="319.50"></text></g><g><title>`0x7FF813BF4013 (29 samples, 0.03%)</title><rect x="97.4931%" y="309" width="0.0315%" height="15" fill="rgb(244,115,12)" fg:x="89681" fg:w="29"/><text x="97.7431%" y="319.50"></text></g><g><title>`0x7FF813BF4023 (24 samples, 0.03%)</title><rect x="97.5333%" y="309" width="0.0261%" height="15" fill="rgb(222,82,18)" fg:x="89718" fg:w="24"/><text x="97.7833%" y="319.50"></text></g><g><title>`0x7FF813BF4027 (91 samples, 0.10%)</title><rect x="97.5594%" y="309" width="0.0989%" height="15" fill="rgb(249,227,8)" fg:x="89742" fg:w="91"/><text x="97.8094%" y="319.50"></text></g><g><title>`0x7FF813BF402B (96 samples, 0.10%)</title><rect x="97.6584%" y="309" width="0.1044%" height="15" fill="rgb(253,141,45)" fg:x="89833" fg:w="96"/><text x="97.9084%" y="319.50"></text></g><g><title>`0x7FF813BF402F (11 samples, 0.01%)</title><rect x="97.7627%" y="309" width="0.0120%" height="15" fill="rgb(234,184,4)" fg:x="89929" fg:w="11"/><text x="98.0127%" y="319.50"></text></g><g><title>`0x7FF813B727D9 (489 samples, 0.53%)</title><rect x="97.2442%" y="325" width="0.5316%" height="15" fill="rgb(218,194,23)" fg:x="89452" fg:w="489"/><text x="97.4942%" y="335.50"></text></g><g><title>`0x7FF813B6ED55 (40 samples, 0.04%)</title><rect x="97.7899%" y="213" width="0.0435%" height="15" fill="rgb(235,66,41)" fg:x="89954" fg:w="40"/><text x="98.0399%" y="223.50"></text></g><g><title>`0x7FF813B765F6 (49 samples, 0.05%)</title><rect x="97.7888%" y="277" width="0.0533%" height="15" fill="rgb(245,217,1)" fg:x="89953" fg:w="49"/><text x="98.0388%" y="287.50"></text></g><g><title>`0x7FF813B6E430 (49 samples, 0.05%)</title><rect x="97.7888%" y="261" width="0.0533%" height="15" fill="rgb(229,91,1)" fg:x="89953" fg:w="49"/><text x="98.0388%" y="271.50"></text></g><g><title>`0x7FF813B6EA31 (49 samples, 0.05%)</title><rect x="97.7888%" y="245" width="0.0533%" height="15" fill="rgb(207,101,30)" fg:x="89953" fg:w="49"/><text x="98.0388%" y="255.50"></text></g><g><title>`0x7FF813B6E2A9 (49 samples, 0.05%)</title><rect x="97.7888%" y="229" width="0.0533%" height="15" fill="rgb(223,82,49)" fg:x="89953" fg:w="49"/><text x="98.0388%" y="239.50"></text></g><g><title>`0x7FF813B75B74 (63 samples, 0.07%)</title><rect x="97.7779%" y="293" width="0.0685%" height="15" fill="rgb(218,167,17)" fg:x="89943" fg:w="63"/><text x="98.0279%" y="303.50"></text></g><g><title>`0x7FF813B727F0 (66 samples, 0.07%)</title><rect x="97.7758%" y="325" width="0.0717%" height="15" fill="rgb(208,103,14)" fg:x="89941" fg:w="66"/><text x="98.0258%" y="335.50"></text></g><g><title>`0x7FF813B747B1 (65 samples, 0.07%)</title><rect x="97.7769%" y="309" width="0.0707%" height="15" fill="rgb(238,20,8)" fg:x="89942" fg:w="65"/><text x="98.0269%" y="319.50"></text></g><g><title>`0x7FF813B736BD (857 samples, 0.93%)</title><rect x="96.9170%" y="357" width="0.9317%" height="15" fill="rgb(218,80,54)" fg:x="89151" fg:w="857"/><text x="97.1670%" y="367.50"></text></g><g><title>`0x7FF813B738E3 (853 samples, 0.93%)</title><rect x="96.9213%" y="341" width="0.9273%" height="15" fill="rgb(240,144,17)" fg:x="89155" fg:w="853"/><text x="97.1713%" y="351.50"></text></g><g><title>`0x7FF813B7B44D (10 samples, 0.01%)</title><rect x="97.8508%" y="357" width="0.0109%" height="15" fill="rgb(245,27,50)" fg:x="90010" fg:w="10"/><text x="98.1008%" y="367.50"></text></g><g><title>hello.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::len (873 samples, 0.95%)</title><rect x="96.9137%" y="453" width="0.9490%" height="15" fill="rgb(251,51,7)" fg:x="89148" fg:w="873"/><text x="97.1637%" y="463.50"></text></g><g><title>hello.exe`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle&lt;u8,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (873 samples, 0.95%)</title><rect x="96.9137%" y="437" width="0.9490%" height="15" fill="rgb(245,217,29)" fg:x="89148" fg:w="873"/><text x="97.1637%" y="447.50"></text></g><g><title>hello.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::grow_amortized (873 samples, 0.95%)</title><rect x="96.9137%" y="421" width="0.9490%" height="15" fill="rgb(221,176,29)" fg:x="89148" fg:w="873"/><text x="97.1637%" y="431.50"></text></g><g><title>hello.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (872 samples, 0.95%)</title><rect x="96.9148%" y="405" width="0.9480%" height="15" fill="rgb(212,180,24)" fg:x="89149" fg:w="872"/><text x="97.1648%" y="415.50"></text></g><g><title>hello.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(enum2$&lt;core::result::Result&lt;core::alloc::layout::Layout,core::alloc::layout::LayoutError&gt; &gt;, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (872 samples, 0.95%)</title><rect x="96.9148%" y="389" width="0.9480%" height="15" fill="rgb(254,24,2)" fg:x="89149" fg:w="872"/><text x="97.1648%" y="399.50"></text></g><g><title>hello.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$1 (872 samples, 0.95%)</title><rect x="96.9148%" y="373" width="0.9480%" height="15" fill="rgb(230,100,2)" fg:x="89149" fg:w="872"/><text x="97.1648%" y="383.50"></text></g><g><title>hello.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (1,230 samples, 1.34%)</title><rect x="96.5310%" y="501" width="1.3371%" height="15" fill="rgb(219,142,25)" fg:x="88796" fg:w="1230"/><text x="96.7810%" y="511.50"></text></g><g><title>hello.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (1,230 samples, 1.34%)</title><rect x="96.5310%" y="485" width="1.3371%" height="15" fill="rgb(240,73,43)" fg:x="88796" fg:w="1230"/><text x="96.7810%" y="495.50"></text></g><g><title>hello.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (1,230 samples, 1.34%)</title><rect x="96.5310%" y="469" width="1.3371%" height="15" fill="rgb(214,114,15)" fg:x="88796" fg:w="1230"/><text x="96.7810%" y="479.50"></text></g><g><title>`0x7FF813BED0A4 (1,667 samples, 1.81%)</title><rect x="97.8932%" y="437" width="1.8122%" height="15" fill="rgb(207,130,4)" fg:x="90049" fg:w="1667"/><text x="98.1432%" y="447.50">`..</text></g><g><title>hello.exe`std::io::buffered::bufreader::impl$5::fill_buf(std::io::buffered::bufreader::BufReader (1,692 samples, 1.84%)</title><rect x="97.8682%" y="501" width="1.8394%" height="15" fill="rgb(221,25,40)" fg:x="90026" fg:w="1692"/><text x="98.1182%" y="511.50">h..</text></g><g><title>hello.exe`std::io::buffered::bufreader::buffer::Buffer::fill_buf (1,692 samples, 1.84%)</title><rect x="97.8682%" y="485" width="1.8394%" height="15" fill="rgb(241,184,7)" fg:x="90026" fg:w="1692"/><text x="98.1182%" y="495.50">h..</text></g><g><title>hello.exe`std::sys::pal::windows::handle::Handle::read_buf (1,688 samples, 1.84%)</title><rect x="97.8725%" y="469" width="1.8350%" height="15" fill="rgb(235,159,4)" fg:x="90030" fg:w="1688"/><text x="98.1225%" y="479.50">h..</text></g><g><title>hello.exe`std::sys::pal::windows::handle::Handle::synchronous_read (1,681 samples, 1.83%)</title><rect x="97.8801%" y="453" width="1.8274%" height="15" fill="rgb(214,87,48)" fg:x="90037" fg:w="1681"/><text x="98.1301%" y="463.50">h..</text></g><g><title>hello.exe`core::slice::memchr::contains_zero_byte (18 samples, 0.02%)</title><rect x="99.9228%" y="453" width="0.0196%" height="15" fill="rgb(246,198,24)" fg:x="91916" fg:w="18"/><text x="100.1728%" y="463.50"></text></g><g><title>hello.exe`hello::load_data(ref$&lt;str$&gt;, enum2$&lt;core::option::Option (79,960 samples, 86.93%)</title><rect x="13.0203%" y="581" width="86.9253%" height="15" fill="rgb(209,66,40)" fg:x="11977" fg:w="79960"/><text x="13.2703%" y="591.50">hello.exe`hello::load_data(ref$&lt;str$&gt;, enum2$&lt;core::option::Option</text></g><g><title>hello.exe`std::io::impl$27::next&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;(std::io::Lines&lt;std::io::buffered::bufreader::BufReader (3,251 samples, 3.53%)</title><rect x="96.4114%" y="565" width="3.5342%" height="15" fill="rgb(233,147,39)" fg:x="88686" fg:w="3251"/><text x="96.6614%" y="575.50">hel..</text></g><g><title>hello.exe`std::io::append_to_string&lt;std::io::BufRead::read_line::closure_env$0&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt; &gt;(alloc::string::String*, std::io::BufRead::read_line::closure_env$0&lt;std::io::buffered::bufreader::BufReader (3,250 samples, 3.53%)</title><rect x="96.4125%" y="549" width="3.5331%" height="15" fill="rgb(231,145,52)" fg:x="88687" fg:w="3250"/><text x="96.6625%" y="559.50">hel..</text></g><g><title>hello.exe`std::io::BufRead::read_line::closure$0(std::io::BufRead::read_line::closure_env$0&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;, alloc::vec::Vec (3,145 samples, 3.42%)</title><rect x="96.5267%" y="533" width="3.4190%" height="15" fill="rgb(206,20,26)" fg:x="88792" fg:w="3145"/><text x="96.7767%" y="543.50">hel..</text></g><g><title>hello.exe`std::io::read_until(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;*, unsigned char, alloc::vec::Vec (3,145 samples, 3.42%)</title><rect x="96.5267%" y="517" width="3.4190%" height="15" fill="rgb(238,220,4)" fg:x="88792" fg:w="3145"/><text x="96.7767%" y="527.50">hel..</text></g><g><title>hello.exe`std::sys_common::memchr::memchr(unsigned char, ref$&lt;slice2$ (219 samples, 0.24%)</title><rect x="99.7076%" y="501" width="0.2381%" height="15" fill="rgb(252,195,42)" fg:x="91718" fg:w="219"/><text x="99.9576%" y="511.50"></text></g><g><title>hello.exe`core::slice::memchr::memchr(unsigned char, ref$&lt;slice2$ (219 samples, 0.24%)</title><rect x="99.7076%" y="485" width="0.2381%" height="15" fill="rgb(209,10,6)" fg:x="91718" fg:w="219"/><text x="99.9576%" y="495.50"></text></g><g><title>hello.exe`core::slice::memchr::memchr_aligned (218 samples, 0.24%)</title><rect x="99.7087%" y="469" width="0.2370%" height="15" fill="rgb(229,3,52)" fg:x="91719" fg:w="218"/><text x="99.9587%" y="479.50"></text></g><g><title>`0x7FF813BA26B1 (91,923 samples, 99.93%)</title><rect x="0.0174%" y="805" width="99.9304%" height="15" fill="rgb(253,49,37)" fg:x="16" fg:w="91923"/><text x="0.2674%" y="815.50">`0x7FF813BA26B1</text></g><g><title>`0x7FF8122A7344 (91,923 samples, 99.93%)</title><rect x="0.0174%" y="789" width="99.9304%" height="15" fill="rgb(240,103,49)" fg:x="16" fg:w="91923"/><text x="0.2674%" y="799.50">`0x7FF8122A7344</text></g><g><title>hello.exe`__scrt_common_main_seh() (91,901 samples, 99.91%)</title><rect x="0.0413%" y="773" width="99.9065%" height="15" fill="rgb(250,182,30)" fg:x="38" fg:w="91901"/><text x="0.2913%" y="783.50">hello.exe`__scrt_common_main_seh()</text></g><g><title>hello.exe`invoke_main() (91,892 samples, 99.90%)</title><rect x="0.0511%" y="757" width="99.8967%" height="15" fill="rgb(248,8,30)" fg:x="47" fg:w="91892"/><text x="0.3011%" y="767.50">hello.exe`invoke_main()</text></g><g><title>hello.exe`main (91,892 samples, 99.90%)</title><rect x="0.0511%" y="741" width="99.8967%" height="15" fill="rgb(237,120,30)" fg:x="47" fg:w="91892"/><text x="0.3011%" y="751.50">hello.exe`main</text></g><g><title>hello.exe`std::rt::lang_start_internal (91,892 samples, 99.90%)</title><rect x="0.0511%" y="725" width="99.8967%" height="15" fill="rgb(221,146,34)" fg:x="47" fg:w="91892"/><text x="0.3011%" y="735.50">hello.exe`std::rt::lang_start_internal</text></g><g><title>hello.exe`std::panic::catch_unwind (91,892 samples, 99.90%)</title><rect x="0.0511%" y="709" width="99.8967%" height="15" fill="rgb(242,55,13)" fg:x="47" fg:w="91892"/><text x="0.3011%" y="719.50">hello.exe`std::panic::catch_unwind</text></g><g><title>hello.exe`std::panicking::try (91,892 samples, 99.90%)</title><rect x="0.0511%" y="693" width="99.8967%" height="15" fill="rgb(242,112,31)" fg:x="47" fg:w="91892"/><text x="0.3011%" y="703.50">hello.exe`std::panicking::try</text></g><g><title>hello.exe`std::panicking::try::do_call (91,892 samples, 99.90%)</title><rect x="0.0511%" y="677" width="99.8967%" height="15" fill="rgb(249,192,27)" fg:x="47" fg:w="91892"/><text x="0.3011%" y="687.50">hello.exe`std::panicking::try::do_call</text></g><g><title>hello.exe`std::rt::lang_start_internal::closure$2 (91,891 samples, 99.90%)</title><rect x="0.0522%" y="661" width="99.8956%" height="15" fill="rgb(208,204,44)" fg:x="48" fg:w="91891"/><text x="0.3022%" y="671.50">hello.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>hello.exe`std::panic::catch_unwind (91,891 samples, 99.90%)</title><rect x="0.0522%" y="645" width="99.8956%" height="15" fill="rgb(208,93,54)" fg:x="48" fg:w="91891"/><text x="0.3022%" y="655.50">hello.exe`std::panic::catch_unwind</text></g><g><title>hello.exe`std::rt::lang_start::closure$0&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt; &gt;(std::rt::lang_start::closure_env$0&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$ (91,891 samples, 99.90%)</title><rect x="0.0522%" y="629" width="99.8956%" height="15" fill="rgb(242,1,31)" fg:x="48" fg:w="91891"/><text x="0.3022%" y="639.50">hello.exe`std::rt::lang_start::closure$0&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt; &gt;(std::rt::lang_star..</text></g><g><title>hello.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt; (*)(),enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt; &gt;(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global&gt; &gt; &gt; (*) (91,891 samples, 99.90%)</title><rect x="0.0522%" y="613" width="99.8956%" height="15" fill="rgb(241,83,25)" fg:x="48" fg:w="91891"/><text x="0.3022%" y="623.50">hello.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error&gt;,alloc::alloc::Global..</text></g><g><title>hello.exe`hello::main (91,891 samples, 99.90%)</title><rect x="0.0522%" y="597" width="99.8956%" height="15" fill="rgb(205,169,50)" fg:x="48" fg:w="91891"/><text x="0.3022%" y="607.50">hello.exe`hello::main</text></g><g><title>`0x7FF813C2375E (14 samples, 0.02%)</title><rect x="99.9543%" y="757" width="0.0152%" height="15" fill="rgb(239,186,37)" fg:x="91945" fg:w="14"/><text x="100.2043%" y="767.50"></text></g><g><title>`0x7FF813B66AF4 (14 samples, 0.02%)</title><rect x="99.9543%" y="741" width="0.0152%" height="15" fill="rgb(205,221,10)" fg:x="91945" fg:w="14"/><text x="100.2043%" y="751.50"></text></g><g><title>`0x7FF813B673E4 (14 samples, 0.02%)</title><rect x="99.9543%" y="725" width="0.0152%" height="15" fill="rgb(218,196,15)" fg:x="91945" fg:w="14"/><text x="100.2043%" y="735.50"></text></g><g><title>`0x7FF813C23AFD (13 samples, 0.01%)</title><rect x="99.9728%" y="757" width="0.0141%" height="15" fill="rgb(218,196,35)" fg:x="91962" fg:w="13"/><text x="100.2228%" y="767.50"></text></g><g><title>`0x7FF813B67B29 (13 samples, 0.01%)</title><rect x="99.9728%" y="741" width="0.0141%" height="15" fill="rgb(233,63,24)" fg:x="91962" fg:w="13"/><text x="100.2228%" y="751.50"></text></g><g><title>`0x7FF813B688A8 (13 samples, 0.01%)</title><rect x="99.9728%" y="725" width="0.0141%" height="15" fill="rgb(225,8,4)" fg:x="91962" fg:w="13"/><text x="100.2228%" y="735.50"></text></g><g><title>`0x7FF813B64479 (13 samples, 0.01%)</title><rect x="99.9728%" y="709" width="0.0141%" height="15" fill="rgb(234,105,35)" fg:x="91962" fg:w="13"/><text x="100.2228%" y="719.50"></text></g><g><title>`0x7FF813B64C14 (11 samples, 0.01%)</title><rect x="99.9750%" y="693" width="0.0120%" height="15" fill="rgb(236,21,32)" fg:x="91964" fg:w="11"/><text x="100.2250%" y="703.50"></text></g><g><title>`0x7FF813B67B29 (11 samples, 0.01%)</title><rect x="99.9750%" y="677" width="0.0120%" height="15" fill="rgb(228,109,6)" fg:x="91964" fg:w="11"/><text x="100.2250%" y="687.50"></text></g><g><title>`0x7FF813BC4C43 (46 samples, 0.05%)</title><rect x="99.9489%" y="789" width="0.0500%" height="15" fill="rgb(229,215,31)" fg:x="91940" fg:w="46"/><text x="100.1989%" y="799.50"></text></g><g><title>`0x7FF813BC4DBB (46 samples, 0.05%)</title><rect x="99.9489%" y="773" width="0.0500%" height="15" fill="rgb(221,52,54)" fg:x="91940" fg:w="46"/><text x="100.1989%" y="783.50"></text></g><g><title>all (91,987 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(252,129,43)" fg:x="0" fg:w="91987"/><text x="0.2500%" y="831.50"></text></g><g><title>`0x7FF813BC4BEE (47 samples, 0.05%)</title><rect x="99.9489%" y="805" width="0.0511%" height="15" fill="rgb(248,183,27)" fg:x="91940" fg:w="47"/><text x="100.1989%" y="815.50"></text></g></svg></svg>